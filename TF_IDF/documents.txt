watering plant want water n^10 plant garden watering plant arranged row labeled 0^10 n^10 1^10 left right ith plant located x river x 1^10 refill watering plant need specific amount water water plant following way water plant order left right watering current plant enough water completely water next plant river fully refill watering cannot refill watering early initially river e x 1^10 take one step move one unit x axis 0^10 indexed integer array plant n^10 integer plant amount water ith plant need integer capacity representing watering capacity number step needed water plant
maximum ascending subarray sum array positive integer nums maximum possible sum ascending subarray nums subarray defined contiguous sequence number array subarray numsl numsl 1^10 numsr 1^10 numsr ascending l numsi numsi 1^10 note subarray size 1^10 ascending
ball fall 2^10 grid size x n^10 representing box n^10 ball box open top bottom side cell box diagonal board spanning two corner cell redirect ball right left board redirects ball right span top left corner bottom right corner represented grid 1^10 board redirects ball left span top right corner bottom left corner represented grid 1^10 drop one ball top column box ball get stuck box fall bottom ball get stuck hit v shaped pattern two board board redirects ball either wall box array answer size n^10 answer column ball fall bottom dropping ball ith column top 1^10 ball get stuck box
teemo attacking hero teemo attacking enemy ashe poison attack teemo attack ashe ashe get poisoned exactly duration second formally attack second mean ashe poisoned inclusive time interval duration 1^10 teemo attack poison effect end timer reset poison effect end duration second new attack non decreasing integer array timeseries timeseries denotes teemo attack ashe second timeseries integer duration total number second ashe poisoned
integer replacement positive integer n^10 apply one following operation n^10 even replace n^10 n^10 2^10 n^10 odd replace n^10 either n^10 1^10 n^10 1^10 minimum number operation needed n^10 become 1^10
find path exists graph bi directional graph n^10 vertex vertex labeled 0^10 n^10 1^10 inclusive edge graph represented 2d integer array edge edge ui vi denotes bi directional edge vertex ui vertex vi every vertex pair connected one edge vertex edge want determine valid path exists vertex source vertex destination edge integer n^10 source destination true valid path source destination false otherwise
minimize malware spread network n^10 node represented n^10 x n^10 adjacency matrix graph ith node directly connected jth node graph j 1^10 node initial initially infected malware whenever two node directly connected least one two node infected malware node infected malware spread malware continue node infected manner suppose initial final number node infected malware entire network spread malware stop remove exactly one node initial node removed would minimize initial multiple node could removed minimize initial node smallest index note node removed initial list infected node might still infected later due malware spread
bulb switcher ii room n^10 bulb labeled 1^10 n^10 turned initially four button wall four button different functionality button 1^10 flip status bulb button 2^10 flip status bulb even label e 2^10 4 button 3^10 flip status bulb odd label e 1^10 3^10 button 4 flip status bulb label j 3k 1^10 k^10 0^10 1^10 2^10 e 1^10 4 7^10 10^10 must make exactly press button press total press may pick four button press two integer n^10 press number different possible status performing press button press
graph connectivity threshold n^10 city labeled 1^10 n^10 two different city label x directly connected bidirectional road x share common divisor strictly greater threshold formally city label x road exists integer z following true x z 0^10 z 0^10 andz threshold two integer n^10 threshold array query must determine query ai bi city ai bi connected directly indirectly e path array answer answer length query length answer true ith query path ai bi answer false path
count special quadruplet 0^10 indexed integer array nums number distinct quadruplet b^10 c^10 nums nums b^10 nums c^10 nums anda b^10 c^10
number time binary string prefix aligned 1^10 indexed binary string length n^10 bit 0^10 initially flip bit binary string e change 0^10 1^10 one one 1^10 indexed integer array flip flip indicates bit index flipped ith step binary string prefix aligned ith step bit inclusive range 1^10 one bit zero number time binary string prefix aligned flipping process
increasing order search tree root binary search tree rearrange tree order leftmost node tree root tree every node left child one right child
isomorphic string two string determine isomorphic two string isomorphic character replaced get occurrence character must replaced another character preserving order character two character may map character character may map
sum absolute difference sorted array integer array nums sorted non decreasing order build integer array result length nums result equal summation absolute difference nums element array word result equal sum nums nums j 0^10 j nums length j 0^10 indexed
number boomerang n^10 point plane distinct point xi yi boomerang tuple point j k^10 distance j equal distance k^10 order tuple matter number boomerang
get equal substring within budget two string length integer maxcost want change changing ith character ith character cost e absolute difference ascii value character maximum length substring changed corresponding substring cost le equal maxcost substring changed corresponding substring 0^10
check good array array nums positive integer task select subset nums multiply element integer add number array said good obtain sum 1^10 array possible subset multiplicand true array good otherwise false
optimal division integer array nums adjacent integer nums perform float division example nums 2^10 3^10 4 evaluate expression 2^10 3^10 4 however add number parenthesis position change priority operation want add parenthesis value expression evaluation maximum corresponding expression maximum value string format note expression contain redundant parenthesis
longest subsequence limited sum integer array nums length n^10 integer array query length array answer length answer maximum size subsequence take nums sum element le equal query subsequence array derived another array deleting element without^10 changing order remaining element
alternating digit sum positive integer n^10 digit n^10 sign according following rule significant digit assigned positive sign digit opposite sign adjacent digit sum digit corresponding sign
strong password checker password considered strong condition met least 6 character 20 character contains least one lowercase letter least one uppercase letter least one digit contain three repeating character row e baaabb0 weak baaba0 strong string password minimum number step required make password strong password already strong 0^10 one step insert one character password delete one character password orreplace one character password another character
compare string frequency smallest character let function f frequency lexicographically smallest character non empty string example dcce f 2^10 lexicographically smallest character c^10 frequency 2^10 array string word another array query string query query query count number word word f query f w w word integer array answer answer answer ith query
tree node sql schematable tree column name type id int p_id int id primary key column table row table contains information id node id parent node tree structure always valid tree node tree one three type leaf node leaf node root node root tree inner node neither leaf node root node write sql query report type node tree result table order query result format following example
sum number unit digit k^10 two integer num k^10 consider set positive integer following property unit digit integer k^10 sum integer num minimum possible size set 1^10 set exists note set contain multiple instance integer sum empty set considered 0^10 unit digit number rightmost digit number
kth^10 smallest product two sorted array two sorted 0^10 indexed integer array nums1 nums2 integer k^10 kth^10 1^10 based smallest product nums1 nums2 j 0^10 nums1 length 0^10 j nums2 length
maximize greatness array 0^10 indexed integer array nums allowed^10 permute nums new array perm choosing define greatness nums number index 0^10 nums length perm nums maximum possible greatness achieve permuting nums
super washing machine n^10 super washing machine line initially washing machine dress empty move could choose 1^10 n^10 washing machine pas one dress washing machine one adjacent washing machine time integer array machine representing number dress washing machine left right line minimum number move make washing machine number dress possible 1^10
project employee sql schematable project column name type project_id int employee_id int project_id employee_id primary key table employee_id foreign key employee table row table indicates employee employee_id working project project_id table employee column name type employee_id int name varchar experience_years int employee_id primary key table guaranteed experience_years null row table contains information one employee write sql query report average experience year employee project rounded 2^10 digit result table order query result format following example
non negative integer without^10 consecutive one positive integer n^10 number integer range 0^10 n^10 whose binary representation contain consecutive one
sliding subarray beauty integer array nums containing n^10 integer find beauty subarray size k^10 beauty subarray xth smallest integer subarray negative 0^10 fewer x negative integer integer array containing n^10 k^10 1^10 integer denote beauty subarrays order first index array subarray contiguous non empty sequence element within array
latest time catch bus 0^10 indexed integer array bus length n^10 bus represents departure time ith bus also 0^10 indexed integer array passenger length passenger j represents arrival time jth passenger bus departure time unique passenger arrival time unique integer capacity represents maximum number passenger get bus passenger arrives wait line next available bus get bus departs x minute arrive minute x bus full passenger earliest arrival time get bus first formally bus arrives either capacity fewer passenger waiting bus get bus orthe capacity passenger earliest arrival time get bus latest time may arrive bus station catch bus cannot arrive time another passenger note array bus passenger necessarily sorted
maximum length repeated subarray two integer array nums1 nums2 maximum length subarray appears array
divide interval minimum number group 2d integer array interval interval lefti righti represents inclusive interval lefti righti divide interval one group interval exactly one group two interval group intersect minimum number group need make two interval intersect least one common number example interval 1^10 5^10 5^10 8 intersect
largest 3^10 digit number string string num representing large integer integer good meet following condition substring num length 3^10 consists one unique digit maximum good integer string empty string integer exists note substring contiguous sequence character within string may leading zero num good integer
first letter appear twice string consisting lowercase english letter first letter appear twice note letter appears twice another letter b^10 second occurrence second occurrence b^10 contain least one letter appears twice
count integer two numeric string num1 num2 two integer max_sum min_sum denote integer x good num1 x num2min_sum digit_sum x max_sum number good integer answer may large modulo 109 7^10 note digit_sum x denotes sum digit x
product last k^10 number design algorithm accepts stream integer retrieves product last k^10 integer stream implement productofnumbers class productofnumbers initializes object empty stream void add int num appends integer num stream int getproduct int k^10 return product last k^10 number current list assume always current list least k^10 number test case generated time product contiguous sequence number fit single 32 bit integer without^10 overflowing
naming company array string idea represents list name used process naming company process naming company follows choose 2^10 distinct name idea call ideaa ideab swap first letter ideaa ideab new name found original idea name ideaa ideab concatenation ideaa ideab separated space valid company name otherwise valid name number distinct valid name company
count way group overlapping range 2d integer array range range starti endi denotes integer starti endi inclusive contained ith range split range two possibly empty group range belongs exactly one group two overlapping range must belong group two range said overlapping exists least one integer present range example 1^10 3^10 2^10 5^10 overlapping 2^10 3^10 occur range total number way split range two group answer may large modulo 109 7^10
01^10 matrix x n^10 binary matrix mat distance nearest 0^10 cell distance two adjacent cell 1^10
find distance value two array two integer array arr1 arr2 integer distance value two array distance value defined number element arr1 element arr2 j arr1 arr2 j
longest common subpath country n^10 city numbered 0^10 n^10 1^10 country road connecting every pair city friend numbered 0^10 1^10 traveling country one take path consisting city path represented integer array contains visited city order path may contain city city listed consecutively integer n^10 2d integer array path path integer array representing path ith friend length longest common subpath shared every friend path 0^10 common subpath subpath path contiguous sequence city within path
reachable node subdivided graph undirected graph original graph n^10 node labeled 0^10 n^10 1^10 decide subdivide edge graph chain node number new node varying edge graph 2d array edge edge ui vi cnti indicates edge node ui vi original graph cnti total number new node subdivide edge note cnti 0^10 mean subdivide edge subdivide edge ui vi replace cnti 1^10 new edge cnti new node new node x1 x2 xcnti new edge ui x1 x1 x2 x2 x3 xcnti 1^10 xcnti xcnti vi new graph want know many node reachable node 0^10 node reachable distance maxmoves le original graph maxmoves number node reachable node 0^10 new graph
cinema seat allocation cinema n^10 row seat numbered 1^10 n^10 ten seat row labelled 1^10 10^10 shown figure array reservedseats containing number seat already reserved example reservedseats 3^10 8 mean seat located row 3^10 labelled 8 already reserved maximum number four person group assign cinema seat four person group occupies four adjacent seat one single row seat across aisle 3^10 3^10 3^10 4 considered adjacent exceptional case aisle split four person group case aisle split four person group middle mean two people side
frog jump ii 0^10 indexed integer array stone sorted strictly increasing order representing position stone river frog initially first stone want travel last stone first stone however jump stone length jump absolute difference position stone frog currently position stone frog jump formally frog stone jumping stone j length jump stone stone j cost path maximum length jump among jump path minimum cost path frog
balanced binary tree binary tree determine isheight balanced
path sum ii root binary tree integer targetsum root leaf path sum node value path equal targetsum path returned list node value node reference root leaf path path starting root ending leaf node leaf node child
minimum number operation convert time two string current correct representing two 24^10 hour time 24^10 hour time formatted hh mm hh 00 23 mm 00 59 earliest 24^10 hour time 00 00 latest 23 59 one operation increase time current 1^10 5^10 15 60^10 minute perform operation number time minimum number operation needed convert current correct
container water integer array height length n^10 n^10 vertical line drawn two endpoint ith line 0^10 height find two line together x axis form container container contains water maximum amount water container store notice may slant container
find pivot index array integer nums calculate pivot index array pivot index index sum number strictly left index equal sum number strictly index right index left edge array left sum 0^10 element left also applies right edge array leftmost pivot index index exists 1^10
selling piece wood two integer n^10 represent height width rectangular piece wood also 2d integer array price price hi wi pricei indicates sell rectangular piece wood height hi width wi pricei dollar cut piece wood must make vertical horizontal cut across entire height width piece split two smaller piece cutting piece wood number smaller piece sell piece according price may sell multiple piece shape sell shape grain wood make difference cannot rotate piece swap height width maximum money earn cutting x n^10 piece wood note cut piece wood many time want
minimum number refueling stop car travel starting position destination target mile east starting position gas station along way gas station represented array station station positioni fueli indicates ith gas station positioni mile east starting position fueli liter gas car start infinite tank gas initially startfuel liter fuel us one liter gas per^10 one mile drive car reach gas station may stop refuel transferring gas station car minimum number refueling stop car must make order reach destination cannot reach destination 1^10 note car reach gas station 0^10 fuel left car still refuel car reach destination 0^10 fuel left still considered arrived
add binary two binary string b^10 sum binary string
count number text alice texting bob using^10 phone mapping digit letter shown figure order add letter alice press key corresponding digit time position letter key example add letter alice press 7^10 four time similarly add letter k^10 alice press 5^10 twice note digit 0^10 1^10 map letter alice use however due error transmission bob receive alice text message received string pressed key instead example alice sent message bob bob received string 2266622 string pressedkeys representing string received bob total number possible text message alice could sent answer may large modulo 109 7^10
masking personal information personal information string representing either email address phone number masked personal information using^10 rule email address email address name consisting uppercase lowercase english letter followed bythe symbol followed bythe domain consisting uppercase lowercase english letter dot somewhere middle first last character mask email uppercase letter name domain must converted lowercase letter middle letter name e first last letter must replaced 5^10 asterisk phone number phone number formatted follows phone number contains 10^10 13 digit last 10^10 digit make local number remaining 0^10 3^10 digit beginning make country code separation character set separate digit way mask phone number remove separation character masked phone number form xxxx country code 0^10 digit xxxx country code 1^10 digit xxxx country code 2^10 digit xxxx country code 3^10 digit xxxx last 4 digit local number
binary tree preorder traversal root binary tree preorder traversal node value
maximum product difference two pair product difference two pair b^10 c^10 defined b^10 c^10 example product difference 5^10 6 2^10 7^10 5^10 6 2^10 7^10 16 integer array nums choose four distinct index w x z product difference pair nums w nums x nums nums z maximized maximum product difference
maximize grid happiness four integer n^10 introvertscount extrovertscount x n^10 grid two type people introvert extrovert introvertscount introvert extrovertscount extrovert decide many people want live grid assign one grid cell note people living grid happiness person calculated follows introvert start 120 happiness lose 30^10 happiness neighbor introvert extrovert extrovert start 40 happiness gain 20 happiness neighbor introvert extrovert neighbor live directly adjacent cell north east south west person cell grid happiness sum person happiness maximum possible grid happiness
burst balloon n^10 balloon indexed 0^10 n^10 1^10 balloon painted number represented array nums asked burst balloon burst ith balloon get nums 1^10 nums nums 1^10 coin 1^10 1^10 go bound array treat balloon 1^10 painted maximum coin collect bursting balloon wisely
lowest common ancestor deepest leaf root binary tree lowest common ancestor deepest leaf recall node binary tree leaf childrenthe depth root tree 0^10 depth node depth child 1^10 lowest common ancestor set node node largest depth every node subtree root
maximum depth binary tree root binary tree maximum depth binary tree maximum depth number node along longest path root node farthest leaf node
longest uploaded prefix stream n^10 video represented distinct number 1^10 n^10 need upload server need implement data structure calculates length longest uploaded prefix various point upload process consider uploaded prefix video range 1^10 inclusive uploaded server longest uploaded prefix maximum value satisfies definition implement luprefix class luprefix int n^10 initializes object stream n^10 video void upload int video uploads video server int longest return length longest uploaded prefix defined
happy number write algorithm determine number n^10 happy happy number number defined following process starting positive integer replace number sum square digit repeat process number equal 1^10 stay loop endlessly cycle include 1^10 number process end 1^10 happy true n^10 happy number false
reverse integer signed 32 bit integer x x digit reversed reversing x cause value go outside signed 32 bit integer range 231 231 1^10 0^10 assume environment allow store 64 bit integer signed unsigned
egg drop 2^10 egg n^10 floor two identical egg access building n^10 floor labeled 1^10 n^10 know exists floor f 0^10 f n^10 egg dropped floor higher f break egg dropped floor f break move may take unbroken egg drop floor x 1^10 x n^10 egg break longer use however egg break may reuse future move minimum number move need determine certainty value f
satisfiability equality equation array string equation represent relationship variable string equation length 4 take one two different form xi yi xi yi xi yi lowercase letter necessarily different represent one letter variable name true possible assign integer variable name satisfy equation false otherwise
minimum number arrow burst balloon spherical balloon taped onto flat wall represents xy plane balloon represented 2d integer array point point xstart xend denotes balloon whose horizontal diameter stretch xstart xend know exact coordinate balloon arrow shot directly vertically positive direction different point along x axis balloon xstart xend burst arrow shot x xstart x xend limit number arrow shot shot arrow keep traveling infinitely bursting balloon path array point minimum number arrow must shot burst balloon
minimum number people teach social network consisting user friendship user two user communicate know common language integer n^10 array language array friendship n^10 language numbered 1^10 n^10 language set language ith user know andfriendships ui vi denotes friendship user ui vi choose one language teach user friend communicate minimum number user need teach note friendship transitive meaning x friend friend z guarantee x friend z
kth^10 smallest element bst root binary search tree integer k^10 kth^10 smallest value 1^10 indexed value node tree
shortest bridge n^10 x n^10 binary matrix grid 1^10 represents land 0^10 represents water island 4 directionally connected group 1^10 connected 1^10 exactly two island grid may change 0^10 1^10 connect two island form one island smallest number 0^10 must flip connect two island
serialize deserialize bst serialization converting data structure object sequence bit stored file memory buffer transmitted across network connection link reconstructed later another computer environment design algorithm serialize deserialize binary search tree restriction serialization deserialization algorithm work need ensure binary search tree serialized string string deserialized original tree structure encoded string compact possible
number line write string string lowercase english letter array width denoting many pixel wide lowercase english letter specifically width 0^10 width width 1^10 width b^10 trying write across several line line longer 100 pixel starting beginning write many letter first line total width exceed 100 pixel stopped continue writing many letter second line continue process written array result length 2^10 result 0^10 total number line result 1^10 width last line pixel
h index array integer citation citation number citation researcher received ith paper researcher h index according definition h index wikipedia h index defined maximum value h researcher published least h paper cited least h time
validate binary tree node n^10 binary tree node numbered 0^10 n^10 1^10 node two child leftchild rightchild true node form exactly one valid binary tree node left child leftchild equal 1^10 similarly right child note node value use node number problem
verbal arithmetic puzzle equation represented word left side result right side need check equation solvable following rule character decoded one digit 0^10 9 two character map digit word result decoded one number without^10 leading zero sum number left side word equal number right side result true equation solvable otherwise false
put marble bag k^10 bag 0^10 indexed integer array weight weight weight ith marble also integer k^10 divide marble k^10 bag according following rule bag empty ith marble jth marble bag marble index ith jth index also bag bag consists marble index j inclusively cost bag weight weight j score distributing marble sum cost k^10 bag difference maximum minimum score among marble distribution
longest path different adjacent character tree e connected undirected graph cycle rooted node 0^10 consisting n^10 node numbered 0^10 n^10 1^10 tree represented 0^10 indexed array parent size n^10 parent parent node node 0^10 root parent 0^10 1^10 also string length n^10 character assigned node length longest path tree pair adjacent node path character assigned
find loser circular game n^10 friend playing game friend sitting circle numbered 1^10 n^10 clockwise order formally moving clockwise ith friend brings 1^10 th friend 1^10 n^10 moving clockwise nth friend brings 1st friend rule game follows 1st friend receives ball 1st friend pass friend k^10 step away clockwise direction friend receives ball pas friend 2^10 k^10 step away clockwise direction friend receives ball pas friend 3^10 k^10 step away clockwise direction forth word ith turn friend holding ball pas friend k^10 step away clockwise direction game finished friend receives ball second time loser game friend receive ball entire game number friend n^10 integer k^10 array answer contains loser game ascending order
minimum absolute difference bst root binary search tree bst minimum absolute difference value two different node tree
check matrix x matrix square matrix said x matrix following condition hold element diagonal matrix non zero element 0^10 2d integer array grid size n^10 x n^10 representing square matrix true grid x matrix otherwise false
find difference two array two 0^10 indexed integer array nums1 nums2 list answer size 2^10 answer 0^10 list distinct integer nums1 present nums2 answer 1^10 list distinct integer nums2 present nums1 note integer list may returned order
remove duplicate letter string remove duplicate letter every letter appears must make sure result isthe smallest lexicographical orderamong possible result
shortest subarray removed make array sorted integer array arr remove subarray empty arr remaining element arr non decreasing length shortest subarray remove subarray contiguous subsequence array
minimum number operation reinitialize permutation even integer n^10 initially permutation perm size n^10 perm 0^10 indexed one operation create new array arr 2^10 0^10 arr perm 2^10 2^10 1^10 arr perm n^10 2^10 1^10 2^10 assign arr perm minimum non zero number operation need perform perm permutation initial value
reveal card increasing order integer array deck deck card every card unique integer integer ith card deck order deck order want initially card start face unrevealed one deck following step repeatedly card revealed take top card deck reveal take deck still card deck put next top card deck bottom deck still unrevealed card go back step 1^10 otherwise stop ordering deck would reveal card increasing order note first entry answer considered top deck
maximize win two segment prize x axis integer array prizepositions sorted non decreasing order prizepositions position ith prize could different prize position line also integer k^10 allowed^10 select two segment integer endpoint length segment must k^10 collect prize whose position fall within least one two selected segment including endpoint segment two selected segment may intersect example k^10 2^10 choose segment 1^10 3^10 2^10 4 win prize satisfies 1^10 prizepositions 3^10 2^10 prizepositions 4 maximum number prize win choose two segment optimally
minimize deviation array array nums n^10 positive integer perform two type operation element array number time element even divide 2^10 example array 1^10 2^10 3^10 4 operation last element array 1^10 2^10 3^10 2^10 element odd multiply 2^10 example array 1^10 2^10 3^10 4 operation first element array 2^10 2^10 3^10 4 deviation array maximum difference two element array minimum deviation array performing number operation
univalued binary tree binary tree uni valued every node tree value root binary tree true tree uni valued false otherwise
maximum product length two palindromic subsequence string find two disjoint palindromic subsequence product length maximized two subsequence disjoint pick character index maximum possible product length two palindromic subsequence subsequence string derived another string deleting character without^10 changing order remaining character string palindromic read forward backward
word search ii x n^10 board character list string word word board word must constructed letter sequentially adjacent cell adjacent cell horizontally vertically neighboring letter cell may used word
bitwise or^10 subarrays integer array arr number distinct bitwise or^10 non empty subarrays arr bitwise subarray bitwise integer subarray bitwise subarray one integer integer subarray contiguous non empty sequence element within array
subarray sum divisible k^10 integer array nums integer k^10 number non empty subarrays sum divisible k^10 subarray contiguous part array
find eventual safe state directed graph n^10 node node labeled 0^10 n^10 1^10 graph represented 0^10 indexed 2d integer array graph graph integer array node adjacent node meaning edge node node graph node terminal node outgoing edge node safe node every possible path starting node lead terminal node another safe node array containing safe node graph answer sorted ascending order
find peak element peak element element strictly greater neighbor 0^10 indexed integer array nums find peak element index array contains multiple peak index peak may imagine nums 1^10 nums n^10 ∞ word element always considered strictly greater neighbor outside array must write algorithm run log n^10 time
remove sub folder filesystem list folder folder folder removing sub folder folder may answer order folder located within another folder j called sub folder format path one concatenated string form followed one lowercase english letter example leetcode leetcode problem valid path empty string
minimum distance target element integer array nums 0^10 indexed two integer target start find index nums target ab start minimized note ab x absolute value x ab start guaranteed target exists nums
valid parenthesis string containing character determine input string valid input string valid open bracket must closed type bracket open bracket must closed correct order every close bracket corresponding open bracket type
delete column make sorted array n^10 string strs length string arranged one line making grid example strs abc bce cae arranged follows abcbcecaeyou want delete column sorted lexicographically example 0^10 indexed column 0^10 b^10 c^10 2^10 c^10 e e sorted column 1^10 b^10 c^10 would delete column 1^10 number column delete
closest divisor integer num find closest two integer absolute difference whose product equal num 1^10 num 2^10 two integer order
design movie rental system movie renting company consisting n^10 shop want implement renting system support searching booking returning movie system also support generating report currently rented movie movie 2d integer array entry entry shopi moviei pricei indicates copy movie moviei shop shopi rental price pricei shop carry one copy movie moviei system support following function search find cheapest 5^10 shop unrented copy movie shop sorted price ascending order case tie one smaller shopi appear first le 5^10 matching shop returned shop unrented copy empty list returned rent rent unrented copy movie shop drop drop previously rented copy movie shop report return cheapest 5^10 rented movie possibly movie id 2d list re re j shopj moviej describes jth cheapest rented movie moviej rented shop shopj movie re sorted price ascending order case tie one smaller shopj appear first still tie one smaller moviej appear first fewer 5^10 rented movie returned movie currently rented empty list returned implement movierentingsystem class movierentingsystem int n^10 int entry initializes movierentingsystem object n^10 shop movie entry list integer search int movie return list shop unrented copy movie described void rent int shop int movie rent movie shop void drop int shop int movie drop previously rented movie shop list list integer report return list cheapest rented movie described note test case generated rent called shop unrented copy movie drop called shop previously rented movie
minimum recolors get k^10 consecutive black block 0^10 indexed string block length n^10 block either w b^10 representing color ith block character w b^10 denote color white black respectively also integer k^10 desired number consecutive black block one operation recolor white block becomes black block minimum number operation needed least one occurrence k^10 consecutive black block
perfect square integer n^10 least number perfect square number sum n^10 perfect square integer square integer word product integer example 1^10 4 9 16 perfect square 3^10 11
expression add operator string num contains digit integer target possibility insert binary operator digit num resultant expression evaluates target value note operand returned expression contain leading zero
number way reconstruct tree array pair pair xi yi duplicate xi yilet way number rooted tree satisfy following condition tree consists node whose value appeared pair pair xi yi exists pair xi ancestor yi yi ancestor xi note tree binary tree two way considered different least one node different parent way 0^10 way 01^10 way 12 way 1a rooted tree tree single root node edge oriented outgoing root ancestor node node path root node excluding node root ancestor
partition label string want partition string many part possible letter appears one part note partition done concatenating part order resultant string list integer representing size part
sort jumbled number 0^10 indexed integer array mapping represents mapping rule shuffled decimal system mapping j mean digit mapped digit j system mapped value integer new integer obtained replacing occurrence digit integer mapping 0^10 9 also another integer array nums array nums sorted non decreasing order based mapped value element note element mapped value appear relative order input element nums sorted based mapped value replaced
count number special subsequence sequence special consists positive number 0^10 followed positive number 1^10 positive number 2^10 example 0^10 1^10 2^10 0^10 0^10 1^10 1^10 1^10 2^10 special contrast 2^10 1^10 0^10 1^10 0^10 1^10 2^10 0^10 special array nums consisting integer 0^10 1^10 2^10 number different subsequence special answer may large modulo 109 7^10 subsequence array sequence derived array deleting element without^10 changing order remaining element two subsequence different set index chosen different
longest increasing path matrix x n^10 integer matrix length longest increasing path matrix cell either move four direction left right may move diagonally move outside boundary e wrap around allowed^10
minimum operation convert number 0^10 indexed integer array nums containing distinct number integer start integer goal integer x initially set start want perform operation x converted goal perform following operation repeatedly number x 0^10 x 1000 index array 0^10 nums length set x following x nums x nums x nums bitwise xor note use nums number time order operation set x range 0^10 x 1000 valid operation done afterward minimum number operation needed convert x start goal 1^10 possible
group sold product date sql schematable activity column name type sell_date date product varchar primary key table may contain duplicate row table contains product name date sold market write sql query find date number different product sold name sold product name date sorted lexicographically result table ordered sell_date query result format following example
minimum cost make array equal two 0^10 indexed array nums cost consisting n^10 positive integer following operation number time increase decrease element array nums 1^10 cost one operation ith element cost minimum total cost element array nums become equal
stone game alice bob play game pile stone even number pile arranged row pile positive integer number stone pile objective game end stone total number stone across pile odd tie alice bob take turn alice starting first turn player take entire pile stone either beginning end row continues pile left point person stone win assuming alice bob play optimally true alice win game false bob win
remove one element make array strictly increasing 0^10 indexed integer array nums true made strictly increasing removing exactly one element false otherwise array already strictly increasing true array nums strictly increasing nums 1^10 nums index 1^10 nums length
number way cutting pizza rectangular pizza represented row x col matrix containing following character apple empty cell integer k^10 cut pizza k^10 piece using^10 k^10 1^10 cut cut choose direction vertical horizontal choose cut position cell boundary cut pizza two piece cut pizza vertically give left part pizza person cut pizza horizontally give upper part pizza person give last piece pizza last person number way cutting pizza piece contains least one apple answer huge number modulo 10^10 9 7^10
subtract product sum digit integer integer number n^10 difference product digit sum digit
online election two integer array person time election ith vote cast person time time query time find person leading election time vote cast time count towards query case tie recent vote among tied candidate win implement topvotedcandidate class topvotedcandidate int person int time initializes object person time array int q int return number person leading election time according mentioned rule
next greater node linked list head linked list n^10 node node list find value next greater node node find value first node next strictly larger value integer array answer answer value next greater node ith node 1^10 indexed ith node next greater node set answer 0^10
check character equal number occurrence string true good string false otherwise string good character appear number occurrence e frequency
counting bit integer n^10 array an^10 length n^10 1^10 0^10 n^10 an^10 number 1^10 binary representation
max sum rectangle larger k^10 x n^10 matrix matrix integer k^10 max sum rectangle matrix sum larger k^10 guaranteed rectangle sum larger k^10
available capture rook 8 x 8 chessboard exactly one white rook number white bishop b^10 black pawn p empty square rook move chooses one four cardinal direction north east south west move direction chooses stop reach edge board capture black pawn blocked white bishop rook considered attacking pawn rook capture pawn rook turn number available capture white rook number pawn rook attacking number available capture white rook
design hashmap design hashmap without^10 using^10 built hash table library implement myhashmap class myhashmap initializes object empty map void put int key int value insert key value pair hashmap key already exists map update corresponding value int get int key return value specified key mapped 1^10 map contains mapping key void remove key remove key corresponding value map contains mapping key
trapping rain water ii x n^10 integer matrix heightmap representing height unit cell 2d elevation map volume water trap raining
modify graph edge weight undirected weighted connected graph containing n^10 node labeled 0^10 n^10 1^10 integer array edge edge ai bi wi indicates edge node ai bi weight wi edge weight 1^10 wi 1^10 others positive weight wi 0^10 task modify edge weight 1^10 assigning positive integer value range 1^10 2^10 109 shortest distance node source destination becomes equal integer target multiple modification make shortest distance source destination equal target considered correct array containing edge even unmodified one order possible make shortest distance source destination equal target empty array impossible note allowed^10 modify weight edge initial positive weight
kth^10 factor n^10 two positive integer n^10 k^10 factor integer n^10 defined integer n^10 0^10 consider list factor n^10 sorted ascending order kth^10 factor list 1^10 n^10 le k^10 factor
number pair interchangeable rectangle n^10 rectangle represented 0^10 indexed 2d integer array rectangle rectangle widthi heighti denotes width height ith rectangle two rectangle j j considered interchangeable width height ratio formally two rectangle interchangeable widthi heighti widthj heightj using^10 decimal division integer division number pair interchangeable rectangle rectangle
power two integer n^10 true power two otherwise false integer n^10 power two exists integer x n^10 2x
boundary path x n^10 grid ball ball initially position startrow startcolumn allowed^10 move ball one four adjacent cell grid possibly grid crossing grid boundary apply maxmove move ball five integer n^10 maxmove startrow startcolumn number path move ball grid boundary answer large modulo 109 7^10
rectangle overlap axis aligned rectangle represented list x1 y1 x2 y2 x1 y1 coordinate bottom left corner x2 y2 coordinate top right corner top bottom edge parallel x axis left right edge parallel axis two rectangle overlap area intersection positive clear two rectangle touch corner edge overlap two axis aligned rectangle rec1 rec2 true overlap otherwise false
reverse odd level binary tree root perfect binary tree reverse node value odd level tree example suppose node value level 3^10 2^10 1^10 3^10 4 7^10 11 29 18 become 18 29 11 7^10 4 3^10 1^10 2^10 root reversed tree binary tree perfect parent node two child leaf level level node number edge along path root node
find minimum time finish job integer array job job amount time take complete ith job k^10 worker assign job job assigned exactly one worker working time worker sum time take complete job assigned goal devise optimal assignment maximum working time worker minimized minimum possible maximum working time assignment
maximum element decreasing rearranging array positive integer arr perform operation possibly none arr satisfies condition value first element arr must 1^10 absolute difference 2^10 adjacent element must le equal 1^10 word ab arr arr 1^10 1^10 1^10 arr length 0^10 indexed ab x absolute value x 2^10 type operation perform number time decrease value element arr smaller positive integer rearrange element arr order maximum possible value element arr performing operation satisfy condition
super ugly number super ugly number positive integer whose prime factor array prime integer n^10 array integer prime nth super ugly number nth super ugly number guaranteed fit 32 bit signed integer
find original array doubled array integer array original transformed doubled array changed appending twice value every element original randomly shuffling resulting array array changed original changed doubled array changed doubled array empty array element original may returned order
maximum repeating substring string sequence string word k^10 repeating word concatenated k^10 time substring sequence word maximum k^10 repeating value highest value k^10 word k^10 repeating sequence word substring sequence word maximum k^10 repeating value 0^10 string sequence word maximum k^10 repeating value word sequence
time needed rearrange binary string binary string one second occurrence 01^10 simultaneously replaced 10^10 process repeat occurrence 01^10 exist number second needed complete process
longest common prefix write function find longest common prefix string amongst array string common prefix empty string
sort character frequency string sort decreasing order based frequency character frequency character number time appears string sorted string multiple answer
time needed inform employee company n^10 employee unique id employee 0^10 n^10 1^10 head company one headid employee one direct manager manager array manager direct manager th employee manager headid 1^10 also guaranteed subordination relationship tree structure head company want inform company employee urgent piece news inform direct subordinate inform subordinate employee know urgent news th employee need informtime minute inform direct subordinate e informtime minute direct subordinate start spreading news number minute needed inform employee urgent news
transpose file text file file txt transpose content may assume row number column field separated character
rotate list head linked list rotate list right k^10 place
cut tree golf event asked cut tree forest golf event forest represented x n^10 matrix matrix 0^10 mean cell cannot walked 1^10 represents empty cell walked number greater 1^10 represents tree cell walked number tree height one step walk four direction north east south west standing cell tree choose whether cut must cut tree order shortest tallest cut tree value cell becomes 1^10 empty cell starting point 0^10 0^10 minimum step need walk cut tree cannot cut tree 1^10 note input generated two tree height least one tree need cut
swap longest repeated character substring string text swap two character text length longest substring repeated character
add digit integer num repeatedly add digit result one digit
random pick index integer array nums possible duplicate randomly output index target number assume target number must exist array implement solution class solution int nums initializes object array nums int pick int target pick random index nums nums target multiple valid index equal probability returning
count number beautiful subarrays 0^10 indexed integer array nums one operation choose two different index j 0^10 j nums length choose non negative integer k^10 kth^10 bit 0^10 indexed binary representation nums nums j 1^10 subtract 2k nums nums j subarray beautiful possible make element equal 0^10 applying operation number time number beautiful subarrays array nums subarray contiguous non empty sequence element within array
consecutive character power string maximum length non empty substring contains one unique character string power
single number iii integer array nums exactly two element appear element appear exactly twice find two element appear answer order must write algorithm run linear runtime complexity us constant extra space
redundant connection ii problem rooted tree directed graph exactly one node root node descendant node plus every node exactly one parent except root node parent input directed graph started rooted tree n^10 node distinct value 1^10 n^10 one additional directed edge added added edge two different vertex chosen 1^10 n^10 edge already existed resulting graph 2d array edge element edge pair ui vi represents directed edge connecting node ui vi ui parent child vi edge removed resulting graph rooted tree n^10 node multiple answer answer occurs last 2d array
find unique binary string array string nums containing n^10 unique binary string length n^10 binary string length n^10 appear nums multiple answer may
binary tree maximum path sum path binary tree sequence node pair adjacent node sequence edge connecting node appear sequence note path need pas root path sum path sum node value path root binary tree maximum path sum non empty path
minimum time collect apple tree undirected tree consisting n^10 vertex numbered 0^10 n^10 1^10 apple vertex spend 1^10 second walk one edge tree minimum time second spend collect apple tree starting vertex 0^10 coming back vertex edge undirected tree array edge edge ai bi mean exists edge connecting vertex ai bi additionally boolean array hasapple hasapple true mean vertex apple otherwise apple
minimum addition make integer beautiful two positive integer n^10 target integer considered beautiful sum digit le equal target minimum non negative integer x n^10 x beautiful input generated always possible make n^10 beautiful
sum digit string convert string consisting lowercase english letter integer k^10 first convert integer replacing letter position alphabet e replace 1^10 b^10 2^10 z 26 transform integer replacing sum digit repeat transform operation k^10 time total example zbax k^10 2^10 resulting integer would 8 following operation convert zbax ➝ 26 2^10 1^10 24^10 ➝ 262124 ➝ 262124transform 1^10 262124 ➝ 2^10 6 2^10 1^10 2^10 4 ➝ 17transform 2^10 17 ➝ 1^10 7^10 ➝ 8return resulting integer performing operation described
binary tree tilt root binary tree sum every tree node tilt tilt tree node absolute difference sum left subtree node value right subtree node value node left child sum left subtree node value treated 0^10 rule similar node right child
customer visited make transaction sql schematable visit column name type visit_id int customer_id int visit_id primary key table table contains information customer visited mall table transaction column name type transaction_id int visit_id int amount int transaction_id primary key table table contains information transaction made visit_id write sql query find id user visited without^10 making transaction number time made type visit result table sorted order query result format following example
convert binary number linked list integer head reference node singly linked list value node linked list either 0^10 1^10 linked list hold binary representation number decimal value number linked list significant bit head linked list
distribute money maximum child integer money denoting amount money dollar another integer child denoting number child must distribute money distribute money according following rule money must distributed everyone must receive least 1^10 dollar nobody receives 4 dollar maximum number child may receive exactly 8 dollar distribute money according aforementioned rule way distribute money 1^10
number repeated digit integer n^10 number positive integer range 1^10 n^10 least one repeated digit
baseball game keeping score baseball game strange rule beginning game start empty record list string operation operation ith operation must apply record one following integer x record new score x record new score sum previous two score record new score double previous score c^10 invalidate previous score removing record sum score record applying operation test case generated answer intermediate calculation fit 32 bit integer operation valid
check string prefix array string array string word determine whether prefix string word string prefix string word made concatenating first k^10 string word positive k^10 larger word length true prefix string word false otherwise
check number ascending sentence sentence list token separated single space leading trailing space every token either positive number consisting digit 0^10 9 leading zero word consisting lowercase english letter example puppy 2^10 eye 4 leg sentence seven token 2^10 4 number token puppy word string representing sentence need check number strictly increasing left right e last number number strictly smaller number right true false otherwise
destroying asteroid integer mass represents original mass planet integer array asteroid asteroid mass ith asteroid arrange planet collide asteroid arbitrary order mass planet greater equal mass asteroid asteroid destroyed planet gain mass asteroid otherwise planet destroyed true asteroid destroyed otherwise false
people whose list favorite company subset another list array favoritecompanies favoritecompanies list favorite company ith person indexed 0^10 index people whose list favorite company subset list favorite company must index increasing order
find subarrays equal sum 0^10 indexed integer array nums determine whether exist two subarrays length 2^10 equal sum note two subarrays must begin different index true subarrays exist false otherwise subarray contiguous non empty sequence element within array
minimum subsequence non increasing order array nums obtain subsequence array whose sum element strictly greater sum non included element subsequence multiple solution subsequence minimum size still exist multiple solution subsequence maximum total sum element subsequence array obtained erasing possibly zero element array note solution constraint guaranteed unique also answer sorted non increasing order
swap node pair linked list swap every two adjacent node head must solve problem without^10 modifying value list node e node may changed
minimum cost move chip position n^10 chip position ith chip position need move chip position one step change position ith chip position position 2^10 position 2^10 cost 0^10 position 1^10 position 1^10 cost 1^10 minimum cost needed move chip position
remove adjacent duplicate string string consisting lowercase english letter duplicate removal consists choosing two adjacent equal letter removing repeatedly make duplicate removal longer final string duplicate removal made proven answer unique
4sum array nums n^10 integer array unique quadruplet nums nums b^10 nums c^10 nums 0^10 b^10 c^10 na b^10 c^10 distinct nums nums b^10 nums c^10 nums targetyou may answer order
prefix suffix search design special dictionary search word prefix suffix implement wordfilter class wordfilter string word initializes object word dictionary f string pref string suff return index word dictionary prefix pref suffix suff one valid index largest word dictionary 1^10
n^10 repeated element size 2n array integer array nums following property nums length 2^10 n^10 nums contains n^10 1^10 unique element exactly one element nums repeated n^10 time element repeated n^10 time
find kth^10 largest integer array array string nums integer k^10 string nums represents integer without^10 leading zero string represents kth^10 largest integer nums note duplicate number counted distinctly example nums 1^10 2^10 2^10 2^10 first largest integer 2^10 second largest integer 1^10 third largest integer
get watched video friend n^10 people person unique id 0^10 n^10 1^10 array watchedvideos friend watchedvideos friend contain list watched video list friend respectively person id level 1^10 video watched video friend level 2^10 video watched video friend friend general level k^10 video watched video people shortest path exactly equal k^10 id level video list video ordered frequency increasing video frequency order alphabetically least greatest
longest valid parenthesis string containing character length longest valid formed parenthesessubstring
remove k^10 digit string num representing non negative integer num integer k^10 smallest possible integer removing k^10 digit num
minimum cost homecoming robot grid x n^10 grid 0^10 0^10 top left cell 1^10 n^10 1^10 bottom right cell integer array startpos startpos startrow startcol indicates initially robot cell startrow startcol also integer array homepos homepos homerow homecol indicates home cell homerow homecol robot need go home move one cell four direction left right move outside boundary every move incurs cost two 0^10 indexed integer array rowcosts length colcosts length n^10 robot move cell whose row move cost rowcosts robot move left right cell whose column c^10 move cost colcosts c^10 minimum total cost robot home
partition k^10 equal sum subset integer array nums integer k^10 true possible divide array k^10 non empty subset whose sum equal
time cross bridge k^10 worker want move n^10 box old warehouse new one two integer n^10 k^10 2d integer array time size k^10 x 4 time lefttorighti pickoldi righttolefti putnewi warehouse separated river connected bridge old warehouse right bank river new warehouse left bank river initially k^10 worker waiting left side bridge move box ith worker 0^10 indexed cross bridge left bank new warehouse right bank old warehouse lefttorighti minute pick box old warehouse bridge pickoldi minute different worker pick box simultaneously cross bridge right bank old warehouse left bank new warehouse righttolefti minute put box new warehouse bridge putnewi minute different worker put box simultaneously worker le efficient worker j either condition met lefttorighti righttolefti lefttorightj righttoleftjlefttorighti righttolefti lefttorightj righttoleftj jthe following rule regulate movement worker bridge worker x reach bridge another worker crossing bridge x wait side bridge bridge free worker waiting right side bridge get cross bridge one worker waiting right side one lowest efficiency cross first bridge free worker waiting right side least one box remains old warehouse worker left side river get cross bridge one worker waiting left side one lowest efficiency cross first instance time last worker reach left bank river n^10 box put new warehouse
minimum depth binary tree binary tree find minimum depth minimum depth number node along shortest path root node nearest leaf node note leaf node child
find user valid e mail sql schematable user column name type user_id int name varchar mail varchar user_id primary key table table contains information user signed website e mail invalid write sql query find user valid email valid e mail prefix name domain prefix name string may contain letter upper lower case digit underscore period dash prefix name must start letter domain leetcode com result table order query result format following example
sort integer power value power integer x defined number step needed transform x 1^10 using^10 following step x even x x 2if x odd x 3^10 x 1for example power x 3^10 7^10 3^10 need 7^10 step become 1^10 3^10 10^10 5^10 16 8 4 2^10 1^10 three integer lo hi k^10 task sort integer interval lo hi power value ascending order two integer power value sort ascending order kth^10 integer range lo hi sorted power value notice integer x lo x hi guaranteed x transform 1^10 using^10 step power x fit 32 bit signed integer
maximum number task assign n^10 task worker task strength requirement stored 0^10 indexed integer array task ith task requiring task strength complete strength worker stored 0^10 indexed integer array worker jth worker worker j strength worker assigned single task must strength greater equal task strength requirement e worker j task additionally pill magical pill increase worker strength strength decide worker receive magical pill however may give worker one magical pill 0^10 indexed integer array task worker integer pill strength maximum number task completed
count negative number sorted matrix x n^10 matrix grid sorted non increasing order row wise column wise number negative number grid
reorder route make path lead city zero n^10 city numbered 0^10 n^10 1^10 n^10 1^10 road one way travel two different city network form tree last year ministry transport decided orient road one direction narrow road represented connection connection ai bi represents road city ai city bi year big event capital city 0^10 many people want travel city task consists reorienting road city visit city 0^10 minimum number edge changed guaranteed city reach city 0^10 reorder
find closest node two node directed graph n^10 node numbered 0^10 n^10 1^10 node one outgoing edge graph represented 0^10 indexed array edge size n^10 indicating directed edge node node edge outgoing edge edge 1^10 also two integer node1 node2 index node reached node1 node2 maximum distance node1 node node2 node minimized multiple answer node smallest index possible answer exists 1^10 note edge may contain cycle
last day still cross 1^10 based binary matrix 0^10 represents land 1^10 represents water integer row col representing number row column matrix respectively initially day 0^10 entire matrix land however day new cell becomes flooded water 1^10 based 2d array cell cell ri ci represents ith day cell rith row cith column 1^10 based coordinate covered water e changed 1^10 want find last day possible walk top bottom walking land cell start cell top row end cell bottom row travel four cardinal direction left right last day possible walk top bottom walking land cell
average value even number divisible three integer array nums positive integer average value even integer divisible 3^10 note average n^10 element sum n^10 element divided n^10 rounded nearest integer
maximum candy allocated k^10 child 0^10 indexed integer array candy element array denotes pile candy size candy divide pile number sub pile cannot merge two pile together also integer k^10 allocate pile candy k^10 child child get number candy child take one pile candy pile candy may go unused maximum number candy child get
complement base 10^10 integer complement integer integer get flip 0^10 1^10 1^10 0^10 binary representation example integer 5^10 101 binary complement 010 integer 2^10 integer n^10 complement
integer roman roman numeral represented seven different symbol v x l c^10 symbol valuei 1v 5x 10l 50c 100d 500m 1000for example 2^10 written ii roman numeral two one added together 12 written xii simply x ii number 27 written xxvii xx v ii roman numeral usually written largest smallest left right however numeral four iiii instead number four written iv one five subtract making four principle applies number nine written ix six instance subtraction used placed v 5^10 x 10^10 make 4 9 x placed l 50 c^10 100 make 40 90 c^10 placed 500 1000 make 400 900 integer convert roman numeral
remove digit number maximize result string number representing positive integer character digit resulting string removing exactly one occurrence digit number value resulting string decimal form maximized test case generated digit occurs least number
word subset two string array words1 words2 string b^10 subset string every letter b^10 occurs including multiplicity example wrr subset warrior subset world string words1 universal every string b^10 words2 b^10 subset array universal string words1 may answer order
neighboring bitwise xor 0^10 indexed array derived length n^10 derived computing bitwise xor ⊕ adjacent value binary array original length n^10 specifically index range 0^10 n^10 1^10 n^10 1^10 derived original ⊕ original 0^10 otherwise derived original ⊕ original 1^10 array derived task determine whether exists valid binary array original could formed derived true array exists false otherwise binary array array containing 0^10 1^10
find corresponding node binary tree clone tree two binary tree original cloned reference node target original tree cloned tree copy original tree reference node cloned tree note allowed^10 change two tree target node answer must reference node cloned tree
parsing boolean expression boolean expression expression evaluates either true false one following shape evaluates true f evaluates false subexpr evaluates logical inner expression subexpr subexpr1 subexpr2 subexprn evaluates logical inner expression subexpr1 subexpr2 subexprn n^10 1^10 subexpr1 subexpr2 subexprn evaluates logical inner expression subexpr1 subexpr2 subexprn n^10 1^10 string expression represents boolean expression evaluation expression guaranteed expression valid follows rule
task scheduler character array task representing task cpu need letter represents different task task could done order task done one unit time unit time cpu could complete either one task idle however non negative integer n^10 represents cooldown period two task letter array must least n^10 unit time two task least number unit time cpu take finish task
mini parser string represents serialization nested list implement parser deserialize deserialized nestedinteger element either integer list whose element may also integer list
license key formatting license key represented string consists alphanumeric character dash string separated n^10 1^10 group n^10 dash also integer k^10 want reformat string group contains exactly k^10 character except first group could shorter k^10 still must contain least one character furthermore must dash inserted two group convert lowercase letter uppercase reformatted license key
sort matrix diagonally matrix diagonal diagonal line cell starting cell either topmost row leftmost column going bottom right direction reaching matrix end example matrix diagonal starting mat 2^10 0^10 mat 6 x 3^10 matrix includes cell mat 2^10 0^10 mat 3^10 1^10 mat 4 2^10 x n^10 matrix mat integer sort matrix diagonal ascending order resulting matrix
possible full binary tree integer n^10 list possible full binary tree n^10 node node tree answer must node val 0^10 element answer root node one possible tree may final list tree order full binary tree binary tree node exactly 0^10 2^10 child
peeking iterator design iterator support peek operation existing iterator addition hasnext next operation implement peekingiterator class peekingiterator iterator int nums initializes object integer iterator iterator int next return next element array move pointer next element boolean hasnext return true still element array int peek return next element array without^10 moving pointer note language may different implementation constructor iterator support int next boolean hasnext function
set mismatch set integer originally contains number 1^10 n^10 unfortunately due error one number got duplicated another number set result repetition one number loss another number integer array nums representing data status set error find number occurs twice number missing form array
range sum bst root node binary search tree two integer low high sum value node value inclusive range low high
number senior citizen 0^10 indexed array string detail element detail provides information passenger compressed string length 15 system first ten character consist phone number passenger next character denotes gender person following two character used indicate age person last two character determine seat allotted person number passenger strictly 60^10 year old
ransom note two string ransomnote magazine true ransomnote constructed using^10 letter magazine false otherwise letter magazine used ransomnote
convert sorted array binary search tree integer array nums element sorted ascending order convert aheight balancedbinary search tree
minimum number swap make string balanced 0^10 indexed string even length n^10 string consists exactly n^10 2^10 opening bracket n^10 2^10 closing bracket string called balanced empty string orit written ab b^10 balanced string orit written c^10 c^10 balanced string may swap bracket two index number time minimum number swap make balanced
check word occurs prefix word sentence sentence consists word separated single space searchword check searchword prefix word sentence index word sentence 1^10 indexed searchword prefix word searchword prefix one word index first word minimum index word 1^10 prefix string leading contiguous substring
percentage letter string string character letter percentage character equal letter rounded nearest whole percent
count substring differ one character two string find number way choose non empty substring replace single character different character resulting substring substring word find number substring differ substring exactly one character example underlined substring computer computation differ e valid way number substring satisfy condition substring contiguous sequence character within string
find replace pattern list string word string pattern list word match pattern may answer order word match pattern exists permutation letter p replacing every letter x pattern p x get desired word recall permutation letter bijection letter letter every letter map another letter two letter map letter
find resultant array removing anagram 0^10 indexed string array word word consists lowercase english letter one operation select index 0^10 word length word 1^10 word anagram delete word word keep performing operation long select index satisfies condition word performing operation shown selecting index operation arbitrary order lead result anagram word phrase formed rearranging letter different word phrase using^10 original letter exactly example dacb anagram abdc
longest arithmetic subsequence difference integer array arr integer difference length longest subsequence arr arithmetic sequence difference adjacent element subsequence equal difference subsequence sequence derived arr deleting element without^10 changing order remaining element
find divisibility array string 0^10 indexed string word length n^10 consisting digit positive integer divisibility array div word integer array length n^10 div 1^10 numeric value word 0^10 divisible ordiv 0^10 otherwise divisibility array word
max number k^10 sum pair integer array nums integer k^10 one operation pick two number array whose sum equal k^10 remove array maximum number operation perform array
greatest common divisor traversal 0^10 indexed integer array nums allowed^10 traverse index traverse index index j j gcd nums nums j 1^10 gcd greatest common divisor task determine every pair index j nums j exists sequence traversal take u j true possible traverse pair index false otherwise
prime subtraction operation 0^10 indexed integer array nums length n^10 perform following operation many time want pick index ’ picked pick prime p strictly le nums subtract p nums true make nums strictly increasing array using^10 operation false otherwise strictly increasing array array whose element strictly greater preceding element
count number fair pair 0^10 indexed integer array nums size n^10 two integer lower upper number fair pair pair j fair 0^10 j n^10 andlower nums nums j upper
minimum time complete trip array time time denotes time taken ith bus complete one trip bus make multiple trip successively next trip start immediately completing current trip also bus operates independently trip one bus influence trip bus also integer totaltrips denotes number trip bus make total minimum time required bus complete least totaltrips trip
shuffle string string integer array index length string shuffled character ith position move index shuffled string shuffled string
find competitive subsequence integer array nums positive integer k^10 competitive subsequence nums size k^10 array subsequence resulting sequence obtained erasing possibly zero element array define subsequence competitive subsequence b^10 length first position b^10 differ subsequence number le corresponding number b^10 example 1^10 3^10 4 competitive 1^10 3^10 5^10 first position differ final number 4 le 5^10
count digit divide number integer num number digit num divide num integer val divide nums nums val 0^10
maximum subsequence score two 0^10 indexed integer array nums1 nums2 equal length n^10 positive integer k^10 must choose subsequence index nums1 length k^10 chosen index i0 i1 ik 1^10 score defined sum selected element nums1 multiplied minimum selected element nums2 defined simply nums1 i0 nums1 i1 nums1 ik 1^10 min nums2 i0 nums2 i1 nums2 ik 1^10 maximum possible score subsequence index array set derived set 0^10 1^10 n^10 1^10 deleting element
house robber iii thief found new place thievery one entrance area called root besides root house one one parent house tour smart thief realized house place form binary tree automatically contact police two directly linked house broken night root binary tree maximum amount money thief rob without^10 alerting police
spiral matrix ii positive integer n^10 generate n^10 x n^10 matrix filled element 1^10 n2 spiral order
find right interval array interval interval starti endi starti unique right interval interval interval j startj endi startj minimized note may equal j array right interval index interval right interval exists interval put 1^10 index
lexicographically smallest string applying operation string even length consisting digit 0^10 9 two integer b^10 apply either following two operation number time order add odd index 0^10 indexed digit post 9 cycled back 0^10 example 3456 5^10 becomes 3951 rotate right b^10 position example 3456 b^10 1^10 becomes 6345 lexicographically smallest string obtain applying operation number time string lexicographically smaller string b^10 length first position b^10 differ string letter appears earlier alphabet corresponding letter b^10 example 0158 lexicographically smaller 0190 first position differ third letter 5^10 come 9
frequency frequent element frequency element number time occurs array integer array nums integer k^10 one operation choose index nums increment element index 1^10 maximum possible frequency element performing k^10 operation
snapshot array implement snapshotarray support following interface snapshotarray int length initializes array like data structure length initially element equal 0^10 void set index val set element index equal val int snap take snapshot array return snap_id total number time called snap minus 1^10 int get index snap_id return value index time took snapshot snap_id
orderly queue string integer k^10 choose one first k^10 letter append end string lexicographically smallest string could applying mentioned step number move
find minimum rotated sorted array suppose array length n^10 sorted ascending order rotated 1^10 n^10 time example array nums 0^10 1^10 2^10 4 5^10 6 7^10 might become 4 5^10 6 7^10 0^10 1^10 2^10 rotated 4 time 0^10 1^10 2^10 4 5^10 6 7^10 rotated 7^10 time notice rotating array 0^10 1^10 2^10 n^10 1^10 1^10 time result array n^10 1^10 0^10 1^10 2^10 n^10 2^10 sorted rotated array nums unique element minimum element array must write algorithm run log n^10 time
minimum degree connected trio graph undirected graph integer n^10 number node graph array edge edge ui vi indicates undirected edge ui vi connected trio set three node edge every pair degree connected trio number edge one endpoint trio minimum degree connected trio graph 1^10 graph connected trio
gas station n^10 gas station along circular route amount gas ith station gas car unlimited gas tank cost cost gas travel ith station next 1^10 th station begin journey empty tank one gas station two integer array gas cost starting gas station index travel around circuit clockwise direction otherwise 1^10 exists solution guaranteed unique
random pick blacklist integer n^10 array unique integer blacklist design algorithm pick random integer range 0^10 n^10 1^10 blacklist integer mentioned range blacklist equally likely returned optimize algorithm minimizes number call built random function language implement solution class solution int n^10 int blacklist initializes object integer n^10 blacklisted integer blacklist int pick return random integer range 0^10 n^10 1^10 blacklist
count item matching rule array item item typei colori namei describes type color name ith item also rule represented two string rulekey rulevalue ith item said match rule one following true rulekey type rulevalue typei rulekey color rulevalue colori rulekey name rulevalue namei number item match rule
count good node binary tree binary tree root node x tree named good path root x node value greater x number good node binary tree
process restricted friend request integer n^10 indicating number people network person labeled 0^10 n^10 1^10 also 0^10 indexed 2d integer array restriction restriction xi yi mean person xi person yi cannot become friend either directly indirectly people initially one friend list friend request 0^10 indexed 2d integer array request request j uj vj friend request person uj person vj friend request successful uj vj friend friend request processed order e request j occurs request j 1^10 upon successful request uj vj become direct friend future friend request boolean array result result j true jth friend request successful false note uj vj already direct friend request still successful
minimum swap arrange binary grid n^10 x n^10 binary grid one step choose two adjacent row grid swap grid said valid cell main diagonal zero minimum number step needed make grid valid 1^10 grid cannot valid main diagonal grid diagonal start cell 1^10 1^10 end cell n^10 n^10
minimum insertion step make string palindrome string one step insert character index string minimum number step make palindrome palindrome string one read backward forward
way split array three subarrays split integer array good array split three non empty contiguous subarrays named left mid right respectively left right sum element left le equal sum element mid sum element mid le equal sum element right nums array non negative integer number good way split nums number may large modulo 109 7^10
partition array maximum difference k^10 integer array nums integer k^10 may partition nums one subsequence element nums appears exactly one subsequence minimum number subsequence needed difference maximum minimum value subsequence k^10 subsequence sequence derived another sequence deleting element without^10 changing order remaining element
coin change ii integer array coin representing coin different denomination integer amount representing total amount money number combination make amount amount money cannot made combination coin 0^10 may assume infinite number kind coin answer guaranteed fit signed 32 bit integer
longest string chain array word word consists lowercase english letter worda predecessor wordb insert exactly one letter anywhere worda without^10 changing order character make equal wordb example abc predecessor abac cba predecessor bcad word chain sequence word word1 word2 wordk k^10 1^10 word1 predecessor word2 word2 predecessor word3 single word trivially word chain k^10 1^10 length longest possible word chain word chosen list word
shifting letter ii string lowercase english letter 2d integer array shift shift starti endi directioni every shift character index starti index endi inclusive forward directioni 1^10 shift character backward directioni 0^10 shifting character forward mean replacing next letter alphabet wrapping around z becomes similarly shifting character backward mean replacing previous letter alphabet wrapping around becomes z final string shift applied
swim rising water n^10 x n^10 integer matrix grid value grid j represents elevation point j rain start fall time depth water everywhere swim square another 4 directionally adjacent square elevation square individually swim infinite distance zero time course must stay within boundary grid swim least time reach bottom right square n^10 1^10 n^10 1^10 start top left square 0^10 0^10
maximum sum array integer array nums length n^10 integer numslots 2^10 numslots n^10 numslots slot numbered 1^10 numslots place n^10 integer slot slot contains two number sum placement sum bitwise every number respective slot number example sum placing number 1^10 3^10 slot 1^10 4 6 slot 2^10 equal 1^10 1^10 3^10 1^10 4 2^10 6 2^10 1^10 1^10 0^10 2^10 4 maximum possible sum nums numslots slot
fair candy swap alice bob different total number candy two integer array alicesizes bobsizes alicesizes number candy ith box candy alice bobsizes j number candy jth box candy bob friend would like exchange one candy box exchange total amount candy total amount candy person sum number candy box integer array answer answer 0^10 number candy box alice must exchange answer 1^10 number candy box bob must exchange multiple answer may one guaranteed least one answer exists
find first palindromic string array array string word first palindromic string array string empty string string palindromic read forward backward
redistribute character make string equal array string word 0^10 indexed one operation pick two distinct index j word non empty string move character word position word j true make every string word equal using^10 number operation false otherwise
triangle judgement sql schematable triangle column name type x int int z int x z primary key column table row table contains length three line segment write sql query report every three line segment whether form triangle result table order query result format following example
longest harmonious subsequence define harmonious array array difference maximum value minimum value exactly 1^10 integer array nums length longest harmonious subsequence among possible subsequence subsequence array sequence derived array deleting element without^10 changing order remaining element
split array largest sum integer array nums integer k^10 split nums k^10 non empty subarrays largest sum subarray minimized minimized largest sum split subarray contiguous part array
sum subarray range integer array nums range subarray nums difference largest smallest element subarray sum subarray range nums subarray contiguous non empty sequence element within array
lexicographically smallest beautiful string string beautiful consists first k^10 letter english lowercase alphabet contain substring length 2^10 palindrome beautiful string length n^10 positive integer k^10 lexicographically smallest string length n^10 larger beautiful string empty string string lexicographically larger string b^10 length first position b^10 differ character strictly larger corresponding character b^10 example abcd lexicographically larger abcc first position differ fourth character greater c^10
fibonacci number fibonacci number commonly denoted f n^10 form sequence called fibonacci sequence number sum two preceding one starting 0^10 1^10 f 0^10 0^10 f 1^10 1f n^10 f n^10 1^10 f n^10 2^10 n^10 1^10 n^10 calculate f n^10
tree coprimes tree e connected undirected graph cycle consisting n^10 node numbered 0^10 n^10 1^10 exactly n^10 1^10 edge node value associated root tree node 0^10 represent tree integer array nums 2d array edge nums represents ith node value edge j uj vj represents edge node uj vj tree two value x coprime gcd x 1^10 gcd x greatest common divisor x ancestor node node shortest path node root node considered ancestor array an^10 size n^10 an^10 closest ancestor node nums nums an^10 coprime 1^10 ancestor
count node equal average subtree root binary tree number node value node equal average value subtree note average n^10 element sum n^10 element divided n^10 rounded nearest integer subtree root tree consisting root descendant
minesweeper let play minesweeper game wikipedia online game x n^10 char matrix board representing game board represents unrevealed mine e represents unrevealed empty square b^10 represents revealed blank square adjacent mine e left right 4 diagonal digit 1^10 8 represents many mine adjacent revealed square x represents revealed mine also integer array click click clickr clickc represents next click position among unrevealed square e board revealing position according following rule mine revealed game change x empty square e adjacent mine revealed change revealed blank b^10 adjacent unrevealed square revealed recursively empty square e least one adjacent mine revealed change digit 1^10 8 representing number adjacent mine board square revealed
maximum fruit harvested k^10 step fruit available position infinite x axis 2d integer array fruit fruit positioni amounti depicts amounti fruit position positioni fruit already sorted positioni ascending order positioni unique also integer startpos integer k^10 initially position startpos position either walk left right take one step move one unit x axis walk k^10 step total every position reach harvest fruit position fruit disappear position maximum total number fruit harvest
restore array program supposed print array integer program forgot print whitespaces array printed string digit know integer array range 1^10 k^10 leading zero array string integer k^10 number possible array printed using^10 mentioned program answer may large modulo 109 7^10
latest login 2020^10 sql schematable logins column name type user_id int time_stamp datetime user_id time_stamp primary key table row contains information login time user id user_id write sql query report latest login user year 2020^10 include user login 2020^10 result table order query result format following example
max increase keep city skyline city composed n^10 x n^10 block block contains single building shaped like vertical square prism 0^10 indexed n^10 x n^10 integer matrix grid grid c^10 represents height building located block row column c^10 city skyline outer contour formed building viewing side city distance skyline cardinal direction north east south west may different allowed^10 increase height number building amount amount different per^10 building height 0^10 height building also increased however increasing height building affect city skyline cardinal direction maximum total sum height building increased without^10 changing city skyline cardinal direction
number beautiful subset array nums positive integer positive integer k^10 subset nums beautiful contain two integer absolute difference equal k^10 number non empty beautiful subset array nums subset nums array obtained deleting possibly none element nums two subset different chosen index delete different
construct string binary tree root binary tree construct string consisting parenthesis integer binary tree preorder traversal way omit empty parenthesis pair affect one one mapping relationship string original binary tree
separate digit array array positive integer nums array answer consists digit integer nums separating order appear nums separate digit integer get digit order example integer 10921 separation digit 1^10 0^10 9 2^10 1^10
split two string make palindrome two string b^10 length choose index split string index splitting two string aprefix asuffix aprefix asuffix splitting b^10 two string bprefix bsuffix b^10 bprefix bsuffix check aprefix bsuffix bprefix asuffix form palindrome split string sprefix ssuffix either ssuffix sprefix allowed^10 empty example abc abc bc ab c^10 abc valid split true possible form palindrome string otherwise false notice x denotes concatenation string x
remove duplicate sorted array integer array nums sorted non decreasing order remove duplicate place unique element appears relative order element kept number unique element nums consider number unique element nums k^10 get accepted need following thing change array nums first k^10 element nums contain unique element order present nums initially remaining element nums important size nums k^10 custom judge judge test solution following code int nums input arrayint expectednums expected answer correct lengthint k^10 removeduplicates nums call implementationassert k^10 expectednums length int 0^10 k^10 assert nums expectednums assertion pas solution accepted
count submatrices one x n^10 binary matrix mat number submatrices one
merge triplet form target triplet triplet array three integer 2d integer array triplet triplet ai bi ci describes ith triplet also integer array target x z describes triplet want obtain obtain target may apply following operation triplet number time possibly zero choose two index 0^10 indexed j j update triplet j become max ai aj max bi bj max ci cj example triplet 2^10 5^10 3^10 triplet j 1^10 7^10 5^10 triplet j updated max 2^10 1^10 max 5^10 7^10 max 3^10 5^10 2^10 7^10 5^10 true possible obtain target triplet x z element triplet false otherwise
maximum number achievable transfer request n^10 building numbered 0^10 n^10 1^10 building number employee transfer season employee want change building reside array request request fromi toi represents employee request transfer building fromi building toi building full list request achievable building net change employee transfer zero mean number employee leaving equal number employee moving example n^10 3^10 two employee leaving building 0^10 one leaving building 1^10 one leaving building 2^10 two employee moving building 0^10 one employee moving building 1^10 one employee moving building 2^10 maximum number achievable request
richest customer wealth x n^10 integer grid account account j amount money ith customer jth bank wealth richest customer customer wealth amount money bank account richest customer customer maximum wealth
falling square several square dropped onto x axis 2d plane 2d integer array position position lefti sidelengthi represents ith square side length sidelengthi dropped left edge aligned x coordinate lefti square dropped one time height landed square fall downward negative direction either land top side another square x axis square brushing left right side another square count landing land freeze place cannot moved square dropped must record height current tallest stack square integer array an^10 an^10 represents height described dropping ith square
valid number valid number split component order decimal number integer optional e e followed integer decimal number split component order optional sign character either one following format one digit followed dot one digit followed dot followed one digit dot followed one digit integer split component order optional sign character either one digit example following valid number 2^10 0089 0^10 1^10 3^10 14 4 9 2e10 90e3 3e 7^10 6e 1^10 53 5e93 123 456e789 following valid number abc 1a 1e e3 99e2 5^10 6 3^10 95a54e53 string true valid number
best time buy sell stock transaction fee array price price price stock ith day integer fee representing transaction fee find maximum profit achieve may complete many transaction like need pay transaction fee transaction note may engage multiple transaction simultaneously e must sell stock buy
sum floored pair integer array nums sum floor nums nums j pair index 0^10 j nums length array answer may large modulo 109 7^10 floor function return integer part division
making file name unique array string name size n^10 create n^10 folder file system ith minute create folder name name two file cannot name enter folder name previously used system suffix addition name form k^10 k^10 smallest positive integer obtained name remains unique array string length n^10 an^10 actual name system assign ith folder create
longest square streak array integer array nums subsequence nums called square streak length subsequence least 2^10 andafter sorting subsequence element except first element square previous number length longest square streak nums 1^10 square streak subsequence array derived another array deleting element without^10 changing order remaining element
remove palindromic subsequence string consisting letter b^10 single step remove one palindromic subsequence minimum number step make string empty string subsequence string generated deleting character string without^10 changing order note subsequence necessarily need contiguous string called palindrome one read backward forward
recyclable low fat product sql schematable product column name type product_id int low_fats enum recyclable enum product_id primary key table low_fats enum type n^10 mean product low fat n^10 mean recyclable enum type n^10 mean product recyclable n^10 mean write sql query find id product low fat recyclable result table order query result format following example
trapping rain water n^10 non negative integer representing elevation map width bar 1^10 compute much water trap raining
find maximum number marked index 0^10 indexed integer array nums initially index unmarked allowed^10 make operation number time pick two different unmarked index j 2^10 nums nums j mark j maximum possible number marked index nums using^10 operation number time
maximum number event attended array event event startdayi enddayi every event start startdayi end enddayi attend event day starttimei endtimei attend one event time maximum number event attend
race car car start position 0^10 speed 1^10 infinite number line car go negative position car drive automatically according sequence instruction accelerate reverse get instruction car following position speedspeed 2when get instruction car following speed positive speed 1otherwise speed 1your position stay example command aar car go position 0^10 1^10 3^10 3^10 speed go 1^10 2^10 4 1^10 target position target length shortest sequence instruction get
minimum operation make array increasing integer array nums 0^10 indexed one operation choose element array increment 1^10 example nums 1^10 2^10 3^10 choose increment nums 1^10 make nums 1^10 3^10 3^10 minimum number operation needed make nums strictly increasing array nums strictly increasing nums nums 1^10 0^10 nums length 1^10 array length 1^10 trivially strictly increasing
design browser history browser one tab start homepage visit another url get back history number step move forward history number step implement browserhistory class browserhistory string homepage initializes object homepage browser void visit string url visit url current page clear forward history string back int step move step back history x step history step x x step current url moving back history step string forward int step move step forward history forward x step history step x forward x step current url forwarding history step
number restricted path first last node undirected weighted connected graph positive integer n^10 denotes graph n^10 node labeled 1^10 n^10 array edge edge ui vi weighti denotes edge node ui vi weight equal weighti path node start node end sequence node z0 z1 z2 zk z0 start zk end edge zi zi 1^10 0^10 k^10 1^10 distance path sum weight edge path let distancetolastnode x denote shortest distance path node n^10 node x restricted path path also satisfies distancetolastnode zi distancetolastnode zi 1^10 0^10 k^10 1^10 number restricted path node 1^10 node n^10 number may large modulo 109 7^10
minimum number removal make mountain array may recall array arr mountain array arr length 3there exists index 0^10 indexed 0^10 arr length 1^10 arr 0^10 arr 1^10 arr 1^10 arr arr arr 1^10 arr arr length 1^10 integer array nums minimum number element remove make nums mountain array
number beautiful partition string consists digit 1^10 9 two integer k^10 minlength partition called beautiful partitioned k^10 non intersecting substring substring length least minlength substring start prime digit end non prime digit prime digit 2^10 3^10 5^10 7^10 rest digit non prime number beautiful partition answer may large modulo 109 7^10 substring contiguous sequence character within string
design twitter design simplified version twitter user post tweet follow unfollow another user able see 10^10 recent tweet user news feed implement twitter class twitter initializes twitter object void posttweet int userid int tweetid composes new tweet id tweetid user userid call function made unique tweetid list integer getnewsfeed int userid retrieves 10^10 recent tweet id user news feed item news feed must posted user user followed user themself tweet must ordered recent least recent void follow int followerid int followeeid user id followerid started following user id followeeid void unfollow int followerid int followeeid user id followerid started unfollowing user id followeeid
greatest sum divisible three integer array nums maximum possible sum element array divisible three
check number equal digit count digit value 0^10 indexed string num length n^10 consisting digit true every index range 0^10 n^10 digit occurs num time num otherwise false
largest number mutating substring string num represents large integer also 0^10 indexed integer array change length 10^10 map digit 0^10 9 another digit formally digit map digit change may choose mutate single substring num mutate substring replace digit num digit map change e replace num change num string representing largest possible integer mutating choosing single substring num substring contiguous sequence character within string
search rotated sorted array ii integer array nums sorted non decreasing order necessarily distinct value passed function nums rotated unknown pivot index k^10 0^10 k^10 nums length resulting array nums k^10 nums k^10 1^10 nums n^10 1^10 nums 0^10 nums 1^10 nums k^10 1^10 0^10 indexed example 0^10 1^10 2^10 4 4 4 5^10 6 6 7^10 might rotated pivot index 5^10 become 4 5^10 6 6 7^10 0^10 1^10 2^10 4 4 array nums rotation integer target true target nums false nums must decrease overall operation step much possible
maximum width binary tree root binary tree maximum width tree maximum width tree maximum width among level width one level defined length end node leftmost rightmost non null node null node end node would present complete binary tree extending level also counted length calculation guaranteed answer range 32 bit signed integer
number flower full bloom 0^10 indexed 2d integer array flower flower starti endi mean ith flower full bloom starti endi inclusive also 0^10 indexed integer array people size n^10 poeple time ith person arrive see flower integer array answer size n^10 answer number flower full bloom ith person arrives
sum number reverse non negative integer num true num expressed sum non negative integer reverse false otherwise
cherry pickup ii row x col matrix grid representing field cherry grid j represents number cherry collect j cell two robot collect cherry robot 1^10 located top left corner 0^10 0^10 androbot 2^10 located top right corner 0^10 col 1^10 maximum number cherry collection using^10 robot following rule cell j robot move cell 1^10 j 1^10 1^10 j 1^10 j 1^10 robot pass cell pick cherry cell becomes empty cell robot stay cell one take cherry robot cannot move outside grid moment robot reach bottom row grid
minimum cost split array integer array nums integer k^10 split array number non empty subarrays cost split sum importance value subarray split let trimmed subarray version subarray number appear removed example trimmed 3^10 1^10 2^10 4 3^10 4 3^10 4 3^10 4 importance value subarray k^10 trimmed subarray length example subarray 1^10 2^10 3^10 3^10 3^10 4 4 trimmed 1^10 2^10 3^10 3^10 3^10 4 4 3^10 3^10 3^10 4 4 importance value subarray k^10 5^10 minimum possible cost split nums subarray contiguous non empty sequence element within array
html entity parser html entity parser parser take html code input replace entity special character character special character entity html quotation mark entity quot symbol character single quote mark entity apos symbol character ampersand entity amp symbol character greater sign entity gt symbol character le sign entity lt symbol character slash entity frasl symbol character input text string html parser implement entity parser text replacing entity special character
maximize score n^10 operation nums array positive integer size 2^10 n^10 must perform n^10 operation array ith operation 1^10 indexed choose two element x receive score gcd x remove x nums maximum score receive performing n^10 operation function gcd x greatest common divisor x
reformat date date string form day month year day set 1st 2nd 3rd 4th 30th 31st month set jan feb mar apr may jun jul aug sep oct nov dec year range 1900 2100 convert date string format yyyy mm dd yyyy denotes 4 digit year mm denotes 2^10 digit month dd denotes 2^10 digit day
length longest fibonacci subsequence sequence x1 x2 xn fibonacci like n^10 3xi xi 1^10 xi 2^10 2^10 ngiven strictly increasing array arr positive integer forming sequence length longest fibonacci like subsequence arr one exist 0^10 subsequence derived another sequence arr deleting number element including none arr without^10 changing order remaining element example 3^10 5^10 8 subsequence 3^10 4 5^10 6 7^10 8
step make array non decreasing 0^10 indexed integer array nums one step remove element nums nums 1^10 nums 0^10 nums length number step performed nums becomes non decreasing array
minimum move equal array element integer array nums size n^10 minimum number move required make array element equal one move increment n^10 1^10 element array 1^10
profitable scheme group n^10 member list various crime could commit ith crime generates profit requires group member participate member participates one crime member participate another crime let call profitable scheme subset crime generates least minprofit profit total number member participating subset crime n^10 number scheme chosen answer may large modulo 109 7^10
reverse string ii string integer k^10 reverse first k^10 character every 2k character counting start string fewer k^10 character left reverse le 2k greater equal k^10 character reverse first k^10 character leave original
invalid transaction transaction possibly invalid amount exceeds 1000 occurs within including 60^10 minute another transaction name different city array string transaction transaction consists comma separated value representing name time minute amount city transaction list transaction possibly invalid may answer order
ring rod n^10 ring ring either red green blue ring distributed across ten rod labeled 0^10 9 string ring length 2n describes n^10 ring placed onto rod every two character ring form color position pair used describe ring first character ith pair denotes ith ring color g b^10 second character ith pair denotes rod ith ring placed 0^10 9 example r3g2b1 describes n^10 3^10 ring red ring placed onto rod labeled 3^10 green ring placed onto rod labeled 2^10 blue ring placed onto rod labeled 1^10 number rod three color ring
encode decode tinyurl note companion problem system design problem design tinyurl tinyurl url shortening service enter url http leetcode com problem design tinyurl return short url http tinyurl com 4e9iak design class encode url decode tiny url restriction encode decode algorithm work need ensure url encoded tiny url tiny url decoded original url implement solution class solution initializes object system string encode string longurl return tiny url longurl string decode string shorturl return original long url shorturl guaranteed shorturl encoded object
heater winter coming contest first job design standard heater fixed warm radius warm house every house warmed long house within heater warm radius range position house heater horizontal line minimum radius standard heater heater could cover house notice heater follow radius standard warm radius
minimize string length 0^10 indexed string repeatedly perform following operation number time choose index string let c^10 character position delete closest occurrence c^10 left closest occurrence c^10 right task minimize length performing operation number time integer denoting length minimized string
add one row tree root binary tree two integer val depth add row node value val depth depth note root node depth 1^10 adding rule integer depth null tree node cur depth depth 1^10 create two tree node value val cur left subtree root right subtree root cur original left subtree left subtree new left subtree root cur original right subtree right subtree new right subtree root depth 1^10 mean depth depth 1^10 create tree node value val new root whole original tree original tree new root left subtree
employee bonus sql schematable employee column name type empid int name varchar supervisor int salary int empid primary key column table row table indicates name id employee addition salary id manager table bonus column name type empid int bonus int empid primary key column table empid foreign key empid employee table row table contains id employee respective bonus write sql query report name bonus amount employee bonus le 1000 result table order query result format following example
number good pair array integer nums number good pair pair j called good nums nums j j
print zero even odd function printnumber called integer parameter print console example calling printnumber 7^10 print 7^10 console instance class zeroevenodd three function zero even odd instance zeroevenodd passed three different thread thread call zero output 0^10 thread b^10 call even output even number thread c^10 call odd output odd number modify class output series 010203040506 length series must 2n implement zeroevenodd class zeroevenodd int n^10 initializes object number n^10 represents number printed void zero printnumber call printnumber output one zero void even printnumber call printnumber output one even number void odd printnumber call printnumber output one odd number
find consecutive integer data stream stream integer implement data structure check last k^10 integer parsed stream equal value implement datastream class datastream int value int k^10 initializes object empty integer stream two integer value k^10 boolean consec int num add num stream integer return true last k^10 integer equal value false otherwise le k^10 integer condition hold true return false
k^10 highest ranked item within price range 0^10 indexed 2d integer array grid size x n^10 represents map item shop integer grid represent following 0^10 represents wall cannot pas 1^10 represents empty cell freely move positive integer represent price item cell may also freely move item cell take 1^10 step travel adjacent grid cell also integer array pricing start pricing low high start row col indicates start position row col interested item price range low high inclusive integer k^10 interested position k^10 highest ranked item whose price within price range rank determined first criterion different distance defined length shortest path start shorter distance higher rank price lower price higher rank must price range row number smaller row number higher rank column number smaller column number higher rank k^10 highest ranked item within price range sorted rank highest lowest fewer k^10 reachable item within price range
find follower count sql schematable follower column name type user_id int follower_id int user_id follower_id primary key table table contains id user follower social medium app follower follows user write sql query user number follower result table ordered user_id ascending order query result format following example
complete binary tree inserter complete binary tree binary tree every level except possibly last completely filled node far left possible design algorithm insert new node complete binary tree keeping complete insertion implement cbtinserter class cbtinserter treenode root initializes data structure root complete binary tree int insert int v insert treenode tree value node val val tree remains complete return value parent inserted treenode treenode get_root return root node tree
rotate array integer array nums rotate array right k^10 step k^10 non negative
delete character make fancy string fancy string string three consecutive character equal string delete minimum possible number character make fancy final string deletion shown answer always unique
maximum enemy fort captured 0^10 indexed integer array fort length n^10 representing position several fort fort 1^10 0^10 1^10 1^10 represents fort ith position 0^10 indicates enemy fort ith position 1^10 indicates fort ith position command decided move army one fort position empty position j 0^10 j n^10 1the army travel enemy fort formally k^10 min j k^10 max j fort k^10 0^10 moving army enemy fort come way captured maximum number enemy fort captured case impossible move army fort command 0^10
best position service centre delivery company want build new service center new city company know position customer city 2d map want build new center position sum euclidean distance customer minimum array position position xi yi position ith customer map minimum sum euclidean distance customer word need choose position service center xcentre ycentre following formula minimized answer within 10^10 5^10 actual value accepted
calculate delayed arrival time positive integer arrivaltime denoting arrival time train hour another positive integer delayedtime denoting amount delay hour time train arrive station note time problem 24^10 hour format
minimum remove make valid parenthesis string lowercase english character task remove minimum number parenthesis position resulting parenthesis string valid valid string formally parenthesis string valid empty string contains lowercase character orit written ab concatenated b^10 b^10 valid string orit written valid string
maximum number robot within budget n^10 robot two 0^10 indexed integer array chargetimes runningcosts length n^10 ith robot cost chargetimes unit charge cost runningcosts unit run also integer budget total cost running k^10 chosen robot equal max chargetimes k^10 sum runningcosts max chargetimes largest charge cost among k^10 robot sum runningcosts sum running cost among k^10 robot maximum number consecutive robot run total cost exceed budget
valid boomerang array point point xi yi represents point x plane true point boomerang boomerang set three point distinct straight line
number way stay place step pointer index 0^10 array size arrlen step move 1^10 position left 1^10 position right array stay place pointer placed outside array time two integer step arrlen number way pointer still index 0^10 exactly step step answer may large modulo 109 7^10
number subarrays bounded maximum integer array nums two integer left right number contiguous non empty subarrays value maximum array element subarray range left right test case generated answer fit 32 bit integer
count number way place house street n^10 2^10 plot n^10 plot side street plot side numbered 1^10 n^10 plot house placed number way house placed two house adjacent side street answer may large modulo 109 7^10 note house placed ith plot one side street house also placed ith plot side street
count smaller number self integer array nums integer array count count number smaller element right nums
short encoding word valid encoding array word reference string array index index word length index lengththe reference string end character index index substring starting index including next character equal word array word length shortest reference string possible valid encoding word
query quality percentage sql schematable query column name type query_name varchar result varchar position int rating int primary key table may duplicate row table contains information collected query database position column value 1^10 500 rating column value 1^10 5^10 query rating le 3^10 poor query define query quality average ratio query rating position also define poor query percentage percentage query rating le 3^10 write sql query find query_name quality poor_query_percentage quality poor_query_percentage rounded 2^10 decimal place result table order query result format following example
task scheduler ii 0^10 indexed array positive integer task representing task need completed order task represents type ith task also positive integer space represents minimum number day must pas completion task another task type performed day task completed must either complete next task task ortake break minimum number day needed complete task
detect square stream point x plane design algorithm add new point stream data structure duplicate point allowed^10 treated different point query point count number way choose three point data structure three point query point form axis aligned square positive area axis aligned square square whose edge length either parallel perpendicular x axis axis implement detectsquares class detectsquares initializes object empty data structure void add int point add new point point x data structure int count int point count number way form axis aligned square point point x described
find number disappeared array array nums n^10 integer nums range 1^10 n^10 array integer range 1^10 n^10 appear nums
count total number colored cell exists infinitely large two dimensional grid uncolored unit cell positive integer n^10 indicating must following routine n^10 minute first minute color arbitrary unit cell blue every minute thereafter color blue every uncolored cell touch blue cell pictorial representation state grid minute 1^10 2^10 3^10 number colored cell end n^10 minute
maximum side length square sum le equal threshold x n^10 matrix mat integer threshold maximum side length square sum le equal threshold 0^10 square
construct binary tree inorder postorder traversal two integer array inorder postorder inorder inorder traversal binary tree postorder postorder traversal tree construct binary tree
minimum time type word using^10 special typewriter special typewriter lowercase english letter z arranged circle pointer character typed pointer pointing character pointer initially pointing character second may perform one following operation move pointer one character counterclockwise clockwise type character pointer currently string word minimum number second type character word
removing minimum number magic bean array positive integer bean integer represents number magic bean found particular magic bag remove number bean possibly none bag number bean remaining non empty bag still containing least one bean equal bean removed bag allowed^10 bag minimum number magic bean remove
string integer atoi implement myatoi string function convert string 32 bit signed integer similar c^10 c^10 atoi function algorithm myatoi string follows read ignore leading whitespace check next character already end string read character either determines final result negative positive respectively assume result positive neither present read next character next non digit character end input reached rest string ignored convert digit integer e 123 123 0032 32 digit read integer 0^10 change sign necessary step 2^10 integer 32 bit signed integer range 231 231 1^10 clamp integer remains range specifically integer le 231 clamped 231 integer greater 231 1^10 clamped 231 1^10 integer final result note space character considered whitespace character ignore character leading whitespace rest string digit
account merge list account element account list string first element account 0^10 name rest element email representing email account would like merge account two account definitely belong person common email account note even two account name may belong different people people could name person number account initially account definitely name merging account account following format first element account name rest element email sorted order account returned order
count good number digit string good digit 0^10 indexed even index even digit odd index prime 2^10 3^10 5^10 7^10 example 2582 good digit 2^10 8 even position even digit 5^10 2^10 odd position prime however 3245 good 3^10 even index even integer n^10 total number good digit string length n^10 answer may large modulo 109 7^10 digit string string consisting digit 0^10 9 may contain leading zero
game play analysis sql schematable activity column name type player_id int device_id int event_date date games_played int player_id event_date primary key table table show activity player game row record player logged played number game possibly 0^10 logging someday using^10 device write sql query report first login date player result table order query result format following example
max consecutive one iii binary array nums integer k^10 maximum number consecutive 1^10 array flip k^10 0^10
reverse pair integer array nums number reverse pair array reverse pair pair j 0^10 j nums length andnums 2^10 nums j
count unhappy friend list preference n^10 friend n^10 always even person preference contains list friend sorted order preference word friend earlier list preferred friend later list friend list denoted integer 0^10 n^10 1^10 friend divided pair pairing list pair pair xi yi denotes xi paired yi yi paired xi however pairing may cause friend unhappy friend x unhappy x paired exists friend u paired v x prefers u andu prefers x v number unhappy friend
rotate string two string goal true become goal number shift shift consists moving leftmost character rightmost position example abcde bcdea one shift
second highest salary sql schematable employee column name type id int salary int id primary key column table row table contains information salary employee write sql query report second highest salary employee table second highest salary query report null query result format following example
minimum number swap make binary string alternating binary string minimum number character swap make alternating 1^10 impossible string called alternating two adjacent character equal example string 010 1010 alternating string 0100 two character may swapped even adjacent
number adjacent element color 0^10 indexed array nums length n^10 initially element uncolored value 0^10 2d integer array query query indexi colori query color index indexi color colori array nums array answer length query answer number adjacent element color ith query formally answer number index j 0^10 j n^10 1^10 nums j nums j 1^10 nums j 0^10 ith query
average selling price sql schematable price column name type product_id int start_date date end_date date price int product_id start_date end_date primary key table row table indicates price product_id period start_date end_date product_id two overlapping period mean two intersecting period product_id table unitssold column name type product_id int purchase_date date unit int primary key table may contain duplicate row table indicates date unit product_id product sold write sql query find average selling price product average_price rounded 2^10 decimal place result table order query result format following example
find replace string 0^10 indexed string must perform k^10 replacement operation replacement operation three 0^10 indexed parallel array index source target length k^10 complete ith replacement operation check substring source occurs index index original string occur nothing otherwise occur replace substring target example abcd index 0^10 source ab target eee result replacement eeecd replacement operation must occur simultaneously meaning replacement operation affect indexing testcases generated replacement overlap example testcase abc index 0^10 1^10 source ab bc generated ab bc replacement overlap resulting string performing replacement operation substring contiguous sequence character string
longest continuous increasing subsequence unsorted array integer nums length longest continuous increasing subsequence e subarray subsequence must strictly increasing continuous increasing subsequence defined two index l l nums l nums l 1^10 nums 1^10 nums l nums nums 1^10
allocate mailbox array house house location ith house along street integer k^10 allocate k^10 mailbox street minimum total distance house nearest mailbox test case generated answer fit 32 bit integer
rearranging fruit two fruit basket containing n^10 fruit two 0^10 indexed integer array basket1 basket2 representing cost fruit basket want make basket equal use following operation many time want chose two index j swap ith fruit basket1 jth fruit basket2 cost swap min basket1 basket2 j two basket considered equal sorting according fruit cost make exactly basket minimum cost make basket equal 1^10 impossible
root equal sum child root binary tree consists exactly 3^10 node root left child right child true value root equal sum value two child false otherwise
binary search tree iterator implement bstiterator class represents iterator order traversal binary search tree bst bstiterator treenode root initializes object bstiterator class root bst part constructor pointer initialized non existent number smaller element bst boolean hasnext return true exists number traversal right pointer otherwise return false int next move pointer right return number pointer notice initializing pointer non existent smallest number first call next smallest element bst may assume next call always valid least next number order traversal next called
group people group size belong n^10 people split unknown number group person labeled unique id 0^10 n^10 1^10 integer array groupsizes groupsizes size group person example groupsizes 1^10 3^10 person 1^10 must group size 3^10 list group person group size groupsizes person appear exactly one group every person must group multiple answer guaranteed least one valid solution input
binary tree level order traversal root binary tree level order traversal node value e left right level level
number path max score square board character move board starting bottom right square marked character need reach top left square marked character e rest square labeled either numeric character 1^10 2^10 9 obstacle x one move go left left diagonally obstacle list two integer first integer maximum sum numeric character collect second number path take get maximum sum taken modulo 10^10 9 7^10 case path 0^10 0^10
3sum closest integer array nums length n^10 integer target find three integer nums sum closest target sum three integer may assume input would exactly one solution
max value equation array point containing coordinate point 2d plane sorted x value point xi yi xi xj 1^10 j point length also integer k^10 maximum value equation yi yj xi xj xi xj k^10 1^10 j point length guaranteed exists least one pair point satisfy constraint xi xj k^10
maximum number ball box working ball factory n^10 ball numbered lowlimit highlimit inclusive e n^10 highlimit lowlimit 1^10 infinite number box numbered 1^10 infinity job factory put ball box number equal sum digit ball number example ball number 321 put box number 3^10 2^10 1^10 6 ball number 10^10 put box number 1^10 0^10 1^10 two integer lowlimit highlimit number ball box ball
sort color array nums n^10 object colored red white blue sort place object color adjacent color order red white blue use integer 0^10 1^10 2^10 represent color red white blue respectively must solve problem without^10 using^10 library sort function
lexicographically smallest palindrome string consisting lowercase english letter allowed^10 perform operation one operation replace character another lowercase english letter task make palindrome minimum number operation possible multiple palindrome made using^10 minimum number operation make lexicographically smallest one string lexicographically smaller string b^10 length first position b^10 differ string letter appears earlier alphabet corresponding letter b^10 resulting palindrome string
count unique character substring string let define function countuniquechars return number unique character example calling countuniquechars leetcode l c^10 unique character appear therefore countuniquechars 5^10 string sum countuniquechars substring test case generated answer fit 32 bit integer notice substring repeated case count repeated one
replace element greatest element right side array arr replace every element array greatest element among element right replace last element 1^10 array
interval identical element 0^10 indexed array n^10 integer arr interval two element arr defined absolute difference index formally interval arr arr j j array interval length n^10 interval sum interval arr element arr value arr note x absolute value x
dinner plate stack infinite number stack arranged row numbered left right 0^10 stack maximum capacity implement dinnerplates class dinnerplates int capacity initializes object maximum capacity stack capacity void push int val push integer val leftmost stack size le capacity int pop return value top rightmost non empty stack remove stack return 1^10 stack empty int popatstack int index return value top stack index index remove stack return 1^10 stack index empty
special array x element greater equal x array nums non negative integer nums considered special exists number x exactly x number nums greater equal x notice x element nums x array special otherwise 1^10 proven nums special value x unique
find common character string array word array character show string within word including duplicate may answer order
stone game v several stone arranged row stone associated value integer array stonevalue round game alice divide row two non empty row e left row right row bob calculates value row sum value stone row bob throw away row maximum value alice score increase value remaining row value two row equal bob let alice decide row thrown away next round start remaining row game end one stone remaining alice initially zero maximum score alice obtain
maximum value string array value alphanumeric string defined numeric representation string base 10^10 comprises digit length string otherwise array strs alphanumeric string maximum value string strs
implement rand10 using^10 rand7 api rand7 generates uniform random integer range 1^10 7^10 write function rand10 generates uniform random integer range 1^10 10^10 call api rand7 call api please use language built random api test case one internal argument n^10 number time implemented function rand10 called testing note argument passed rand10
sequential digit integer sequential digit digit number one previous digit sorted list integer range low high inclusive sequential digit
find xor beauty array 0^10 indexed integer array nums effective value three index j k^10 defined nums nums j nums k^10 xor beauty array xoring effective value possible triplet index j k^10 0^10 j k^10 n^10 xor beauty nums note val1 val2 bitwise val1 val2 val1 val2 bitwise val1 val2
minimum ascii delete sum two string two string s1 s2 lowest ascii sum deleted character make two string equal
determine two string close two string considered close attain one using^10 following operation operation 1^10 swap two existing character example abcde aecdboperation 2^10 transform every occurrence one existing character another existing character character example aacabb bbcbaa turn b^10 b^10 turn use operation either string many time necessary two string word1 word2 true word1 word2 close false otherwise
three consecutive odds integer array arr true three consecutive odd number array otherwise false
insert delete getrandom 1^10 implement randomizedset class randomizedset initializes randomizedset object bool insert int val insert item val set present return true item present false otherwise bool remove int val remove item val set present return true item present false otherwise int getrandom return random element current set element guaranteed least one element exists method called element must probability returned must implement function class function work average 1^10 time complexity
largest number digit swap parity positive integer num may swap two digit num parity e odd digit even digit largest possible value num number swap
longest subarray maximum bitwise integer array nums size n^10 consider non empty subarray nums maximum possible bitwise word let k^10 maximum value bitwise subarray nums subarrays bitwise equal k^10 considered length longest subarray bitwise array bitwise number subarray contiguous sequence element within array
flood fill image represented x n^10 integer grid image image j represents pixel value image also three integer sr sc color perform flood fill image starting pixel image sr sc perform flood fill consider starting pixel plus pixel connected 4 directionally starting pixel color starting pixel plus pixel connected 4 directionally pixel also color replace color aforementioned pixel color modified image performing flood fill
number sub array odd sum array integer arr number subarrays odd sum answer large modulo 109 7^10
check completeness binary tree root binary tree determine complete binary tree complete binary tree every level except possibly last completely filled node last level far left possible 1^10 2h node inclusive last level h
find lonely number array integer array nums number x lonely appears adjacent number e x 1^10 x 1^10 appear array lonely number nums may answer order
minimum deletion make array beautiful 0^10 indexed integer array nums array nums beautiful nums length even nums nums 1^10 2^10 0^10 note empty array considered beautiful delete number element nums delete element element right deleted element shifted one unit left fill gap created element left deleted element remain unchanged minimum number element delete nums make beautiful
maximum subarray integer array nums find thesubarraywith largest sum sum
number way paint n^10 ×^10 3^10 grid grid size n^10 x 3^10 want paint cell grid exactly one three color red yellow green making sure two adjacent cell color e two cell share vertical horizontal side color n^10 number row grid number way paint grid answer may grow large answer must computed modulo 109 7^10
remove duplicate sorted list ii head sorted linked list delete node duplicate number leaving distinct number original list linked list sorted
find people secret integer n^10 indicating n^10 people numbered 0^10 n^10 1^10 also 0^10 indexed 2d integer array meeting meeting xi yi timei indicates person xi person yi meeting timei person may attend multiple meeting time finally integer firstperson person 0^10 secret initially share secret person firstperson time 0^10 secret shared every time meeting take place person secret formally every meeting person xi secret timei share secret person yi vice versa secret shared instantaneously person may receive secret share people meeting within time frame list people secret meeting taken place may answer order
n^10 ary tree postorder traversal root n^10 ary tree postorder traversal node value nary tree input serialization represented level order traversal group child separated null value see example
array nesting integer array nums length n^10 nums permutation number range 0^10 n^10 1^10 build set k^10 nums k^10 nums nums k^10 nums nums nums k^10 subjected following rule first element k^10 start selection element nums k^10 index k^10 next element k^10 nums nums k^10 nums nums nums k^10 stop adding right duplicate element occurs k^10 longest length set k^10
count number ideal array two integer n^10 maxvalue used describe ideal array 0^10 indexed integer array arr length n^10 considered ideal following condition hold every arr value 1^10 maxvalue 0^10 n^10 every arr divisible arr 1^10 0^10 n^10 number distinct ideal array length n^10 answer may large modulo 109 7^10
snake ladder n^10 x n^10 integer matrix board cell labeled 1^10 n2 boustrophedon style starting bottom left board e board n^10 1^10 0^10 alternating direction row start square 1^10 board move starting square curr following choose destination square next label range curr 1^10 min curr 6 n2 choice simulates result standard 6 sided die roll e always 6 destination regardless size board next snake ladder must move destination snake ladder otherwise move next game end reach square n2 board square row column c^10 snake ladder board c^10 1^10 destination snake ladder board c^10 square 1^10 n2 snake ladder note take snake ladder per^10 move destination snake ladder start another snake ladder follow subsequent snake ladder example suppose board 1^10 4 1^10 3^10 first move destination square 2^10 follow ladder square 3^10 follow subsequent ladder 4 least number move required reach square n2 possible reach square 1^10
maximum value index bounded array three positive integer n^10 index maxsum want construct array nums 0^10 indexed satisfies following condition nums length nnums positive integer 0^10 n^10 ab nums nums 1^10 1^10 0^10 n^10 1^10 sum element nums exceed maxsum nums index maximized nums index constructed array note ab x equal x x 0^10 x otherwise
reverse word string input string reverse order word word defined sequence non space character word separated least one space string word reverse order concatenated single space note may contain leading trailing space multiple space two word returned string single space separating word include extra space
xor query subarray array arr positive integer also array query query lefti righti query compute xor element lefti righti arr lefti xor arr lefti 1^10 xor xor arr righti array answer answer answer ith query
pow x n^10 implement pow x n^10 calculates x raised power n^10 e xn
next greater element iii positive integer n^10 find smallest integer exactly digit existing integer n^10 greater value n^10 positive integer exists 1^10 note returned integer fit 32 bit integer valid answer fit 32 bit integer 1^10
sort array parity ii array integer nums half integer nums odd half even sort array whenever nums odd odd whenever nums even even answer array satisfies condition
minimized maximum product distributed store integer n^10 indicating n^10 specialty retail store product type varying amount 0^10 indexed integer array quantity quantity represents number product ith product type need distribute product retail store following rule store one product type amount distribution store number product possibly 0^10 let x represent maximum number product store want x small possible e want minimize maximum number product store minimum possible x
path sum iii root binary tree integer targetsum number path sum value along path equal targetsum path need start end root leaf must go downwards e traveling parent node child node
reconstruct original digit english string containing order english representation digit 0^10 9 digit ascending order
dice roll simulation die simulator generates random number 1^10 6 roll introduced constraint generator cannot roll number rollmax 1^10 indexed consecutive time array integer rollmax integer n^10 number distinct sequence obtained exact n^10 roll answer may large modulo 109 7^10 two sequence considered different least one element differs
find lucky integer array array integer arr lucky integer integer frequency array equal value largest lucky integer array lucky integer 1^10
minimum move equal array element ii integer array nums size n^10 minimum number move required make array element equal one move increment decrement element array 1^10 test case designed answer fit 32 bit integer
smallest range ii integer array nums integer k^10 index 0^10 nums length change nums either nums k^10 nums k^10 score nums difference maximum minimum element nums minimum score nums changing value index
big country sql schematable world column name type name varchar continent varchar area int population int gdp bigint name primary key column table row table give information name country continent belongs area population gdp value country big area least three million e 3000000 km2 orit population least twenty five million e 25000000 write sql query report name population area big country result table order query result format following example
count number nice subarrays array integer nums integer k^10 continuous subarray called nice k^10 odd number number nice sub array
replace digit character 0^10 indexed string lowercase english letter even index digit odd index function shift c^10 x c^10 character x digit return xth character c^10 example shift 5^10 f shift x 0^10 x every odd index want replace digit shift 1^10 replacing digit guaranteed shift 1^10 never exceed z
equal rational number two string represents non negative rational number true represent number string may use parenthesis denote repeating part rational number rational number represented using^10 three part integerpart nonrepeatingpart repeatingpart number represented one following three way integerpart example 12 0^10 123 integerpart nonrepeatingpart example 0^10 5^10 1^10 2^10 12 123 0001 integerpart nonrepeatingpart repeatingpart example 0^10 1^10 6 1^10 9 123 00 1212 repeating portion decimal expansion conventionally denoted within pair round bracket example 1^10 6 0^10 16666666 0^10 1^10 6 0^10 1666 6 0^10 166 66
palindromic substring string number palindromic substring string palindrome read backward forward substring contiguous sequence character within string
complex number multiplication complex number represented string form real imaginaryi real real part integer range 100 100 imaginary imaginary part integer range 100 100 i2 1^10 two complex number num1 num2 string string complex number represents multiplication
majority element array nums size n^10 majority element majority element element appears ⌊ n^10 2^10 ⌋ time may assume majority element always exists array
maximum building height want build n^10 new building city new building built line labeled 1^10 n^10 however city restriction height new building height building must non negative integer height first building must 0^10 height difference two adjacent building cannot exceed 1^10 additionally city restriction maximum height specific building restriction 2d integer array restriction restriction idi maxheighti indicates building idi must height le equal maxheighti guaranteed building appear restriction building 1^10 restriction maximum possible height tallest building
sort integer number 1^10 bit integer array arr sort integer array ascending order number 1^10 binary representation case two integer number 1^10 sort ascending order array sorting
elimination game list arr integer range 1^10 n^10 sorted strictly increasing order apply following algorithm arr starting left right remove first number every number afterward reach end list repeat previous step time right left remove rightmost number every number remaining number keep repeating step alternating left right right left single number remains integer n^10 last number remains arr
find number even number digit array nums integer many contain even number digit
count number square free subset positive integer 0^10 indexed array nums subset array nums square free product element square free integer square free integer integer divisible square number 1^10 number square free non empty subset array nums answer may large modulo 109 7^10 non empty subset nums array obtained deleting possibly none element nums two subset different chosen index delete different
number distinct roll sequence integer n^10 roll fair 6 sided dice n^10 time determine total number distinct sequence roll possible following condition satisfied greatest common divisor adjacent value sequence equal 1^10 least gap 2^10 roll equal valued roll formally value ith roll equal value jth roll ab j 2^10 total number distinct sequence possible answer may large modulo 109 7^10 two sequence considered distinct least one element different
count largest group integer n^10 number 1^10 n^10 grouped according sum digit number group largest size
lemonade change lemonade stand lemonade cost 5^10 customer standing queue buy order one time order specified bill customer buy one lemonade pay either 5^10 10^10 20 bill must provide correct change customer net transaction customer pay 5^10 note change hand first integer array bill bill bill ith customer pay true provide every customer correct change false otherwise
network delay time network n^10 node labeled 1^10 n^10 also time list travel time directed edge time ui vi wi ui source node vi target node wi time take signal travel source target send signal node k^10 minimum time take n^10 node receive signal impossible n^10 node receive signal 1^10
count artifact extracted n^10 x n^10 0^10 indexed grid artifact buried integer n^10 0^10 indexed 2d integer array artifact describing position rectangular artifact artifact r1i c1i r2i c2i denotes ith artifact buried subgrid r1i c1i coordinate top left cell ith artifact r2i c2i coordinate bottom right cell ith artifact excavate cell grid remove mud cell part artifact buried underneath uncovered part artifact uncovered extract 0^10 indexed 2d integer array dig dig ri ci indicates excavate cell ri ci number artifact extract test case generated two artifact overlap artifact cover 4 cell entry dig unique
simple bank system tasked writing program popular bank automate incoming transaction transfer deposit withdraw bank n^10 account numbered 1^10 n^10 initial balance account stored 0^10 indexed integer array balance 1^10 th account initial balance balance execute valid transaction transaction valid account number 1^10 n^10 andthe amount money withdrawn transferred le equal balance account implement bank class bank long balance initializes object 0^10 indexed integer array balance boolean transfer int account1 int account2 long money transfer money dollar account numbered account1 account numbered account2 true transaction successful false otherwise boolean deposit int account long money deposit money dollar account numbered account true transaction successful false otherwise boolean withdraw int account long money withdraw money dollar account numbered account true transaction successful false otherwise
palindrome partitioning iv string true possible split string three non empty palindromic substring otherwise false string said palindrome string reversed
distant barcodes warehouse row barcodes ith barcode barcodes rearrange barcodes two adjacent barcodes equal may answer guaranteed answer exists
rotating box x n^10 matrix character box representing side view box cell box one following stone stationary obstacle empty box rotated 90 degree clockwise causing stone fall due gravity stone fall land obstacle another stone bottom box gravity affect obstacle position inertia box rotation affect stone horizontal position guaranteed stone box rest obstacle another stone bottom box n^10 x matrix representing box rotation described
binary number alternating bit positive integer check whether alternating bit namely two adjacent bit always different value
special position binary matrix x n^10 binary matrix mat number special position mat position j called special mat j 1^10 element row column j 0^10 row column 0^10 indexed
kth^10 largest element array integer array nums integer k^10 kth^10 largest element array note kth^10 largest element sorted order kth^10 distinct element must solve n^10 time complexity
maximum segment sum removal two 0^10 indexed integer array nums removequeries length n^10 ith query element nums index removequeries removed splitting nums different segment segment contiguous sequence positive integer nums segment sum sum every element segment integer array answer length n^10 answer maximum segment sum applying ith removal note index removed
check word equal summation two word letter value letter position alphabet starting 0^10 e 0^10 b^10 1^10 c^10 2^10 etc numerical value string lowercase english letter concatenation letter value letter converted integer example acb concatenate letter letter value resulting 021 converting get 21^10 three string firstword secondword targetword consisting lowercase english letter j inclusive true summation numerical value firstword secondword equal numerical value targetword false otherwise
maximum matrix sum n^10 x n^10 integer matrix following operation number time choose two adjacent element matrix multiply 1^10 two element considered adjacent share border goal maximize summation matrix element maximum sum matrix element using^10 operation mentioned
cell range excel sheet cell c^10 excel sheet represented string col row col denotes column number c^10 cell represented alphabetical letter example 1st column denoted 2nd b^10 3rd c^10 row row number cell rth row represented integer string format col1 row1 col2 row2 col1 represents column c1 row1 represents row r1 col2 represents column c2 row2 represents row r2 r1 r2 c1 c2 list cell x r1 x r2 c1 c2 cell represented string format mentioned sorted non decreasing order first column row
number squareful array array squareful sum every pair adjacent element perfect square integer array nums number permutation nums squareful two permutation perm1 perm2 different index perm1 perm2
form largest integer digit add target array integer cost integer target maximum integer paint following rule cost painting digit 1^10 cost 0^10 indexed total cost used must equal target integer 0^10 digit answer may large string way paint integer condition 0^10
subarrays k^10 different integer integer array nums integer k^10 number good subarrays nums good array array number different integer array exactly k^10 example 1^10 2^10 3^10 1^10 2^10 3^10 different integer 1^10 2^10 3^10 subarray contiguous part array
jump game vi 0^10 indexed integer array nums integer k^10 initially standing index 0^10 one move jump k^10 step forward without^10 going outside boundary array jump index index range 1^10 min n^10 1^10 k^10 inclusive want reach last index array index n^10 1^10 score sum nums j index j visited array maximum score get
find substring maximum cost string string char distinct character integer array vals length char cost substring sum value character substring cost empty string considered 0^10 value character defined following way character string char value corresponding position 1^10 indexed alphabet example value 1^10 value b^10 2^10 value z 26 otherwise assuming index character occurs string char value vals maximum cost among substring string
vertical order traversal binary tree root binary tree calculate vertical order traversal binary tree node position row col left right child position row 1^10 col 1^10 row 1^10 col 1^10 respectively root tree 0^10 0^10 vertical order traversal binary tree list top bottom ordering column index starting leftmost column ending rightmost column may multiple node row column case sort node value vertical order traversal binary tree
delete middle node linked list head linked list delete middle node head modified linked list middle node linked list size n^10 ⌊ n^10 2^10 ⌋ th node start using^10 0^10 based indexing ⌊ x ⌋ denotes largest integer le equal x n^10 1^10 2^10 3^10 4 5^10 middle node 0^10 1^10 1^10 2^10 2^10 respectively
number music playlist music player contains n^10 different song want listen goal song necessarily different trip avoid boredom create playlist every song played least song played k^10 song played n^10 goal k^10 number possible playlist create answer large modulo 109 7^10
convert sorted list binary search tree head singly linked list element sorted ascending order convert aheight balancedbinary search tree
bull cow playing bull cow game friend write secret number ask friend guess number friend make guess provide hint following info number bull digit guess correct position number cow digit guess secret number located wrong position specifically non bull digit guess could rearranged become bull secret number secret friend guess guess hint friend guess hint formatted xayb x number bull number cow note secret guess may contain duplicate digit
find score prefix array define conversion array conver array arr follows conver arr max arr 0^10 max arr 0^10 maximum value arr j 0^10 j also define score array arr sum value conversion array arr 0^10 indexed integer array nums length n^10 array an^10 length n^10 an^10 score prefix nums 0^10
two city scheduling company planning interview 2n people array cost cost acosti bcosti cost flying ith person city acosti cost flying ith person city b^10 bcosti minimum cost fly every person city exactly n^10 people arrive city
magnetic force two ball universe earth c^10 137 rick discovered special form magnetic force two ball put new invented basket rick n^10 empty basket ith basket position morty ball need distribute ball basket minimum magnetic force two ball maximum rick stated magnetic force two different ball position x x integer array position integer required force
minimum cost cut stick wooden stick length n^10 unit stick labelled 0^10 n^10 example stick length 6 labelled follows integer array cut cut denotes position perform cut perform cut order change order cut wish cost one cut length stick cut total cost sum cost cut cut stick split two smaller stick e sum length length stick cut please refer first example better explanation minimum total cost cut
sliding puzzle 2^10 x 3^10 board five tile labeled 1^10 5^10 empty square represented 0^10 move consists choosing 0^10 4 directionally adjacent number swapping state board solved board 1^10 2^10 3^10 4 5^10 0^10 puzzle board board least number move required state board solved impossible state board solved 1^10
number complement complement integer integer get flip 0^10 1^10 1^10 0^10 binary representation example integer 5^10 101 binary complement 010 integer 2^10 integer num complement
insufficient node root leaf path root binary tree integer limit delete insufficient node tree simultaneously root resulting binary tree node insufficient every root leaf path intersecting node sum strictly le limit leaf node child
minimum total distance traveled robot factory x axis integer array robot robot position ith robot also 2d integer array factory factory j positionj limitj indicates positionj position jth factory jth factory repair limitj robot position robot unique position factory also unique note robot position factory initially robot initially broken keep moving one direction direction could negative positive direction x axis robot reach factory reach limit factory repair robot stop moving moment set initial direction moving robot target minimize total distance traveled robot minimum total distance traveled robot test case generated robot repaired note thatall robot move speed two robot move direction never collide two robot move opposite direction point collide cross robot pass factory reached limit cross exist robot moved position x position distance moved x
patient condition sql schematable patient column name type patient_id int patient_name varchar condition varchar patient_id primary key table condition contains 0^10 code separated space table contains information patient hospital write sql query report patient_id patient_name condition patient type diabetes type diabetes always start diab1 prefix result table order query result format following example
calculate amount paid tax 0^10 indexed 2d integer array bracket bracket upperi percenti mean ith tax bracket upper bound upperi taxed rate percenti bracket sorted upper bound e upperi 1^10 upperi 0^10 bracket length tax calculated follows first upper0 dollar earned taxed rate percent0 next upper1 upper0 dollar earned taxed rate percent1 next upper2 upper1 dollar earned taxed rate percent2 integer income representing amount money earned amount money pay tax answer within 10^10 5^10 actual answer accepted
maximize sum array k^10 negation integer array nums integer k^10 modify array following way choose index replace nums nums apply process exactly k^10 time may choose index multiple time largest possible sum array modifying way
department top three salary sql schematable employee column name type id int name varchar salary int departmentid int id primary key column table departmentid foreign key id department table row table indicates id name salary employee also contains id department table department column name type id int name varchar id primary key column table row table indicates id department name company executive interested seeing earns money company department high earner department employee salary top three unique salary department write sql query find employee high earner department result table order query result format following example
contains duplicate iii integer array nums two integer indexdiff valuediff find pair index j j ab j indexdiff ab nums nums j valuediff andreturn true pair exists false otherwise
self dividing number self dividing number number divisible every digit contains example 128 self dividing number 128 1^10 0^10 128 2^10 0^10 128 8 0^10 self dividing number allowed^10 contain digit zero two integer left right list self dividing number range left right
minimum swap make sequence increasing two integer array length nums1 nums2 one operation allowed^10 swap nums1 nums2 example nums1 1^10 2^10 3^10 8 nums2 5^10 6 7^10 4 swap element 3^10 obtain nums1 1^10 2^10 3^10 4 nums2 5^10 6 7^10 8 minimum number needed operation make nums1 nums2 strictly increasing test case generated input always make possible array arr strictly increasing arr 0^10 arr 1^10 arr 2^10 arr arr length 1^10
defanging ip address valid ipv4 ip address defanged version ip address defanged ip address replaces every period
fraction recurring decimal two integer representing numerator denominator fraction fraction string format fractional part repeating enclose repeating part parenthesis multiple answer possible guaranteed length answer string le 104 input
product price date sql schematable product column name type product_id int new_price int change_date date product_id change_date primary key table row table indicates price product changed new price date write sql query find price product 2019 08 16 assume price product change 10^10 result table order query result format following example
minimum possible integer k^10 adjacent swap digit string num representing digit large integer integer k^10 allowed^10 swap two adjacent digit integer k^10 time minimum integer obtain also string
split string balanced string balanced string equal quantity l character balanced string split number substring substring balanced maximum number balanced string obtain
find good day rob bank gang thief planning robbing bank 0^10 indexed integer array security security number guard duty ith day day numbered starting 0^10 also integer time ith day good day rob bank least time day ith day number guard bank time day non increasing andthe number guard bank time day non decreasing formally mean day good day rob bank security time security time 1^10 security security time 1^10 security time list day 0^10 indexed good day rob bank order day returned matter
design front middle back queue design queue support push pop operation front middle back implement frontmiddleback class frontmiddleback initializes queue void pushfront int val add val front queue void pushmiddle int val add val middle queue void pushback int val add val back queue int popfront remove front element queue return queue empty 1^10 int popmiddle remove middle element queue return queue empty 1^10 int popback remove back element queue return queue empty 1^10 notice two middle position choice operation performed frontmost middle position choice example pushing 6 middle 1^10 2^10 3^10 4 5^10 result 1^10 2^10 6 3^10 4 5^10 popping middle 1^10 2^10 3^10 4 5^10 6 return 3^10 result 1^10 2^10 4 5^10 6
maximum tastiness candy basket array positive integer price price denotes price ith candy positive integer k^10 store sell basket k^10 distinct candy tastiness candy basket smallest absolute difference price two candy basket maximum tastiness candy basket
maximum sum 3^10 non overlapping subarrays integer array nums integer k^10 find three non overlapping subarrays length k^10 maximum sum result list index representing starting position interval 0^10 indexed multiple answer lexicographically smallest one
watering plant ii alice bob want water n^10 plant garden plant arranged row labeled 0^10 n^10 1^10 left right ith plant located x plant need specific amount water alice bob watering initially full water plant following way alice water plant order left right starting 0th plant bob water plant order right left starting n^10 1^10 th plant begin watering plant simultaneously take amount time water plant regardless much water need alice bob must water plant enough fully water otherwise first refill instantaneously water plant case alice bob reach plant one water currently watering water plant amount water alice water plant 0^10 indexed integer array plant n^10 integer plant amount water ith plant need two integer capacitya capacityb representing capacity alice bob watering can respectively number time refill water plant
convert string k^10 move two string goal convert k^10 move le ith 1^10 k^10 move choose index j 1^10 indexed 1^10 j length j chosen previous move shift character index time nothing shifting character mean replacing next letter alphabet wrapping around z becomes shifting character mean applying shift operation time remember index j picked true possible convert k^10 move otherwise false
count number vowel string range 0^10 indexed array string word two integer left right string called vowel string start vowel character end vowel character vowel character e u number vowel string word belongs inclusive range left right
capital gain loss sql schematable stock column name type stock_name varchar operation enum operation_day int price int stock_name operation_day primary key table operation column enum type sell buy row table indicates stock stock_name operation day operation_day price guaranteed sell operation stock corresponding buy operation previous day also guaranteed buy operation stock corresponding sell operation upcoming day write sql query report capital gain loss stock capital gain loss stock total gain loss buying selling stock one many time result table order query result format following example
find prefix common array two array two 0^10 indexed integer permutation b^10 length n^10 prefix common array b^10 array c^10 c^10 equal count number present index b^10 prefix common array b^10 sequence n^10 integer called permutation contains integer 1^10 n^10 exactly
shortest path get key x n^10 grid grid empty cell wall starting point lowercase letter represent key uppercase letter represent lock start starting point one move consists walking one space one four cardinal direction cannot walk outside grid walk wall walk key pick cannot walk lock corresponding key 1^10 k^10 6 exactly one lowercase one uppercase letter first k^10 letter english alphabet grid mean exactly one key lock one lock key also letter used represent key lock chosen order english alphabet lowest number move acquire key impossible 1^10
score flipping matrix x n^10 binary matrix grid move consists choosing row column toggling value row column e changing 0^10 1^10 1^10 0^10 every row matrix interpreted binary number score matrix sum number highest possible score making number move including zero move
minimum time make rope colorful alice n^10 balloon arranged rope 0^10 indexed string color color color ith balloon alice want rope colorful want two consecutive balloon color asks bob help bob remove balloon rope make colorful 0^10 indexed integer array neededtime neededtime time second bob need remove ith balloon rope minimum time bob need make rope colorful
design food rating system design food rating system following modify rating food item listed system highest rated food item type cuisine system implement foodratings class foodratings string food string cuisine int rating initializes system food item described food cuisine rating length n^10 food name ith food cuisine type cuisine ith food andratings initial rating ith food void changerating string food int newrating change rating food item name food string highestrated string cuisine return name food item highest rating type cuisine tie item lexicographically smaller name note string x lexicographically smaller string x come dictionary order either x prefix first position x x come alphabetic order
closest prime number range two positive integer left right find two integer num1 num2 left nums1 nums2 right nums1 nums2 prime number nums2 nums1 minimum amongst pair satisfying condition positive integer array an^10 nums1 nums2 multiple pair satisfying condition one minimum nums1 value 1^10 1^10 number exist number greater 1^10 called prime divisible 1^10
uncrossed line two integer array nums1 nums2 write integer nums1 nums2 order two separate horizontal line may draw connecting line straight line connecting two number nums1 nums2 j nums1 nums2 j andthe line draw intersect connecting non horizontal line note connecting line cannot intersect even endpoint e number belong one connecting line maximum number connecting line draw way
minimum total cost make array unequal two 0^10 indexed integer array nums1 nums2 equal length n^10 one operation swap value two index nums1 cost operation sum index find minimum total cost performing operation number time nums1 nums2 0^10 n^10 1^10 performing operation minimum total cost nums1 nums2 satisfy condition case possible 1^10
next greater element next greater element element x array first greater element right x array two distinct 0^10 indexed integer array nums1 nums2 nums1 subset nums2 0^10 nums1 length find index j nums1 nums2 j determine next greater element nums2 j nums2 next greater element answer query 1^10 array an^10 length nums1 length an^10 next greater element described
detect cycle 2d grid 2d array character grid size x n^10 need find exists cycle consisting value grid cycle path length 4 grid start end cell cell move one cell adjacent one four direction left right value current cell also cannot move cell visited last move example cycle 1^10 1^10 1^10 2^10 1^10 1^10 invalid 1^10 2^10 visited 1^10 1^10 last visited cell true cycle value exists grid otherwise false
range sum sorted subarray sum array nums consisting n^10 positive integer computed sum non empty continuous subarrays array sorted non decreasing order creating new array n^10 n^10 1^10 2^10 number sum number index left index right indexed 1^10 inclusive new array answer huge number modulo 109 7^10
number equivalent domino pair list domino domino b^10 equivalent domino j c^10 either c^10 b^10 b^10 c^10 one domino rotated equal another domino number pair j 0^10 j domino length domino equivalent domino j
minimum line represent line chart 2d integer array stockprices stockprices dayi pricei indicates price stock day dayi pricei line chart created array plotting point xy plane x axis representing day axis representing price connecting adjacent point one example shown minimum number line needed represent line chart
basic calculator iv expression expression e 8 5^10 evaluation map e 1^10 term evalvars e evalints 1^10 list token representing simplified expression 1^10 14 expression alternate chunk symbol space separating chunk symbol chunk either expression parenthesis variable non negative integer variable string lowercase letter including digit note variable multiple letter note variable never leading coefficient unary operator like 2x x expression evaluated usual order bracket first multiplication addition subtraction example expression 1^10 2^10 3^10 answer 7^10 format output follows term free variable non zero coefficient write free variable within term sorted order lexicographically example would never write term like b^10 c^10 b^10 c^10 term degree equal number free variable multiplied counting multiplicity write largest degree term answer first breaking tie lexicographic order ignoring leading coefficient term example b^10 c^10 degree 4 leading coefficient term placed directly left asterisk separating variable exist leading coefficient 1^10 still printed example formatted answer 2^10 3^10 b^10 3^10 b^10 b^10 4 5^10 c^10 6 term including constant term coefficient 0^10 included example expression 0^10 output note may assume expression always valid intermediate result range 231 231 1^10
find duplicate number array integer nums containing n^10 1^10 integer integer range 1^10 n^10 inclusive one repeated number nums repeated number must solve problem without^10 modifying array nums us constant extra space
merge string alternately two string word1 word2 merge string adding letter alternating order starting word1 string longer append additional letter onto end merged string merged string
distribute coin binary tree root binary tree n^10 node node tree node val coin n^10 coin total throughout whole tree one move may choose two adjacent node move one coin one node another move may parent child child parent minimum number move required make every node exactly one coin
restore ip address valid ip address consists exactly four integer separated single dot integer 0^10 255 inclusive cannot leading zero example 0^10 1^10 2^10 201 192 168 1^10 1^10 valid ip address 0^10 011 255 245 192 168 1^10 312 192 168 1^10 1^10 invalid ip address string containing digit possible valid ip address formed inserting dot allowed^10 reorder remove digit may valid ip address order
make array strictly increasing two integer array arr1 arr2 minimum number operation possibly zero needed make arr1 strictly increasing one operation choose two index 0^10 arr1 length 0^10 j arr2 length assignment arr1 arr2 j way make arr1 strictly increasing 1^10
k^10 closest point origin array point point xi yi represents point x plane integer k^10 k^10 closest point origin 0^10 0^10 distance two point x plane euclidean distance e √ x1 x2 2^10 y1 y2 2^10 may answer order answer guaranteed unique except order
number way arrive destination city consists n^10 intersection numbered 0^10 n^10 1^10 bi directional road intersection input generated reach intersection intersection one road two intersection integer n^10 2d integer array road road ui vi timei mean road intersection ui vi take timei minute travel want know many way travel intersection 0^10 intersection n^10 1^10 shortest amount time number way arrive destination shortest amount time answer may large modulo 109 7^10
maximum subarray min product min product array equal minimum value array multiplied array sum example array 3^10 2^10 5^10 minimum value 2^10 min product 2^10 3^10 2^10 5^10 2^10 10^10 20 array integer nums maximum min product non empty subarray nums answer may large modulo 109 7^10 note min product maximized performing modulo operation testcases generated maximum min product without^10 modulo fit 64 bit signed integer subarray contiguous part array
k^10 inverse pair array integer array nums inverse pair pair integer j 0^10 j nums length nums nums j two integer n^10 k^10 number different array consist number 1^10 n^10 exactly k^10 inverse pair answer huge modulo 109 7^10
maximum sum exactly k^10 element 0^10 indexed integer array nums integer k^10 task perform following operation exactly k^10 time order maximize score select element nums remove selected element array add new element value 1^10 array increase score maximum score achieve performing operation exactly k^10 time
path source target directed acyclic graph dag n^10 node labeled 0^10 n^10 1^10 find possible path node 0^10 node n^10 1^10 order graph follows graph list node visit node e directed edge node node graph j
far land possible n^10 x n^10 grid containing value 0^10 1^10 0^10 represents water 1^10 represents land find water cell distance nearest land cell maximized distance land water exists grid 1^10 distance used problem manhattan distance distance two cell x0 y0 x1 y1 x0 x1 y0 y1
flipping image n^10 x n^10 binary matrix image flip image horizontally invert resulting image flip image horizontally mean row image reversed example flipping 1^10 1^10 0^10 horizontally result 0^10 1^10 1^10 invert image mean 0^10 replaced 1^10 1^10 replaced 0^10 example inverting 0^10 1^10 1^10 result 1^10 0^10 0^10
regular expression matching input string pattern p implement regular expression matching support match single character match zero preceding element matching cover entire input string partial
get maximum generated array integer n^10 0^10 indexed integer array nums length n^10 1^10 generated following way nums 0^10 0nums 1^10 1nums 2^10 nums 2^10 2^10 nnums 2^10 1^10 nums nums 1^10 2^10 2^10 1^10 nreturn maximum integer array nums
number burger waste ingredient two integer tomatoslices cheeseslices ingredient different burger follows jumbo burger 4 tomato slice 1^10 cheese slice small burger 2^10 tomato slice 1^10 cheese slice total_jumbo total_small number remaining tomatoslices equal 0^10 number remaining cheeseslices equal 0^10 possible make remaining tomatoslices cheeseslices equal 0^10
smallest integer divisible k^10 positive integer k^10 need find length smallest positive integer n^10 n^10 divisible k^10 n^10 contains digit 1^10 length n^10 n^10 1^10 note n^10 may fit 64 bit signed integer
maximum row covered column 0^10 indexed x n^10 binary matrix matrix integer numselect denotes number distinct column must select matrix let u consider c1 c2 cnumselect set column selected row row covered cell matrix row col 0^10 col n^10 1^10 matrix row col 1^10 col present cell row value 1^10 need choose numselect column number row covered maximized maximum number row covered set numselect column
delete column make sorted ii array n^10 string strs length may choose deletion index delete character index string example strs abcdef uvwxyz deletion index 0^10 2^10 3^10 final array deletion bef vyz suppose chose set deletion index answer deletion final array element lexicographic order e strs 0^10 strs 1^10 strs 2^10 strs n^10 1^10 minimum possible value answer length
make sum divisible p array positive integer nums remove smallest subarray possibly empty sum remaining element divisible p allowed^10 remove whole array length smallest subarray need remove 1^10 impossible subarray defined contiguous block element array
abbreviating product range two positive integer left right left right calculate product integer inclusive range left right product may large abbreviate following step count trailing zero product remove let u denote count c^10 example 3^10 trailing zero 1000 0^10 trailing zero 546 denote remaining number digit product 10^10 express product pre suf pre denotes first 5^10 digit product suf denotes last 5^10 digit product removing trailing zero 10^10 keep unchanged example express 1234567654321 12345 54321 1234567 represented 1234567 finally represent product string pre suf ec example 12345678987600000 represented 12345 89876e5 string denoting abbreviated product integer inclusive range left right
range module range module module track range number design data structure track range represented half open interval query half open interval left right denotes real number x left x right implement rangemodule class rangemodule initializes object data structure void addrange int left int right add half open interval left right tracking every real number interval adding interval partially overlap currently tracked number add number interval left right already tracked boolean queryrange int left int right return true every real number interval left right currently tracked false otherwise void removerange int left int right stop tracking every real number currently tracked half open interval left right
summary range sorted unique integer array nums range b^10 set integer b^10 inclusive smallest sorted list range cover number array exactly element nums covered exactly one range integer x x one range nums range b^10 list output b^10 b^10 b^10
making large island n^10 x n^10 binary matrix grid allowed^10 change one 0^10 1^10 size largest island grid applying operation island 4 directionally connected group 1^10
n^10 th tribonacci number tribonacci sequence tn defined follows t0 0^10 t1 1^10 t2 1^10 tn 3^10 tn tn 1^10 tn 2^10 n^10 0^10 n^10 value tn
calculate digit sum string string consisting digit integer k^10 round completed length greater k^10 one round following divide consecutive group size k^10 first k^10 character first group next k^10 character second group note size last group smaller k^10 replace group string representing sum digit example 346 replaced 13 3^10 4 6 13 merge consecutive group together form new string length string greater k^10 repeat step 1^10 round completed
maximum number vowel substring length string integer k^10 maximum number vowel letter substring length k^10 vowel letter english e u
construct binary tree preorder inorder traversal two integer array preorder inorder preorder preorder traversal binary tree inorder inorder traversal tree construct binary tree
guess number higher lower playing guess game game follows pick number 1^10 n^10 guess number picked every time guess wrong tell whether number picked higher lower guess call pre defined api int guess int num return three possible result 1^10 guess higher number picked e num pick 1^10 guess lower number picked e num pick 0^10 guess equal number picked e num pick number picked
maximum xor element array array nums consisting non negative integer also query array query xi mi answer ith query maximum bitwise xor value xi element nums exceed mi word answer max nums j xor xi j nums j mi element nums larger mi answer 1^10 integer array answer answer length query length answer answer ith query
count square sum triple square triple b^10 c^10 triple b^10 c^10 integer a2 b2 c2 integer n^10 number square triple 1^10 b^10 c^10 n^10
investment 2016^10 sql schematable insurance column name type pid int tiv_2015 float tiv_2016 float lat float lon float pid primary key column table row table contains information one policy pid policyholder policy id tiv_2015 total investment value 2015 tiv_2016 total investment value 2016^10 lat latitude policy holder city guaranteed lat null lon longitude policy holder city guaranteed lon null write sql query report sum total investment value 2016^10 tiv_2016 policyholder tiv_2015 value one policyholder andare located city like policyholder e lat lon attribute pair must unique round tiv_2016 two decimal place query result format following example
minimum deletion make string balanced string consisting character b^10 delete number character make balanced balanced pair index j j b^10 j minimum number deletion needed make balanced
two best non overlapping event 0^10 indexed 2d integer array event event starttimei endtimei valuei ith event start starttimei end endtimei attend event receive value valuei choose two non overlapping event attend sum value maximized maximum sum note start time end time inclusive cannot attend two event one start end time specifically attend event end time next event must start 1^10
prime number set bit binary representation two integer left right count number inclusive range left right prime number set bit binary representation recall number set bit integer number 1^10 present written binary example 21^10 written binary 10101 3^10 set bit
logical two binary grid represented quad tree binary matrix matrix element either 0^10 1^10 quadtree1 quadtree2 quadtree1 represents n^10 n^10 binary matrix quadtree2 represents another n^10 n^10 binary matrix quad tree representing n^10 n^10 binary matrix result logical bitwise two binary matrix represented quadtree1 quadtree2 notice assign value node true false isleaf false accepted answer quad tree tree data structure internal node exactly four child besides node two attribute val true node represents grid 1^10 false node represents grid 0^10 isleaf true node leaf node tree false node four child class node public boolean val public boolean isleaf public node topleft public node topright public node bottomleft public node bottomright construct quad tree two dimensional area using^10 following step current grid value e 1^10 0^10 set isleaf true set val value grid set four child null stop current grid different value set isleaf false set val value divide current grid four sub grid shown photo recurse child proper sub grid want know quad tree refer wiki quad tree format input output represents serialized format quad tree using^10 level order traversal null signifies path terminator node exists similar serialization binary tree difference node represented list isleaf val value isleaf val true represent 1^10 list isleaf val value isleaf val false represent 0^10
minimum cost hire k^10 worker n^10 worker two integer array quality wage quality quality ith worker wage minimum wage expectation ith worker want hire exactly k^10 worker form paid group hire group k^10 worker must pay according following rule every worker paid group paid ratio quality compared worker paid group every worker paid group must paid least minimum wage expectation integer k^10 least amount money needed form paid group satisfying condition answer within 10^10 5^10 actual answer accepted
popular video creator two string array creator id integer array view length n^10 ith video platform created creator id id view view popularity creator sum number view creator video find creator highest popularity id viewed video multiple creator highest popularity find multiple video highest view count creator find lexicographically smallest id 2d array string answer answer creatori idi mean creatori highest popularity idi id popular video answer returned order
group anagram array string strs group anagram together answer order anagram word phrase formed rearranging letter different word phrase typically using^10 original letter exactly
move zero integer array nums move 0^10 end maintaining relative order non zero element note must place without^10 making copy array
append character string make subsequence two string consisting lowercase english letter minimum number character need appended end becomes subsequence subsequence string derived another string deleting character without^10 changing order remaining character
checking existence edge length limited path undirected graph n^10 node defined edgelist edgelist ui vi disi denotes edge node ui vi distance disi note may multiple edge two node array query query j pj qj limitj task determine query j whether path pj qj edge path distance strictly le limitj boolean array answer answer length query length jth value answer true path query j true false otherwise
intersection two array ii two integer array nums1 nums2 array intersection element result must appear many time show array may result order
largest value label set n^10 item two integer array value label value label ith element value label respectively also two integer numwanted uselimit choose subset n^10 element size subset le equal numwanted uselimit item label score subset sum value subset maximum score subset
sum root leaf binary number root binary tree node value 0^10 1^10 root leaf path represents binary number starting significant bit example path 0^10 1^10 1^10 0^10 1^10 could represent 01101 binary 13 leaf tree consider number represented path root leaf sum number test case generated answer fit 32 bit integer
number different subsequence gcds array nums consists positive integer gcd sequence number defined greatest integer divide number sequence evenly example gcd sequence 4 6 16 2^10 subsequence array sequence formed removing element possibly none array example 2^10 5^10 10^10 subsequence 1^10 2^10 1^10 2^10 4 1^10 5^10 10^10 number different gcds among non empty subsequence nums
check parenthesis string valid parenthesis string non empty string consisting valid following condition true written ab concatenated b^10 b^10 valid parenthesis string written valid parenthesis string parenthesis string string locked length n^10 locked binary string consisting 0^10 1^10 index locked locked 1^10 cannot change locked 0^10 change either true make valid parenthesis string otherwise false
stock price fluctuation stream record particular stock record contains timestamp corresponding price stock timestamp unfortunately due volatile nature stock market record come order even worse record may incorrect another record timestamp may appear later stream correcting price previous wrong record design algorithm update price stock particular timestamp correcting price previous record timestamp find latest price stock based current record latest price price latest timestamp recorded find maximum price stock based current record find minimum price stock based current record implement stockprice class stockprice initializes object price record void update int timestamp int price update price stock timestamp int current return latest price stock int maximum return maximum price stock int minimum return minimum price stock
rising temperature sql schematable weather column name type id int recorddate date temperature int id primary key table table contains information temperature certain day write sql query find date id higher temperature compared previous date yesterday result table order query result format following example
booking concert ticket group concert hall n^10 row numbered 0^10 n^10 1^10 seat numbered 0^10 1^10 need design ticketing system allocate seat following case group k^10 spectator sit together row every member group k^10 spectator get seat may may sit together note spectator picky hence book seat member group get seat row number le equal maxrow maxrow vary group group case multiple row choose row smallest number chosen multiple seat choose row seat smallest number chosen implement bookmyshow class bookmyshow int n^10 int initializes object n^10 number row number seat per^10 row int gather int k^10 int maxrow return array length 2^10 denoting row seat number respectively first seat allocated k^10 member group must sit together word return smallest possible c^10 c^10 c^10 k^10 1^10 seat valid empty row maxrow return case possible allocate seat group boolean scatter int k^10 int maxrow return true k^10 member group allocated seat row 0^10 maxrow may may sit together seat allocated allocates k^10 seat group smallest row number smallest possible seat number row otherwise return false
letter case permutation string transform every letter individually lowercase uppercase create another string list possible string could create output order
smallest even multiple positive integer n^10 smallest positive integer multiple 2^10 n^10
longest increasing subsequence integer array nums length longest strictly increasingsubsequence
number double reversal reversing integer mean reverse digit example reversing 2021 give 1202 reversing 12300 give 321 leading zero retained integer num reverse num get reversed1 reverse reversed1 get reversed2 true reversed2 equal num otherwise false
pascal triangle integer numrows first numrows pascal triangle pascal triangle number sum two number directly shown
department highest salary sql schematable employee column name type id int name varchar salary int departmentid int id primary key column table departmentid foreign key id department table row table indicates id name salary employee also contains id department table department column name type id int name varchar id primary key column table guaranteed department name null row table indicates id department name write sql query find employee highest salary department result table order query result format following example
rearrange product table sql schematable product column name type product_id int store1 int store2 int store3 int product_id primary key table row table indicates product price 3^10 different store store1 store2 store3 product available store price null store column write sql query rearrange product table row product_id store price product available store include row product_id store combination result table result table order query result format following example
find nearest point x coordinate two integer x represent current location cartesian grid x also array point point ai bi represents point exists ai bi point valid share x coordinate coordinate location index 0^10 indexed valid point smallest manhattan distance current location multiple valid point smallest index valid point 1^10 manhattan distance two point x1 y1 x2 y2 ab x1 x2 ab y1 y2
minimum number operation make array element equal 1^10 0^10 indexed array nums consisiting positive integer following operation array number time select index 0^10 n^10 1^10 replace either nums nums 1^10 gcd value minimum number operation make element nums equal 1^10 impossible 1^10 gcd two integer greatest common divisor two integer
minimize maximum pair sum array pair sum pair b^10 equal b^10 maximum pair sum largest pair sum list pair example pair 1^10 5^10 2^10 3^10 4 4 maximum pair sum would max 1^10 5^10 2^10 3^10 4 4 max 6 5^10 8 8 array nums even length n^10 pair element nums n^10 2^10 pair element nums exactly one pair andthe maximum pair sum minimized minimized maximum pair sum optimally pairing element
champagne tower stack glass pyramid first row 1^10 glass second row 2^10 glass 100th row glass hold one cup champagne champagne poured first glass top topmost glass full excess liquid poured fall equally glass immediately left right glass become full excess champagne fall equally left right glass glass bottom row excess champagne fall floor example one cup champagne poured top glass full two cup champagne poured two glass second row half full three cup champagne poured two cup become full 3^10 full glass total four cup champagne poured third row middle glass half full two outside glass quarter full pictured pouring non negative integer cup champagne full jth glass ith row j 0^10 indexed
maximum matching player trainer 0^10 indexed integer array player player represents ability ith player also 0^10 indexed integer array trainer trainer j represents training capacity jth trainer ith player match jth trainer player ability le equal trainer training capacity additionally ith player matched one trainer jth trainer matched one player maximum number matchings player trainer satisfy condition
repeated string match two string b^10 minimum number time repeat string string b^10 substring impossible b^10 substring repeating 1^10 notice string abc repeated 0^10 time repeated 1^10 time abc repeated 2^10 time abcabc
longest uncommon subsequence ii array string strs length longest uncommon subsequence longest uncommon subsequence exist 1^10 uncommon subsequence array string string subsequence one string others subsequence string string obtained deleting number character example abc subsequence aebdc delete underlined character aebdc get abc subsequence aebdc include aebdc aeb empty string
search 2d matrix ii write efficient algorithm search value target x n^10 integer matrix matrix matrix following property integer row sorted ascending left right integer column sorted ascending top bottom
cherry pickup n^10 x n^10 grid representing field cherry cell one three possible integer 0^10 mean cell empty pas 1^10 mean cell contains cherry pick pas 1^10 mean cell contains thorn block way maximum number cherry collect following rule starting position 0^10 0^10 reaching n^10 1^10 n^10 1^10 moving right valid path cell cell value 0^10 1^10 reaching n^10 1^10 n^10 1^10 returning 0^10 0^10 moving left valid path cell passing path cell containing cherry pick cell becomes empty cell 0^10 valid path 0^10 0^10 n^10 1^10 n^10 1^10 cherry collected
minimum cost buying candy discount shop selling candy discount every two candy sold shop give third candy free customer choose candy take away free long cost chosen candy le equal minimum cost two candy bought example 4 candy cost 1^10 2^10 3^10 4 customer buy candy cost 2^10 3^10 take candy cost 1^10 free candy cost 4 0^10 indexed integer array cost cost denotes cost ith candy minimum cost buying candy
difference one zero row column 0^10 indexed x n^10 binary matrix grid 0^10 indexed x n^10 difference matrix diff created following procedure let number one ith row onesrowi let number one jth column onescolj let number zero ith row zerosrowi let number zero jth column zeroscolj diff j onesrowi onescolj zerosrowi zeroscoljreturn difference matrix diff
partition array disjoint interval integer array nums partition two contiguous subarrays left right every element left le equal every element right left right non empty left smallest possible size length left partitioning test case generated partitioning exists
hamming distance hamming distance two integer number position corresponding bit different two integer x hamming distance
longest nice substring string nice every letter alphabet contains appears uppercase lowercase example ababb nice appear b^10 b^10 appear however aba b^10 appears b^10 string longest substring nice multiple substring earliest occurrence none empty string
merge two 2d array summing value two 2d integer array nums1 nums2 nums1 idi vali indicate number id idi value equal vali nums2 idi vali indicate number id idi value equal vali array contains unique id sorted ascending order id merge two array one array sorted ascending order id respecting following condition id appear least one two array included resulting array id included value sum value id two array id exist one two array value array considered 0^10 resulting array returned array must sorted ascending order id
count prime integer n^10 number prime number strictly le n^10
count good meal good meal meal contains exactly two different food item sum deliciousness equal power two pick two different food make good meal array integer deliciousness deliciousness deliciousness ith item food number different good meal make list modulo 109 7^10 note item different index considered different even deliciousness value
determine winner bowling game two 0^10 indexed integer array player1 player2 represent number pin player 1^10 player 2^10 hit bowling game respectively bowling game consists n^10 turn number pin turn exactly 10^10 assume player hit xi pin ith turn value ith turn player 2xi player hit 10^10 pin previous two turn otherwise xi score player sum value n^10 turn return1 score player 1^10 score player 2^10 2^10 score player 2^10 score player 1^10 and0 case draw
implement magic dictionary design data structure initialized list different word provided string determine change exactly one character string match word data structure implement magicdictionary class magicdictionary initializes object void builddict string dictionary set data structure array distinct string dictionary bool search string searchword return true change exactly one character searchword match string data structure otherwise return false
minimum number work session finish task n^10 task assigned task time represented integer array task length n^10 ith task take task hour finish work session work sessiontime consecutive hour take break finish task way satisfies following condition start task work session must complete work session start new task immediately finishing previous one may complete task order task sessiontime minimum number work session needed finish task following condition test generated sessiontime greater equal maximum element task
maximum star sum graph undirected graph consisting n^10 node numbered 0^10 n^10 1^10 0^10 indexed integer array vals length n^10 vals denotes value ith node also 2d integer array edge edge ai bi denotes exists undirected edge connecting node ai bi star graph subgraph graph center node containing 0^10 neighbor word subset edge graph exists common node edge image show star graph 3^10 4 neighbor respectively centered blue node star sum sum value node present star graph integer k^10 maximum star sum star graph containing k^10 edge
make number distinct character equal two 0^10 indexed string word1 word2 move consists choosing two index j 0^10 word1 length 0^10 j word2 length swapping word1 word2 j true possible get number distinct character word1 word2 equal exactly one move false otherwise
maximum point archery competition alice bob opponent archery competition competition set following rule alice first shoot numarrows arrow bob shoot numarrows arrow point calculated follows target integer scoring section ranging 0^10 11 inclusive section target score k^10 0^10 11 say alice bob shot ak bk arrow section respectively ak bk alice take k^10 point ak bk bob take k^10 point however ak bk 0^10 nobody take k^10 point example alice bob shot 2^10 arrow section score 11 alice take 11 point hand alice shot 0^10 arrow section score 11 bob shot 2^10 arrow section bob take 11 point integer numarrows integer array alicearrows size 12 represents number arrow alice shot scoring section 0^10 11 bob want maximize total number point obtain array bobarrows represents number arrow bob shot scoring section 0^10 11 sum value bobarrows equal numarrows multiple way bob earn maximum total point one
minimum swap group 1^10 together ii swap defined taking two distinct position array swapping value circular array defined array consider first element last element adjacent binary circular array nums minimum number swap required group 1^10 present array together location
finding mk average two integer k^10 stream integer tasked implement data structure calculates mkaverage stream mkaverage calculated using^10 step number element stream le consider mkaverage 1^10 otherwise copy last element stream separate container remove smallest k^10 element largest k^10 element container calculate average value rest element rounded nearest integer implement mkaverage class mkaverage int int k^10 initializes mkaverage object empty stream two integer k^10 void addelement int num insert new element num stream int calculatemkaverage calculates return mkaverage current stream rounded nearest integer
minimum operation halve array sum array nums positive integer one operation choose number nums reduce exactly half number note may choose reduced number future operation minimum number operation reduce sum nums least half
many number smaller current number array nums nums find many number array smaller nums count number valid j j nums j nums answer array
average waiting time restaurant single chef array customer customer arrivali timei arrivali arrival time ith customer arrival time sorted non decreasing order timei time needed prepare order ith customer customer arrives give chef order chef start preparing idle customer wait till chef finish preparing order chef prepare food one customer time chef prepares food customer order input average waiting time customer solution within 10^10 5^10 actual answer considered accepted
capitalize title string title consisting one word separated single space word consists english letter capitalize string changing capitalization word length word 1^10 2^10 letter change letter lowercase otherwise change first letter uppercase remaining letter lowercase capitalized title
game play analysis iv sql schematable activity column name type player_id int device_id int event_date date games_played int player_id event_date primary key table table show activity player game row record player logged played number game possibly 0^10 logging someday using^10 device write sql query report fraction player logged day day first logged rounded 2^10 decimal place word need count number player logged least two consecutive day starting first login date divide number total number player query result format following example
convert number hexadecimal integer num string representing hexadecimal representation negative integer two ’ complement method used letter answer string lowercase character leading zero answer except zero note allowed^10 use built library method directly solve problem
maximize number nice divisor positive integer primefactors asked construct positive integer n^10 satisfies following condition number prime factor n^10 necessarily distinct primefactors number nice divisor n^10 maximized note divisor n^10 nice divisible every prime factor n^10 example n^10 12 prime factor 2^10 2^10 3^10 6 12 nice divisor 3^10 4 number nice divisor n^10 number large modulo 109 7^10 note prime number natural number greater 1^10 product two smaller natural number prime factor number n^10 list prime number product equal n^10
maximum number integer choose range integer array banned two integer n^10 maxsum choosing number integer following rule chosen integer range 1^10 n^10 integer chosen chosen integer array banned sum chosen integer exceed maxsum maximum number integer choose following mentioned rule
day year string date representing gregorian calendar date formatted yyyy mm dd day number year
maximum number group getting fresh donut donut shop bakes donut batch batchsize rule must serve donut batch serving donut next batch integer batchsize integer array group group denotes group group customer visit shop customer get exactly one donut group visit shop customer group must served serving following group group happy get fresh donut first customer group receive donut left previous group freely rearrange ordering group maximum possible number happy group rearranging group
encrypt decrypt string character array key containing unique character string array value containing string length 2^10 also another string array dictionary contains permitted original string decryption implement data structure encrypt decrypt 0^10 indexed string string encrypted following process character c^10 string find index satisfying key c^10 key replace c^10 value string note case character string present key encryption process cannot carried empty string returned string decrypted following process substring length 2^10 occurring even index string find value multiple valid choose one mean string could multiple possible string decrypt replace key string implement encrypter class encrypter char key string value string dictionary initializes encrypter class key value dictionary string encrypt string word1 encrypts word1 encryption process described return encrypted string int decrypt string word2 return number possible string word2 could decrypt also appear dictionary
subrectangle query implement class subrectanglequeries receives row x col rectangle matrix integer constructor support two method 1^10 updatesubrectangle int row1 int col1 int row2 int col2 int newvalue update value newvalue subrectangle whose upper left coordinate row1 col1 bottom right coordinate row2 col2 2^10 getvalue int row int col return current value coordinate row col rectangle
count element strictly smaller greater element integer array nums number element strictly smaller strictly greater element appear nums
maximum difference remapping digit integer num know danny mittal sneakily remap one 10^10 possible digit 0^10 9 another digit difference maximum minimum value danny make remapping exactly one digit num note danny remaps digit d1 another digit d2 danny replaces occurrence d1 num d2 danny remap digit case num change danny remap different digit obtaining minimum maximum value respectively resulting number remapping contain leading zero mentioned danny mittal congratulate top 10^10 weekly contest 326
sequentially ordinal rank tracker scenic location represented name attractiveness score name unique string among location score integer location ranked best worst higher score better location score two location equal location lexicographically smaller name better building system track ranking location system initially starting location support adding scenic location one time querying ith best location location already added number time system queried including current query example system queried 4th time return 4th best location location already added note test data generated time number query exceed number location added system implement sortracker class sortracker initializes tracker system void add string name int score add scenic location name score system string get query return ith best location number time method invoked including invocation
non decreasing array array nums n^10 integer task check could become non decreasing modifying one element define array non decreasing nums nums 1^10 hold every 0^10 based 0^10 n^10 2^10
minimum number move seat everyone n^10 seat n^10 student room array seat length n^10 seat position ith seat also array student length n^10 student j position jth student may perform following move number time increase decrease position ith student 1^10 e moving ith student position x x 1^10 x 1^10 minimum number move required move student seat two student seat note may multiple seat student position beginning
difference element sum digit sum array positive integer array nums element sum sum element nums digit sum sum digit necessarily distinct appear nums absolute difference element sum digit sum nums note absolute difference two integer x defined x
maximum absolute value expression two array integer equal length maximum value arr1 arr1 j arr2 arr2 j j maximum taken 0^10 j arr1 length
circular permutation binary representation 2^10 integer n^10 start task permutation p 0^10 1^10 2^10 2^10 n^10 1^10 p 0^10 startp p 1^10 differ one bit binary representation p 0^10 p 2^10 n^10 1^10 must also differ one bit binary representation
kth^10 largest sum binary tree root binary tree positive integer k^10 level sum tree sum value node level kth^10 largest level sum tree necessarily distinct fewer k^10 level tree 1^10 note two node level distance root
stone game vi alice bob take turn playing game alice starting first n^10 stone pile player turn remove stone pile receive point based stone value alice bob may value stone differently two integer array length n^10 alicevalues bobvalues alicevalues bobvalues represents alice bob respectively value ith stone winner person point stone chosen player amount point game result draw player play optimally player know value determine result game alice win 1^10 bob win 1^10 game result draw 0^10
time network becomes idle network n^10 server labeled 0^10 n^10 1^10 2d integer array edge edge ui vi indicates message channel server ui vi pas number message directly one second also 0^10 indexed integer array patience length n^10 server connected e message passed one server server directly indirectly message channel server labeled 0^10 master server rest data server data server need send message master server processing wait reply message move server optimally every message take least amount time arrive master server master server process newly arrived message instantly send reply originating server via reversed path message gone beginning second 0^10 data server sends message processed starting second 1^10 beginning every second data server check received reply message sent including newly arrived reply master server resend message periodically data server resend message every patience second e data server resend message patience second elapsed last time message sent server otherwise resending occur server network becomes idle message passing server arriving server earliest second starting network becomes idle
word pattern pattern string find follows pattern follow mean full match bijection letter pattern non empty word
reverse bit reverse bit 32 bit unsigned integer note note language java unsigned integer type case input output signed integer type affect implementation integer internal binary representation whether signed unsigned
exclusive time function single threaded cpu execute program containing n^10 function function unique id 0^10 n^10 1^10 function call stored call stack function call start id pushed onto stack function call end id popped stack function whose id top stack current function executed time function start end write log id whether started ended timestamp list log log represents ith log message formatted string function_id start end timestamp example 0^10 start 3^10 mean function call function id 0^10 started beginning timestamp 3^10 1^10 end 2^10 mean function call function id 1^10 ended end timestamp 2^10 note function called multiple time possibly recursively function exclusive time sum execution time function call program example function called twice one call executing 2^10 time unit another call executing 1^10 time unit exclusive time 2^10 1^10 3^10 exclusive time function array value ith index represents exclusive time function id
maximum product length two palindromic substring 0^10 indexed string tasked finding two non intersecting palindromic substring odd length product length maximized formally want choose four integer j k^10 l 0^10 j k^10 l length substring j k^10 l palindrome odd length j denotes substring index index j inclusive maximum possible product length two non intersecting palindromic substring palindrome string forward backward substring contiguous sequence character string
minimum non zero product array element positive integer p consider array nums 1^10 indexed consists integer inclusive range 1^10 2p 1^10 binary representation allowed^10 following operation number time choose two element x nums choose bit x swap corresponding bit corresponding bit refers bit position integer example x 1101 0011 swapping 2nd bit right x 1111 0001 find minimum non zero product nums performing operation number time product modulo 109 7^10 note answer minimum product modulo operation done
check 1^10 least length k^10 place away binary array nums integer k^10 true 1^10 least k^10 place away otherwise false
closest subsequence sum integer array nums integer goal want choose subsequence nums sum element closest possible goal sum subsequence element sum want minimize absolute difference ab sum goal minimum possible value ab sum goal note subsequence array array formed removing element possibly none original array
keep multiplying found value two array integer nums also integer original first number need searched nums following step original found nums multiply two e set original 2^10 original otherwise stop process repeat process new number long keep finding number final value original
count number unique digit integer n^10 count number unique digit x 0^10 x 10n
reconstruct itinerary list airline ticket ticket fromi toi represent departure arrival airport one flight reconstruct itinerary order ticket belong man departs jfk thus itinerary must begin jfk multiple valid itinerary itinerary smallest lexical order read single string example itinerary jfk lga smaller lexical order jfk lgb may assume ticket form least one valid itinerary must use ticket
coin change integer array coin representing coin different denomination integer amount representing total amount money fewest number coin need make amount amount money cannot made combination coin 1^10 may assume infinite number kind coin
sum square number non negative integer c^10 decide whether two integer b^10 a2 b2 c^10
reward top k^10 student two string array positive_feedback negative_feedback containing word denoting positive negative feedback respectively note word positive negative initially every student 0^10 point positive word feedback report increase point student 3^10 whereas negative word decrease point 1^10 n^10 feedback report represented 0^10 indexed string array report 0^10 indexed integer array student_id student_id represents id student received feedback report report id student unique integer k^10 top k^10 student ranking non increasing order point case one student point one lower id rank higher
place flower long flowerbed plot planted however flower cannot planted adjacent plot integer array flowerbed containing 0^10 1^10 0^10 mean empty 1^10 mean empty integer n^10 true n^10 new flower planted flowerbed without^10 violating adjacent flower rule false otherwise
sale person sql schematable salesperson column name type sales_id int name varchar salary int commission_rate int hire_date date sales_id primary key column table row table indicates name id salesperson alongside salary commission rate hire date table company column name type com_id int name varchar city varchar com_id primary key column table row table indicates name id company city company located table order column name type order_id int order_date date com_id int sales_id int amount int order_id primary key column table com_id foreign key com_id company table sales_id foreign key sales_id salesperson table row table contains information one order includes id company id salesperson date order amount paid write sql query report name salesperson order related company name red result table order query result format following example
minimum round complete task 0^10 indexed integer array task task represents difficulty level task round complete either 2^10 3^10 task difficulty level minimum round required complete task 1^10 possible complete task
minimum number operation make string sorted string 0^10 indexed asked perform following operation get sorted string find largest index 1^10 length 1^10 find largest index j j length k^10 1^10 possible value k^10 range j inclusive swap two character index 1^10 j reverse suffix starting index number operation needed make string sorted answer large modulo 109 7^10
largest plus sign integer n^10 n^10 x n^10 binary grid grid value initially 1^10 except index array mine ith element array mine defined mine xi yi grid xi yi 0^10 order largest axis aligned plus sign 1^10 contained grid none 0^10 axis aligned plus sign 1^10 order k^10 center grid c^10 1^10 along four arm length k^10 1^10 going left right made 1^10 note could 0^10 1^10 beyond arm plus sign relevant area plus sign checked 1^10
unique length 3^10 palindromic subsequence string number unique palindrome length three subsequence note even multiple way obtain subsequence still counted palindrome string read forward backwards subsequence string new string generated original string character none deleted without^10 changing relative order remaining character example ace subsequence abcde
minimum number operation make array similar two positive integer array nums target length one operation choose two distinct index j 0^10 j nums length set nums nums 2^10 andset nums j nums j 2^10 two array considered similar frequency element minimum number operation required make nums similar target test case generated nums always similar target
data stream disjoint interval data stream input non negative integer a1 a2 summarize number seen far list disjoint interval implement summaryranges class summaryranges initializes object empty stream void addnum int value add integer value stream int getintervals return summary integer stream currently list disjoint interval starti endi answer sorted starti
maximum number event attended ii array event event startdayi enddayi valuei ith event start startdayi end enddayi attend event receive value valuei also integer k^10 represents maximum number event attend attend one event time choose attend event must attend entire event note end day inclusive cannot attend two event one start end day maximum sum value receive attending event
maximum product three number integer array nums find three number whose product maximum maximum product
design circular deque design implementation circular double ended queue deque implement mycirculardeque class mycirculardeque int k^10 initializes deque maximum size k^10 boolean insertfront add item front deque return true operation successful false otherwise boolean insertlast add item rear deque return true operation successful false otherwise boolean deletefront deletes item front deque return true operation successful false otherwise boolean deletelast deletes item rear deque return true operation successful false otherwise int getfront return front item deque return 1^10 deque empty int getrear return last item deque return 1^10 deque empty boolean isempty return true deque empty false otherwise boolean isfull return true deque full false otherwise
number dice roll target sum n^10 dice die k^10 face numbered 1^10 k^10 three integer n^10 k^10 target number possible way kn total way roll dice sum face number equal target answer may large modulo 109 7^10
rle iterator use run length encoding e rle encode sequence integer run length encoded array even length encoding 0^10 indexed even encoding tell u number time non negative integer value encoding 1^10 repeated sequence example sequence arr 8 8 8 5^10 5^10 encoded encoding 3^10 8 2^10 5^10 encoding 3^10 8 0^10 9 2^10 5^10 encoding 2^10 8 1^10 8 2^10 5^10 also valid rle arr run length encoded array design iterator iterates implement rleiterator class rleiterator int encoded initializes object encoded array encoded int next int n^10 exhaust next n^10 element return last element exhausted way element left exhaust 1^10 instead
reducing dish chef collected data satisfaction level n^10 dish chef cook dish 1^10 unit time like time coefficient dish defined time taken cook dish including previous dish multiplied satisfaction level e time satisfaction maximum sum like time coefficient chef obtain dish preparation dish prepared order chef discard dish get maximum value
minimum total space wasted k^10 resizing operation currently designing dynamic array 0^10 indexed integer array nums nums number element array time addition integer k^10 maximum number time resize array size size array time sizet must least nums need enough space array hold element space wasted time defined sizet nums total space wasted sum space wasted across every time 0^10 nums length minimum total space wasted resize array k^10 time note array size start count towards number resizing operation
remove zero sum consecutive node linked list head linked list repeatedly delete consecutive sequence node sum 0^10 sequence head final linked list may answer note example sequence serialization listnode object
check original string exists two encoded string original string consisting lowercase english letter encoded following step arbitrarily split sequence number non empty substring arbitrarily choose element possibly none sequence replace length numeric string concatenate sequence encoded string example one way encode original string abcdefghijklmnop might split sequence ab cdefghijklmn p choose second third element replaced length respectively sequence becomes ab 12 1^10 p concatenate element sequence get encoded string ab121p two encoded string s1 s2 consisting lowercase english letter digit 1^10 9 inclusive true exists original string could encoded s1 s2 otherwise false note test case generated number consecutive digit s1 s2 exceed 3^10
path maximum probability undirected weighted graph n^10 node 0^10 indexed represented edge list edge b^10 undirected edge connecting node b^10 probability success traversing edge succprob two node start end find path maximum probability success go start end success probability path start end 0^10 answer accepted differs correct answer 1e 5^10
smallest good base integer n^10 represented string smallest good base n^10 call k^10 2^10 good base n^10 digit n^10 base k^10 1^10
dining philosopher five silent philosopher sit round table bowl spaghetti fork placed pair adjacent philosopher philosopher must alternately think eat however philosopher eat spaghetti left right fork fork held one philosopher philosopher use fork used another philosopher individual philosopher finish eating need put fork fork become available others philosopher take fork right one left become available cannot start eating getting fork eating limited remaining amount spaghetti stomach space infinite supply infinite demand assumed design discipline behaviour concurrent algorithm philosopher starve e forever continue alternate eating thinking assuming philosopher know others may want eat think problem statement image taken wikipedia orgthe philosopher id numbered 0^10 4 clockwise order implement function void wantstoeat philosopher pickleftfork pickrightfork eat putleftfork putrightfork philosopher id philosopher want eat pickleftfork pickrightfork function call pick corresponding fork philosopher eat function call let philosopher eat picked fork putleftfork putrightfork function call put corresponding fork philosopher philosopher assumed thinking long asking eat function called number five thread representing philosopher simultaneously use one object class simulate process function may called philosopher even last call end
number way buy pen pencil integer total indicating amount money also two integer cost1 cost2 indicating price pen pencil respectively spend part money buy multiple quantity none kind writing utensil number distinct way buy number pen pencil
number full round played participating online chess tournament chess round start every 15 minute first round day start 00 00 every 15 minute new round start example second round start 00 15 fourth round start 00 45 seventh round start 01^10 30^10 two string logintime logouttime logintime time login game andlogouttime time logout game logouttime earlier logintime mean played logintime midnight midnight logouttime number full chess round played tournament note time follow 24^10 hour clock mean first round day start 00 00 last round day start 23 45
balance binary search tree root binary search tree balanced binary search tree node value one answer binary search tree balanced depth two subtrees every node never differs 1^10
russian doll envelope 2d array integer envelope envelope wi hi represents width height envelope one envelope fit another width height one envelope greater envelope width height maximum number envelope russian doll e put one inside note cannot rotate envelope
maximum length pair chain array n^10 pair pair pair lefti righti lefti righti pair p2 c^10 follows pair p1 b^10 b^10 c^10 chain pair formed fashion length longest chain formed need use interval select pair order
binary tree postorder traversal root binary tree postorder traversal node value
maximize palindrome length subsequence two string word1 word2 want construct string following manner choose non empty subsequence subsequence1 word1 choose non empty subsequence subsequence2 word2 concatenate subsequence subsequence1 subsequence2 make string length longest palindrome constructed described manner palindrome constructed 0^10 subsequence string string made deleting possibly none character without^10 changing order remaining character palindrome string read forward backward
check word valid substitution string determine valid string valid starting empty string transform performing following operation number time insert string abc position formally becomes tleft abc tright tleft tright note tleft tright may empty true valid string otherwise false
subarray sum equal k^10 array integer nums integer k^10 total number subarrays whose sum equal k^10 subarray contiguous non empty sequence element within array
flatten multilevel doubly linked list doubly linked list contains node next pointer previous pointer additional child pointer child pointer may may point separate doubly linked list also containing special node child list may one child produce multilevel data structure shown example head first level list flatten list node appear single level doubly linked list let curr node child list node child list appear curr curr next flattened list head flattened list node list must child pointer set null
find longest awesome substring string awesome substring non empty substring make number swap order make palindrome length maximum length awesome substring
divide array set k^10 consecutive number array integer nums positive integer k^10 check whether possible divide array set k^10 consecutive number true possible otherwise false
valid palindrome ii string true palindrome deleting one character
combination sum iv array distinct integer nums target integer target number possible combination add target test case generated answer fit 32 bit integer
minimum number day make bouquet integer array bloomday integer integer k^10 want make bouquet make bouquet need use k^10 adjacent flower garden garden consists n^10 flower ith flower bloom bloomday used exactly one bouquet minimum number day need wait able make bouquet garden impossible make bouquet 1^10
graph bipartite undirected graph n^10 node node numbered 0^10 n^10 1^10 2d array graph graph u array node node u adjacent formally v graph u undirected edge node u node v graph following property self edge graph u contain u parallel edge graph u contain duplicate value v graph u u graph v graph undirected graph may connected meaning may two node u v path graph bipartite node partitioned two independent set b^10 every edge graph connects node set node set b^10 true bipartite
populating next right pointer node ii binary treestruct node int val node left node right node next populate next pointer point next right node next right node next pointer set null initially next pointer set null
battleship board x n^10 matrix board cell battleship x empty number battleship board battleship placed horizontally vertically board word made shape 1^10 x k^10 1^10 row k^10 column k^10 x 1^10 k^10 row 1^10 column k^10 size least one horizontal vertical cell separate two battleship e adjacent battleship
matrix cell distance order four integer row col rcenter ccenter row x col matrix cell coordinate rcenter ccenter coordinate cell matrix sorted distance rcenter ccenter smallest distance largest distance may answer order satisfies condition distance two cell r1 c1 r2 c2 r1 r2 c1 c2
left right sum difference 0^10 indexed integer array nums find 0^10 indexed integer array answer answer length nums length answer leftsum rightsum leftsum sum element left index array nums element leftsum 0^10 rightsum sum element right index array nums element rightsum 0^10 array answer
number way reorder array get bst array nums represents permutation integer 1^10 n^10 going construct binary search tree bst inserting element nums order initially empty bst find number different way reorder nums constructed bst identical formed original array nums example nums 2^10 1^10 3^10 2^10 root 1^10 left child 3^10 right child array 2^10 3^10 1^10 also yield bst 3^10 2^10 1^10 yield different bst number way reorder nums bst formed identical original bst formed nums answer may large modulo 109 7^10
stamping grid x n^10 binary matrix grid cell either 0^10 empty 1^10 occupied stamp size stampheight x stampwidth want fit stamp follow restriction requirement cover empty cell cover occupied cell put many stamp want stamp overlap stamp allowed^10 rotated stamp must stay completely inside grid true possible fit stamp following restriction requirement otherwise false
broken calculator broken calculator integer startvalue display initially one operation multiply number display 2^10 orsubtract 1^10 number display two integer startvalue target minimum number operation needed display target calculator
last person fit bus sql schematable queue column name type person_id int person_name varchar weight int turn int person_id primary key column table table information people waiting bus person_id turn column contain number 1^10 n^10 n^10 number row table turn determines order people board bus turn 1^10 denotes first person board turn n^10 denotes last person board weight weight person kilogram queue people waiting board bus however bus weight limit 1000 kilogram may people cannot board write sql query find person_name last person fit bus without^10 exceeding weight limit test case generated first person exceed weight limit query result format following example
maximum sum obtained permutation array integer nums array request request starti endi ith request asks sum nums starti nums starti 1^10 nums endi 1^10 nums endi starti endi 0^10 indexed maximum total sum request among permutation nums answer may large modulo 109 7^10
string compression array character char compress using^10 following algorithm begin empty string group consecutive repeating character char group length 1^10 append character otherwise append character followed group length compressed string returned separately instead stored input character array char note group length 10^10 longer split multiple character char done modifying input array new length array must write algorithm us constant extra space
restaurant growth sql schematable customer column name type customer_id int name varchar visited_on date amount int customer_id visited_on primary key table table contains data customer transaction restaurant visited_on date customer id customer_id visited restaurant amount total paid customer restaurant owner want analyze possible expansion least one customer every day write sql query compute moving average much customer paid seven day window e current day 6 day average_amount rounded two decimal place result table ordered visited_on ascending order query result format following example
print binary tree root binary tree construct 0^10 indexed x n^10 string matrix re represents formatted layout tree formatted layout matrix constructed using^10 following rule height tree height number row equal height 1^10 number column n^10 equal 2height 1^10 1^10 place root node middle top row formally location re 0^10 n^10 1^10 2^10 node placed matrix position re c^10 place left child re 1^10 c^10 2height 1^10 right child re 1^10 c^10 2height 1^10 continue process node tree placed empty cell contain empty string constructed matrix re
count word obtained adding letter two 0^10 indexed array string startwords targetwords string consists lowercase english letter string targetwords check possible choose string startwords perform conversion operation equal targetwords conversion operation described following two step append lowercase letter present string end example string abc letter e added added resulting string abcd rearrange letter new string arbitrary order example abcd rearranged acbd bacd cbda note also rearranged abcd number string targetwords obtained performing operation string startwords note verifying string targetwords obtained string startwords performing operation string startwords actually change process
course schedule iii n^10 different online course numbered 1^10 n^10 array course course durationi lastdayi indicate ith course taken continuously durationi day must finished lastdayi start 1st day cannot take two course simultaneously maximum number course take
merge two sorted list head two sorted linked list list1 list2 merge two list one sorted list list made splicing together node first two list head merged linked list
splitting string descending consecutive value string consists digit check split two non empty substring numerical value substring descending order difference numerical value every two adjacent substring equal 1^10 example string 0090089 split 0090 089 numerical value 90 89 value descending order adjacent value differ 1^10 way valid another example string 001 split 0^10 01^10 00 1^10 0^10 0^10 1^10 however way invalid numerical value 0^10 1^10 0^10 1^10 0^10 0^10 1^10 respectively descending order true possible split described false otherwise substring contiguous sequence character string
construct binary search tree preorder traversal array integer preorder represents preorder traversal bst e binary search tree construct tree root guaranteed always possible find binary search tree requirement test case binary search tree binary tree every node descendant node left value strictly le node val descendant node right value strictly greater node val preorder traversal binary tree display value node first traverse node left traverse node right
find minimum number fibonacci number whose sum k^10 integer k^10 minimum number fibonacci number whose sum equal k^10 fibonacci number used multiple time fibonacci number defined f1 1f2 1fn fn 1^10 fn 2^10 n^10 2^10 guaranteed constraint always find fibonacci number sum k^10
maximum sum bst binary tree binary tree root maximum sum key sub tree also binary search tree bst assume bst defined follows left subtree node contains node key le node key right subtree node contains node key greater node key left right subtrees must also binary search tree
design number container system design number container system following insert replace number index system smallest index number system implement numbercontainers class numbercontainers initializes number container system void change int index int number fill container index number already number index replace int find int number return smallest index number 1^10 index filled number system
minimum path cost grid 0^10 indexed x n^10 integer matrix grid consisting distinct integer 0^10 n^10 1^10 move matrix cell cell next row cell x x 1^10 move cell x 1^10 0^10 x 1^10 1^10 x 1^10 n^10 1^10 note possible move cell last row possible move cost 0^10 indexed 2d array movecost size n^10 x n^10 movecost j cost moving cell value cell column j next row cost moving cell last row grid ignored cost path grid sum value cell visited plus sum cost move made minimum cost path start cell first row end cell last row
surface area 3d shape n^10 x n^10 grid placed 1^10 x 1^10 x 1^10 cube value v grid j represents tower v cube placed top cell j placing cube decided glue directly adjacent cube forming several irregular 3d shape total surface area resulting shape note bottom face shape count toward surface area
maximum binary tree integer array nums duplicate maximum binary tree built recursively nums using^10 following algorithm create root node whose value maximum value nums recursively build left subtree subarray prefix left maximum value recursively build right subtree subarray suffix right maximum value maximum binary tree built nums
plus one large integer represented integer array digit digit ith digit integer digit ordered significant least significant left right order large integer contain leading 0^10 increment large integer one resulting array digit
maximal score applying k^10 operation 0^10 indexed integer array nums integer k^10 starting score 0^10 one operation choose index 0^10 nums length increase score nums andreplace nums ceil nums 3^10 maximum possible score attain applying exactly k^10 operation ceiling function ceil val least integer greater equal val
mean array removing element integer array arr mean remaining integer removing smallest 5^10 largest 5^10 element answer within 10^10 5^10 actual answer considered accepted
find value mysterious function closest target winston mysterious function func integer array arr integer target want find value l make value func arr l target minimum possible minimum possible value func arr l target notice func called value l 0^10 l arr length
destroy sequential target 0^10 indexed array nums consisting positive integer representing target number line also integer space machine destroy target seeding machine nums allows destroy target value represented nums c^10 space c^10 non negative integer want destroy maximum number target nums minimum value nums seed machine destroy maximum number target
concatenation array integer array nums length n^10 want create array an^10 length 2n an^10 nums an^10 n^10 nums 0^10 n^10 0^10 indexed specifically an^10 concatenation two nums array array an^10
sum beauty substring beauty string difference frequency frequent least frequent character example beauty abaacc 3^10 1^10 2^10 string sum beauty substring
smallest index equal value 0^10 indexed integer array nums smallest index nums mod 10^10 nums 1^10 index exist x mod denotes remainder x divided
shortest distance target string circular array 0^10 indexed circular string array word string target circular array mean array end connects array beginning formally next element word word 1^10 n^10 previous element word word 1^10 n^10 n^10 n^10 length word starting startindex move either next word previous word 1^10 step time shortest distance needed reach string target string target exist word 1^10
remove colored piece neighbor color n^10 piece arranged line piece colored either b^10 string color length n^10 color color ith piece alice bob playing game take alternating turn removing piece line game alice move first alice allowed^10 remove piece colored neighbor also colored allowed^10 remove piece colored b^10 bob allowed^10 remove piece colored b^10 neighbor also colored b^10 allowed^10 remove piece colored alice bob cannot remove piece edge line player cannot make move turn player loses player win assuming alice bob play optimally true alice win false bob win
make xor segment equal zero array nums integer k^10 xor segment left right left right xor element index left right inclusive nums left xor nums left 1^10 xor xor nums right minimum number element change array xor segment size k^10 equal zero
k^10 radius subarray average 0^10 indexed array nums n^10 integer integer k^10 k^10 radius average subarray nums centered index radius k^10 average element nums index k^10 k^10 inclusive le k^10 element index k^10 radius average 1^10 build array avgs length n^10 avgs k^10 radius average subarray centered index average x element sum x element divided x using^10 integer division integer division truncates toward zero mean losing fractional part example average four element 2^10 3^10 1^10 5^10 2^10 3^10 1^10 5^10 4 11 4 2^10 75 truncates 2^10
removing star string string contains star one operation choose star remove closest non star character left remove star string star removed note input generated operation always possible shown resulting string always unique
minimize maximum two array two array arr1 arr2 initially empty need add positive integer satisfy following condition arr1 contains uniquecnt1 distinct positive integer divisible divisor1 arr2 contains uniquecnt2 distinct positive integer divisible divisor2 integer present arr1 arr2 divisor1 divisor2 uniquecnt1 uniquecnt2 minimum possible maximum integer present either array
count valid pickup delivery option n^10 order order consist pickup delivery service count valid pickup delivery possible sequence delivery always pickup answer may large modulo 10^10 9 7^10
maximum number removable character two string p p subsequence also distinct 0^10 indexed integer array removable containing subset index also 0^10 indexed want choose integer k^10 0^10 k^10 removable length removing k^10 character using^10 first k^10 index removable p still subsequence formally mark character removable 0^10 k^10 remove marked character check p still subsequence maximum k^10 choose p still subsequence removal subsequence string new string generated original string character none deleted without^10 changing relative order remaining character
k^10 weakest row matrix x n^10 binary matrix mat 1^10 representing soldier 0^10 representing civilian soldier positioned front civilian 1^10 appear left 0^10 row row weaker row j one following true number soldier row le number soldier row j row number soldier j index k^10 weakest row matrix ordered weakest strongest
count subarrays median k^10 array nums size n^10 consisting distinct integer 1^10 n^10 positive integer k^10 number non empty subarrays nums median equal k^10 note median array middle element sorting array ascending order array even length median left middle element example median 2^10 3^10 1^10 4 2^10 median 8 4 3^10 5^10 1^10 4 subarray contiguous part array
valid triangle number integer array nums number triplet chosen array make triangle take side length triangle
employee worked longest task n^10 employee unique id 0^10 n^10 1^10 2d integer array log log idi leavetimei idi id employee worked ith task andleavetimei time employee finished ith task value leavetimei unique note ith task start moment right 1^10 th task end 0th task start time 0^10 id employee worked task longest time tie two employee smallest id among
longest subsequence repeated k^10 time string length n^10 integer k^10 tasked find longest subsequence repeated k^10 time string subsequence string derived another string deleting character without^10 changing order remaining character subsequence seq repeated k^10 time string seq k^10 subsequence seq k^10 represents string constructed concatenating seq k^10 time example bba repeated 2^10 time string bababcba string bbabba constructed concatenating bba 2^10 time subsequence string bababcba longest subsequence repeated k^10 time string multiple subsequence found lexicographically largest one subsequence empty string
stone game iii alice bob continue game pile stone several stone arranged row stone associated value integer array stonevalue alice bob take turn alice starting first player turn player take 1^10 2^10 3^10 stone first remaining stone row score player sum value stone taken score player 0^10 initially objective game end highest score winner player highest score could tie game continues stone taken assume alice bob play optimally alice alice win bob bob win tie end game score
count collision road n^10 car infinitely long road car numbered 0^10 n^10 1^10 left right car present unique point 0^10 indexed string direction length n^10 direction either l denoting whether ith car moving towards left towards right staying current point respectively moving car speed number collision calculated follows two car moving opposite direction collide number collision increase 2^10 moving car collides stationary car number collision increase 1^10 collision car involved longer move stay point collided car cannot change state direction motion total number collision happen road
largest odd number string string num representing large integer largest valued odd integer string non empty substring num empty string odd integer exists substring contiguous sequence character within string
arranging coin n^10 coin want build staircase coin staircase consists k^10 row ith row exactly coin last row staircase may incomplete integer n^10 number complete row staircase build
truncate sentence sentence list word separated single space leading trailing space word consists uppercase lowercase english letter punctuation example hello world hello hello world hello world sentence sentence integer k^10 want truncate contains first k^10 word truncating
count pair xor range 0^10 indexed integer array nums two integer low high number nice pair nice pair pair j 0^10 j nums length low nums xor nums j high
wiggle subsequence wiggle sequence sequence difference successive number strictly alternate positive negative first difference one exists may either positive negative sequence one element sequence two non equal element trivially wiggle sequence example 1^10 7^10 4 9 2^10 5^10 wiggle sequence difference 6 3^10 5^10 7^10 3^10 alternate positive negative contrast 1^10 4 7^10 2^10 5^10 1^10 7^10 4 5^10 5^10 wiggle sequence first first two difference positive second last difference zero subsequence obtained deleting element possibly zero original sequence leaving remaining element original order integer array nums length longest wiggle subsequence nums
design stack increment operation design stack support increment operation element implement customstack class customstack int maxsize initializes object maxsize maximum number element stack void push int x add x top stack stack reached maxsize int pop pop return top stack 1^10 stack empty void inc int k^10 int val increment bottom k^10 element stack val le k^10 element stack increment element stack
delete duplicate folder system due bug many duplicate folder file system 2d array path path array representing absolute path ith folder file system example one two three represents path one two three two folder necessarily level identical contain non empty set identical subfolders underlying subfolder structure folder need root level identical two folder identical mark folder subfolders example folder b^10 file structure identical subfolders marked x x z b^10 b^10 x b^10 x b^10 zhowever file structure also included path b^10 w folder b^10 would identical note x b^10 x would still considered identical even added folder identical folder subfolders marked file system delete file system run deletion folder become identical initial deletion deleted 2d array an^10 containing path remaining folder deleting marked folder path may returned order
add two integer two integer num1 num2 sum two integer
minimum time complete task computer run unlimited number task time 2d integer array task task starti endi durationi indicates ith task run total durationi second necessarily continuous within inclusive time range starti endi may turn computer need run task also turn idle minimum time computer turned complete task
maximum genetic difference query rooted tree consisting n^10 node numbered 0^10 n^10 1^10 node number denotes unique genetic value e genetic value node x x genetic difference two genetic value defined bitwise xor value integer array parent parent parent node node x root tree parent x 1^10 also array query query nodei vali query find maximum genetic difference vali pi pi genetic value node path nodei root including nodei root formally want maximize vali xor pi array an^10 an^10 answer ith query
text justification array string word width maxwidth format text line exactly maxwidth character fully left right justified pack word greedy approach pack many word line pad extra space necessary line exactly maxwidth character extra space word distributed evenly possible number space line divide evenly word empty slot left assigned space slot right last line text left justified extra space inserted word note word defined character sequence consisting non space character word length guaranteed greater 0^10 exceed maxwidth input array word contains least one word
next greater element ii circular integer array nums e next element nums nums length 1^10 nums 0^10 next greater number every element nums next greater number number x first greater number traversing order next array mean could search circularly find next greater number exist 1^10 number
last substring lexicographical order string last substring lexicographical order
invert binary tree root binary tree invert tree root
increasing triplet subsequence integer array nums true exists triple index j k^10 j k^10 nums nums j nums k^10 index exists false
employee importance data structure employee information including employee unique id importance value direct subordinate id array employee employee employee id id ith employee employee importance importance value ith employee employee subordinate list id direct subordinate ith employee integer id represents employee id total importance value employee direct indirect subordinate
minimum number frog croaking string croakoffrogs represents combination string croak different frog multiple frog croak time multiple croak mixed minimum number different frog finish croak string valid croak mean frog printing five letter c^10 k^10 sequentially frog print five letter finish croak string combination valid croak 1^10
largest palindrome product integer n^10 largest palindromic integer represented product two n^10 digit integer answer large modulo 1337
determine string half alike string even length split string two half equal length let first half b^10 second half two string alike number vowel e u e u notice contains uppercase lowercase letter true b^10 alike otherwise false
process task using^10 server two 0^10 indexed integer array server task length n^10 respectively server weight ith server task j time needed process jth task second task assigned server using^10 task queue initially server free queue empty second j jth task inserted queue starting 0th task inserted second 0^10 long free server queue empty task front queue assigned free server smallest weight case tie assigned free server smallest index free server queue empty wait server becomes free immediately assign next task multiple server become free time multiple task queue assigned order insertion following weight index priority server assigned task j second free second task j build array an^10 length an^10 j index server jth task assigned array an^10
add minimum number rung strictly increasing integer array rung represents height rung ladder currently floor height 0^10 want reach last rung also integer dist climb next highest rung distance currently floor rung next rung dist able insert rung positive integer height rung already minimum number rung must added ladder order climb last rung
partition array three part equal sum array integer arr true partition array three non empty part equal sum formally partition array find index 1^10 j arr 0^10 arr 1^10 arr arr 1^10 arr 2^10 arr j 1^10 arr j arr j 1^10 arr arr length 1^10
minimum one bit operation make integer zero integer n^10 must transform 0^10 using^10 following operation number time change rightmost 0th bit binary representation n^10 change ith bit binary representation n^10 1^10 th bit set 1^10 2^10 th 0th bit set 0^10 minimum number operation transform n^10 0^10
evaluate boolean binary tree root full binary tree following property leaf node either value 0^10 1^10 0^10 represents false 1^10 represents true non leaf node either value 2^10 3^10 2^10 represents boolean 3^10 represents boolean evaluation node follows node leaf node evaluation value node e true false otherwise evaluate node two child apply boolean operation value child evaluation boolean result evaluating root node full binary tree binary tree node either 0^10 2^10 child leaf node node zero child
minimum number operation move ball box n^10 box binary string box length n^10 box 0^10 ith box empty 1^10 contains one ball one operation move one ball box adjacent box box adjacent box j ab j 1^10 note may one ball box array answer size n^10 answer minimum number operation needed move ball ith box answer calculated considering initial state box
best time buy sell stock array price price price stock ith day want maximize profit choosing single day buy one stock choosing different day future sell stock maximum profit achieve transaction cannot achieve profit 0^10
merge interval array interval interval starti endi merge overlapping interval array non overlapping interval cover interval input
1^10 bit 2^10 bit character two special character first character represented one bit 0^10 second character represented two bit 10^10 11 binary array bit end 0^10 true last character must one bit character
maximum deletion string string consisting lowercase english letter one operation delete entire string ordelete first letter first letter equal following letter range 1^10 length 2^10 example ababc one operation could delete first two letter get abc first two letter following two letter equal ab maximum number operation needed delete
k^10 th smallest prime fraction sorted integer array arr containing 1^10 prime number integer arr unique also integer k^10 every j 0^10 j arr length consider fraction arr arr j kth^10 smallest fraction considered answer array integer size 2^10 answer 0^10 arr answer 1^10 arr j
check string transformable substring sort operation two string transform string string using^10 following operation number time choose non empty substring sort place character ascending order example applying operation underlined substring 14234 result 12344 true possible transform otherwise false substring contiguous sequence character within string
longest ideal subsequence string consisting lowercase letter integer k^10 call string ideal following condition satisfied subsequence string absolute difference alphabet order every two adjacent letter le equal k^10 length longest ideal string subsequence string derived another string deleting character without^10 changing order remaining character note alphabet order cyclic example absolute difference alphabet order z 25 1^10
one data structure design data structure store string count ability string minimum maximum count implement allone class allone initializes object data structure inc string key increment count string key 1^10 key exist data structure insert count 1^10 dec string key decrement count string key 1^10 count key 0^10 decrement remove data structure guaranteed key exists data structure decrement getmaxkey return one key maximal count element exists empty string getminkey return one key minimum count element exists empty string note function must run 1^10 average time complexity
running sum 1d^10 array array nums define running sum array runningsum sum nums 0^10 … nums running sum nums
find pivot integer positive integer n^10 find pivot integer x sum element 1^10 x inclusively equal sum element x n^10 inclusively pivot integer x integer exists 1^10 guaranteed one pivot index input
sticker spell word n^10 different type sticker sticker lowercase english word would like spell string target cutting individual letter collection sticker rearranging use sticker want infinite quantity sticker minimum number sticker need spell target task impossible 1^10 note test case word chosen randomly 1000 common u english word target chosen concatenation two random word
number way separate number wrote many positive integer string called num however realized forgot add comma seperate different number remember list integer non decreasing integer leading zero number possible list integer could written get string num answer may large modulo 109 7^10
maximum unit truck assigned put amount box onto one truck 2d array boxtypes boxtypes numberofboxesi numberofunitsperboxi numberofboxesi number box type numberofunitsperboxi number unit box type also integer trucksize maximum number box put truck choose box put truck long number box exceed trucksize maximum total number unit put truck
length longest alphabetical continuous substring alphabetical continuous string string consisting consecutive letter alphabet word substring string abcdefghijklmnopqrstuvwxyz example abc alphabetical continuous string acb za string consisting lowercase letter length longest alphabetical continuous substring
minimize hamming distance swap operation two integer array source target length n^10 also array allowedswaps allowedswaps ai bi indicates allowed^10 swap element index ai index bi 0^10 indexed array source note swap element specific pair index multiple time order hamming distance two array length source target number position element different formally number index 0^10 n^10 1^10 source target 0^10 indexed minimum hamming distance source target performing amount swap operation array source
number valid clock time string length 5^10 called time representing current time digital clock format hh mm earliest possible time 00 00 latest possible time 23 59 string time digit represented symbol unknown must replaced digit 0^10 9 integer answer number valid clock time created replacing every digit 0^10 9
contain virus virus spreading rapidly task quarantine infected area installing wall world modeled x n^10 binary grid isinfected isinfected j 0^10 represents uninfected cell isinfected j 1^10 represents cell contaminated virus wall one wall installed two 4 directionally adjacent cell shared boundary every night virus spread neighboring cell four direction blocked wall resource limited day install wall around one region e affected area continuous block infected cell threatens uninfected cell following night never tie number wall used quarantine infected region world become fully infected number wall used
find difference two string string generated random shuffling string add one letter random position letter added
number way reach position exactly k^10 step two positive integer startpos endpos initially standing position startpos infinite number line one step move either one position left one position right positive integer k^10 number different way reach position endpos starting startpos perform exactly k^10 step answer may large modulo 109 7^10 two way considered different order step made exactly note number line includes negative integer
operation tree tree n^10 node numbered 0^10 n^10 1^10 form parent array parent parent parent ith node root tree node 0^10 parent 0^10 1^10 parent want design data structure allows user lock unlock upgrade node tree data structure support following function lock lock node user prevents user locking node may lock node using^10 function node unlocked unlock unlocks node user may unlock node using^10 function currently locked user upgrade lock node user unlocks descendant regardless locked may upgrade node 3^10 condition true node unlocked least one locked descendant user andit locked ancestor implement lockingtree class lockingtree int parent initializes data structure parent array lock int num int user return true possible user id user lock node num false otherwise possible node num become locked user id user unlock int num int user return true possible user id user unlock node num false otherwise possible node num become unlocked upgrade int num int user return true possible user id user upgrade node num false otherwise possible node num upgraded
substring concatenation word string array string word string word length concatenated substring substring contains string permutation word concatenated example word ab cd ef abcdef abefcd cdabef cdefab efabcd efcdab concatenated string acdbef concatenated substring concatenation permutation word starting index concatenated substring answer order
profit assigning work n^10 job worker three array difficulty profit worker difficulty profit difficulty profit ith job andworker j ability jth worker e jth worker complete job difficulty worker j every worker assigned one job one job completed multiple time example three worker attempt job pay 1^10 total profit 3^10 worker cannot complete job profit 0^10 maximum profit achieve assigning worker job
maximum average pas ratio school class student class final exam 2d integer array class class passi totali know beforehand ith class totali total student passi number student pas exam also integer extrastudents another extrastudents brilliant student guaranteed pas exam class assigned want assign extrastudents student class way maximizes average pas ratio across class pas ratio class equal number student class pas exam divided total number student class average pas ratio sum pas ratio class divided number class maximum possible average pas ratio assigning extrastudents student answer within 10^10 5^10 actual answer accepted
number string appear substring word array string pattern string word number string pattern exist substring word substring contiguous sequence character within string
minimum cost make character equal 0^10 indexed binary string length n^10 apply two type operation choose index invert character index 0^10 index inclusive cost 1choose index invert character index index n^10 1^10 inclusive cost n^10 ireturn minimum cost make character string equal invert character mean value 0^10 becomes 1^10 vice versa
cat mouse game undirected graph played two player mouse cat alternate turn graph follows graph list node b^10 ab edge graph mouse start node 1^10 go first cat start node 2^10 go second hole node 0^10 player turn must travel along one edge graph meet example mouse node 1^10 must travel node graph 1^10 additionally allowed^10 cat travel hole node 0^10 game end three way ever cat occupies node mouse cat win ever mouse reach hole mouse win ever position repeated e player position previous turn player turn move game draw graph assuming player play optimally return1 mouse win game 2^10 cat win game or0 game draw
minimize total price trip exists undirected unrooted tree n^10 node indexed 0^10 n^10 1^10 integer n^10 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree node associated price integer array price price price ith node price sum path sum price node lying path additionally 2d integer array trip trip starti endi indicates start ith trip node starti travel node endi path like performing first trip choose non adjacent node halve price minimum total price sum perform trip
evaluate bracket pair string string contains bracket pair pair containing non empty key example string name age yearsold two bracket pair contain key name age know value wide range key represented 2d string array knowledge knowledge keyi valuei indicates key keyi value valuei tasked evaluate bracket pair evaluate bracket pair contains key keyi replace keyi bracket pair key corresponding valuei know value key replace keyi bracket pair question mark without^10 quotation mark key appear knowledge nested bracket resulting string evaluating bracket pair
majority element ii integer array size n^10 find element appear ⌊ n^10 3^10 ⌋ time
largest positive integer exists negative integer array nums contain zero find largest positive integer k^10 k^10 also exists array positive integer k^10 integer 1^10
change minimum character satisfy one three condition two string b^10 consist lowercase letter one operation change character b^10 lowercase letter goal satisfy one following three condition every letter strictly le every letter b^10 alphabet every letter b^10 strictly le every letter alphabet b^10 consist one distinct letter minimum number operation needed achieve goal
delete earn integer array nums want maximize number point get performing following operation number time pick nums delete earn nums point afterwards must delete every element equal nums 1^10 every element equal nums 1^10 maximum number point earn applying operation number time
binary search tree greater sum tree root binary search tree bst convert greater tree every key original bst changed original key plus sum key greater original key bst reminder binary search tree tree satisfies constraint left subtree node contains node key le node key right subtree node contains node key greater node key left right subtrees must also binary search tree
find array subset sum integer n^10 representing length unknown array trying recover also array sum containing value 2n subset sum unknown array particular order array an^10 length n^10 representing unknown array multiple answer exist array sub subset array arr sub obtained arr deleting possibly zero element arr sum element sub one possible subset sum arr sum empty array considered 0^10 note test case generated always least one correct answer
repeated substring pattern string check constructed taking substring appending multiple copy substring together
soup serving two type soup type type b^10 initially n^10 ml type soup four kind operation serve 100 ml soup 0^10 ml soup b^10 serve 75 ml soup 25 ml soup b^10 serve 50 ml soup 50 ml soup b^10 andserve 25 ml soup 75 ml soup b^10 serve soup give someone longer turn choose four operation equal probability 0^10 25 remaining volume soup enough complete operation serve much possible stop longer quantity type soup note operation 100 ml soup b^10 used first probability soup empty first plus half probability b^10 become empty time answer within 10^10 5^10 actual answer accepted
sum distance 0^10 indexed integer array nums exists array arr length nums length arr sum j j nums j nums j j set arr 0^10 array arr
visited sector circular track integer n^10 integer array round circular track consists n^10 sector labeled 1^10 n^10 marathon held track marathon consists round ith round start sector round 1^10 end sector round example round 1^10 start sector round 0^10 end sector round 1^10 array visited sector sorted ascending order notice circulate track ascending order sector number counter clockwise direction see first example
matrix diagonal sum square matrix mat sum matrix diagonal include sum element primary diagonal element secondary diagonal part primary diagonal
maximum nesting depth two valid parenthesis string string valid parenthesis string denoted vps consists character empty string orit written ab concatenated b^10 b^10 vps orit written vps similarly define nesting depth depth vps follows depth 0depth b^10 max depth depth b^10 b^10 vps sdepth 1^10 depth vps example vps nesting depth 0^10 1^10 2^10 vps vps seq split two disjoint subsequence b^10 b^10 vps length b^10 length seq length choose b^10 max depth depth b^10 minimum possible value answer array length seq length encodes choice b^10 answer 0^10 seq part else answer 1^10 note even though multiple answer may exist may
design parking system design parking system parking lot parking lot three kind parking space big medium small fixed number slot size implement parkingsystem class parkingsystem int big int medium int small initializes object parkingsystem class number slot parking space part constructor bool addcar int cartype check whether parking space cartype car want get parking lot cartype three kind big medium small represented 1^10 2^10 3^10 respectively car park parking space cartype space available false else park car size space true
pancake sorting array integer arr sort array performing series pancake flip one pancake flip following step choose integer k^10 1^10 k^10 arr length reverse sub array arr 0^10 k^10 1^10 0^10 indexed example arr 3^10 2^10 1^10 4 performed pancake flip choosing k^10 3^10 reverse sub array 3^10 2^10 1^10 arr 1^10 2^10 3^10 4 pancake flip k^10 3^10 array k^10 value corresponding sequence pancake flip sort arr valid answer sort array within 10^10 arr length flip judged correct
split linked list part head singly linked list integer k^10 split linked list k^10 consecutive linked list part length part equal possible two part size differing one may lead part null part order occurrence input list part occurring earlier always size greater equal part occurring later array k^10 part
maximum number group entering competition positive integer array grade represents grade student university would like enter student competition ordered non empty group ordering meet following condition sum grade student ith group le sum grade student 1^10 th group group except last total number student ith group le total number student 1^10 th group group except last maximum number group formed
sort array array integer nums sort array ascending order must solve problem without^10 using^10 built function nlog n^10 time complexity smallest space complexity possible
split array make coprime product 0^10 indexed integer array nums length n^10 split index 0^10 n^10 2^10 called valid product first 1^10 element product remaining element coprime example nums 2^10 3^10 3^10 split index 0^10 valid 2^10 9 coprime split index 1^10 valid 6 3^10 coprime split index 2^10 valid n^10 1^10 smallest index array split validly 1^10 split two value val1 val2 coprime gcd val1 val2 1^10 gcd val1 val2 greatest common divisor val1 val2
stream character design algorithm accepts stream character check suffix character string array string word example word abc xyz stream added four character one one x z algorithm detect suffix xyz character axyz match xyz word implement streamchecker class streamchecker string word initializes object string array word boolean query char letter accepts new character stream return true non empty suffix stream form word word
product array except self integer array nums array answer answer equal product element nums except nums product prefix suffix nums guaranteed fit 32 bit integer must write algorithm run n^10 time without^10 using^10 division operation
4sum ii four integer array nums1 nums2 nums3 nums4 length n^10 number tuples j k^10 l 0^10 j k^10 l nnums1 nums2 j nums3 k^10 nums4 l 0^10
minimum hour training win competition entering competition two positive integer initialenergy initialexperience denoting initial energy initial experience respectively also two 0^10 indexed integer array energy experience length n^10 face n^10 opponent order energy experience ith opponent denoted energy experience respectively face opponent need strictly greater experience energy defeat move next opponent available defeating ith opponent increase experience experience decrease energy energy starting competition train number hour hour training either choose increase initial experience one increase initial energy one minimum number training hour required defeat n^10 opponent
delivering box storage port task delivering box storage port using^10 one ship however ship limit number box total weight carry array box box portsi weighti three integer portscount maxboxes maxweight portsi port need deliver ith box weightsi weight ith box portscount number port maxboxes maxweight respective box weight limit ship box need delivered order ship follow step ship take number box box queue violating maxboxes maxweight constraint loaded box order ship make trip port box need delivered deliver ship already correct port trip needed box immediately delivered ship make trip storage take box queue ship must end storage box delivered minimum number trip ship need make deliver box respective port
maximum score removing substring string two integer x perform two type operation number time remove substring ab gain x point example removing ab cabxbae becomes cxbae remove substring ba gain point example removing ba cabxbae becomes cabxe maximum point gain applying operation
time needed buy ticket n^10 people line queuing buy ticket 0th person front line n^10 1^10 th person back line 0^10 indexed integer array ticket length n^10 number ticket ith person would like buy ticket person take exactly 1^10 second buy ticket person buy 1^10 ticket time go back end line happens instantaneously order buy ticket person ticket left buy person leave line time taken person position k^10 0^10 indexed finish buying ticket
minimum number step make two string anagram ii two string one step append character either minimum number step make anagram anagram string string contains character different ordering
reorder list head singly linked list list represented l0 → l1 → … → ln 1^10 → lnreorder list following form l0 → ln → l1 → ln 1^10 → l2 → ln 2^10 → … may modify value list node node may changed
maximize topmost element k^10 move 0^10 indexed integer array nums representing content pile nums 0^10 topmost element pile one move perform either following pile empty remove topmost element pile one removed element add one back onto pile element becomes new topmost element also integer k^10 denotes total number move made maximum value topmost element pile possible exactly k^10 move case possible obtain non empty pile k^10 move 1^10
find critical pseudo critical edge minimum spanning tree weighted undirected connected graph n^10 vertex numbered 0^10 n^10 1^10 array edge edge ai bi weighti represents bidirectional weighted edge node ai bi minimum spanning tree mst subset graph edge connects vertex without^10 cycle minimum possible total edge weight find critical pseudo critical edge graph minimum spanning tree mst mst edge whose deletion graph would cause mst weight increase called critical edge hand pseudo critical edge appear mst note index edge order
beautiful arrangement ii two integer n^10 k^10 construct list answer contains n^10 different positive integer ranging 1^10 n^10 obeys following requirement suppose list answer a1 a2 a3 list a1 a2 a2 a3 a3 a4 1^10 exactly k^10 distinct integer list answer multiple valid answer
number unique good subsequence binary string binary subsequence binary considered good empty leading zero exception 0^10 find number unique good subsequence binary example binary 001 good subsequence 0^10 0^10 1^10 unique good subsequence 0^10 1^10 note subsequence 00 01^10 001 good leading zero number unique good subsequence binary answer may large modulo 109 7^10 subsequence sequence derived another sequence deleting element without^10 changing order remaining element
replace element array 0^10 indexed array nums consists n^10 distinct positive integer apply operation array ith operation replace number operation 0^10 operation 1^10 guaranteed ith operation operation 0^10 exists nums operation 1^10 exist nums array obtained applying operation
avoid flood city country infinite number lake initially lake empty rain nth lake nth lake becomes full water rain lake full water flood goal avoid flood lake integer array rain rain 0^10 mean rain rain lake rain 0^10 mean rain day choose one lake day dry array an^10 an^10 length rain lengthans 1^10 rain 0^10 an^10 lake choose dry ith day rain 0^10 multiple valid answer impossible avoid flood empty array notice chose dry full lake becomes empty chose dry empty lake nothing change
check distance letter 0^10 indexed string consisting lowercase english letter letter appears exactly twice also 0^10 indexed integer array distance length 26 letter alphabet numbered 0^10 25 e 0^10 b^10 1^10 c^10 2^10 z 25 spaced string number letter two occurrence ith letter distance ith letter appear distance ignored true spaced string otherwise false
friend request ii friend sql schematable requestaccepted column name type requester_id int accepter_id int accept_date date requester_id accepter_id primary key table table contains id user sent request id user received request date request accepted write sql query find people friend friend number test case generated one person friend query result format following example
minimum cost reach destination time country n^10 city numbered 0^10 n^10 1^10 city connected bi directional road road represented 2d integer array edge edge xi yi timei denotes road city xi yi take timei minute travel may multiple road differing travel time connecting two city road connects city time pas city must pay passing fee represented 0^10 indexed integer array passingfees length n^10 passingfees j amount dollar must pay pas city j beginning city 0^10 want reach city n^10 1^10 maxtime minute le cost journey summation passing fee city passed moment journey including source destination city maxtime edge passingfees minimum cost complete journey 1^10 cannot complete within maxtime minute
height binary tree subtree removal query root binary tree n^10 node node assigned unique value 1^10 n^10 also array query size perform independent query tree ith query following remove subtree rooted node value query tree guaranteed query equal value root array answer size answer height tree performing ith query note query independent tree return initial state query height tree number edge longest simple path root node tree
recover tree preorder traversal run preorder depth first search dfs root binary tree node traversal output dash depth node output value node depth node depth immediate child 1^10 depth root node 0^10 node one child child guaranteed left child output traversal traversal recover tree root
evaluate division array variable pair equation array real number value equation ai bi value represent equation ai bi value ai bi string represents single variable also query query j cj dj represents jth query must find answer cj dj answer query single answer cannot determined 1^10 0^10 note input always valid may assume evaluating query result division zero contradiction
longest univalue path root binary tree length longest path node path value path may may pas root length path two node represented number edge
permutation array nums distinct integer possible permutation answer order
longest substring without^10 repeating character string find length longestsubstringwithout repeating character
find median data stream median middle value ordered integer list size list even middle value median mean two middle value example arr 2^10 3^10 4 median 3^10 example arr 2^10 3^10 median 2^10 3^10 2^10 2^10 5^10 implement medianfinder class medianfinder initializes medianfinder object void addnum int num add integer num data stream data structure double findmedian return median element far answer within 10^10 5^10 actual answer accepted
strong password checker ii password said strong satisfies following criterion least 8 character contains least one lowercase letter contains least one uppercase letter contains least one digit contains least one special character special character character following string contain 2^10 character adjacent position e aab violates condition aba string password true strong password otherwise false
student attendance record string representing attendance record student character signifies whether student absent late present day record contains following three character absent l late p present student eligible attendance award following criterion student absent strictly fewer 2^10 day total student never late l 3^10 consecutive day true student eligible attendance award false otherwise
arithmetic slice integer array called arithmetic consists least three element difference two consecutive element example 1^10 3^10 5^10 7^10 9 7^10 7^10 7^10 7^10 3^10 1^10 5^10 9 arithmetic sequence integer array nums number arithmetic subarrays nums subarray contiguous subsequence array
dota2 senate world dota2 two party radiant dire dota2 senate consists senator coming two party senate want decide change dota2 game voting change round based procedure round senator exercise one two right ban one senator right senator make another senator lose right following round announce victory senator found senator still right vote party announce victory decide change game string senate representing senator party belonging character represent radiant party dire party n^10 senator size string n^10 round based procedure start first senator last senator order procedure last end voting senator lost right skipped procedure suppose every senator smart enough play best strategy party predict party finally announce victory change dota2 game output radiant dire
number arithmetic triplet 0^10 indexed strictly increasing integer array nums positive integer diff triplet j k^10 arithmetic triplet following condition met j k^10 nums j nums diff andnums k^10 nums j diff number unique arithmetic triplet
divide array equal pair integer array nums consisting 2^10 n^10 integer need divide nums n^10 pair element belongs exactly one pair element present pair equal true nums divided n^10 pair otherwise false
prime diagonal 0^10 indexed two dimensional integer array nums largest prime number lie least one diagonal nums case prime present diagonal 0^10 note integer prime greater 1^10 positive integer divisor 1^10 integer val one diagonal nums exists integer nums val nums nums length 1^10 val diagram one diagonal 1^10 5^10 9 another diagonal 3^10 5^10 7^10
minimize result adding parenthesis expression 0^10 indexed string expression form num1 num2 num1 num2 represent positive integer add pair parenthesis expression addition parenthesis expression valid mathematical expression evaluates smallest possible value left parenthesis must added left right parenthesis must added right expression adding pair parenthesis expression evaluates smallest possible value multiple answer yield result input generated original value expression value expression adding pair parenthesis meet requirement fit within signed 32 bit integer
longest uncommon subsequence two string b^10 length longest uncommon subsequence b^10 longest uncommon subsequence exist 1^10 uncommon subsequence two string string subsequence one subsequence string string obtained deleting number character example abc subsequence aebdc delete underlined character aebdc get abc subsequence aebdc include aebdc aeb empty string
minimum cost merge stone n^10 pile stone arranged row ith pile stone stone move consists merging exactly k^10 consecutive pile one pile cost move equal total number stone k^10 pile minimum cost merge pile stone one pile impossible 1^10
time based key value store design time based key value data structure store multiple value key different time stamp retrieve key value certain timestamp implement timemap class timemap initializes object data structure void set string key string value int timestamp store key key value value time timestamp string get string key int timestamp return value set called previously timestamp_prev timestamp multiple value return value associated largest timestamp_prev value return
find maximum divisibility score two 0^10 indexed integer array nums divisor divisibility score divisor number index j nums j divisible divisor integer divisor maximum divisibility score one integer maximum score minimum
construct binary tree preorder postorder traversal two integer array preorder postorder preorder preorder traversal binary tree distinct value postorder postorder traversal tree reconstruct binary tree exist multiple answer
max sum pair equal sum digit 0^10 indexed array nums consisting positive integer choose two index j j sum digit number nums equal nums j maximum value nums nums j obtain possible index j satisfy condition
search insert position sorted array distinct integer target value index target found index would inserted order must write algorithm log n^10 runtime complexity
partition string substring value k^10 string consisting digit 1^10 9 integer k^10 partition string called good digit part exactly one substring value substring le equal k^10 minimum number substring good partition good partition exists 1^10 note value string result interpreted integer example value 123 123 value 1^10 1^10 substring contiguous sequence character within string
minimum initial energy finish task array task task actuali minimumi actuali actual amount energy spend finish ith task minimumi minimum amount energy require begin ith task example task 10^10 12 current energy 11 cannot start task however current energy 13 complete task energy 3^10 finishing finish task order like minimum initial amount energy need finish task
sum subsequence width width sequence difference maximum minimum element sequence array integer nums sum width non empty subsequence nums answer may large modulo 109 7^10 subsequence sequence derived array deleting element without^10 changing order remaining element example 3^10 6 2^10 7^10 subsequence array 0^10 3^10 1^10 6 2^10 2^10 7^10
make string great string lower upper case english letter good string string two adjacent character 1^10 0^10 length 2^10 lower case letter 1^10 letter upper case vice versa make string good choose two adjacent character make string bad remove keep string becomes good string making good answer guaranteed unique constraint notice empty string also good
element appearing 25 sorted array integer array sorted non decreasing order exactly one integer array occurs 25 time integer
knight probability chessboard n^10 x n^10 chessboard knight start cell row column attempt make exactly k^10 move row column 0^10 indexed top left cell 0^10 0^10 bottom right cell n^10 1^10 n^10 1^10 chess knight eight possible move make illustrated move two cell cardinal direction one cell orthogonal direction time knight move chooses one eight possible move uniformly random even piece would go chessboard move knight continues moving made exactly k^10 move moved chessboard probability knight remains board stopped moving
number way select building 0^10 indexed binary string represents type building along street 0^10 denotes ith building office ands 1^10 denotes ith building restaurant city official would like select 3^10 building random inspection however ensure variety two consecutive building selected building type example 001101 cannot select 1st 3rd 5th building would form 011 allowed^10 due two consecutive building type number valid way select 3^10 building
rectangle area ii 2d array axis aligned rectangle rectangle xi1 yi1 xi2 yi2 denotes ith rectangle xi1 yi1 coordinate bottom left corner xi2 yi2 coordinate top right corner calculate total area covered rectangle plane area covered two rectangle counted total area answer may large modulo 109 7^10
maximum running time n^10 computer n^10 computer integer n^10 0^10 indexed integer array battery ith battery run computer battery minute interested running n^10 computer simultaneously using^10 battery initially insert one battery computer integer time moment remove battery computer insert another battery number time inserted battery totally new battery battery another computer may assume removing inserting process take time note battery cannot recharged maximum number minute run n^10 computer simultaneously
make array zero subtracting equal amount non negative integer array nums one operation must choose positive integer x x le equal smallest non zero element nums subtract x every positive element nums minimum number operation make every element nums equal 0^10
combine two table sql schematable person column name type personid int lastname varchar firstname varchar personid primary key column table table contains information id person first last name table address column name type addressid int personid int city varchar state varchar addressid primary key column table row table contains information city state one person id personid write sql query report first name last name city state person person table address personid present address table report null instead result table order query result format following example
maximum number word found sentence sentence list word separated single space leading trailing space array string sentence sentence represents single sentence maximum number word appear single sentence
minimum number move make palindrome string consisting lowercase english letter one move select two adjacent character swap minimum number move needed make palindrome note input generated always converted palindrome
nth digit integer n^10 nth digit infinite integer sequence 1^10 2^10 3^10 4 5^10 6 7^10 8 9 10^10 11
min cost climbing stair integer array cost cost cost ith step staircase pay cost either climb one two step either start step index 0^10 step index 1^10 minimum cost reach top floor
unique binary search tree integer n^10 number structurally unique bst binary search tree exactly n^10 node unique value 1^10 n^10
find smallest divisor threshold array integer nums integer threshold choose positive integer divisor divide array sum division result find smallest divisor result mentioned le equal threshold result division rounded nearest integer greater equal element example 7^10 3^10 3^10 10^10 2^10 5^10 test case generated answer
minimum height tree tree undirected graph two vertex connected exactly one path word connected graph without^10 simple cycle tree tree n^10 node labelled 0^10 n^10 1^10 array n^10 1^10 edge edge ai bi indicates undirected edge two node ai bi tree choose node tree root select node x root result tree height h among possible rooted tree minimum height e min h called minimum height tree mhts list mhts root label answer order height rooted tree number edge longest downward path root leaf
biggest single number sql schematable mynumbers column name type num int primary key table may contain duplicate row table contains integer single number number appeared mynumbers table write sql query report largest single number single number report null query result format following example
count vowel permutation integer n^10 task count many string length n^10 formed following rule character lower case vowel e u vowel may followed e vowel e may followed vowel may followed another vowel may followed u vowel u may followed answer may large modulo 10^10 9 7^10
widest vertical area two point containing point n^10 point 2d plane point xi yi widest vertical area two point point inside area vertical area area fixed width extending infinitely along axis e infinite height widest vertical area one maximum width note point edge vertical area considered included area
element two binary search tree two binary search tree root1 root2 list containing integer tree sorted ascending order
integer english word convert non negative integer num english word representation
triple bitwise equal zero integer array nums number triple triple triple index j k^10 0^10 nums length0 j nums length0 k^10 nums lengthnums nums j nums k^10 0^10 represents bitwise operator
increment submatrices one positive integer n^10 indicating initially n^10 x n^10 0^10 indexed integer matrix mat filled zero also 2d integer array query query row1i col1i row2i col2i following operation add 1^10 every element submatrix top left corner row1i col1i bottom right corner row2i col2i add 1^10 mat x row1i x row2i col1i col2i matrix mat performing every query
reformat string alphanumeric string alphanumeric string string consisting lowercase english letter digit find permutation string letter followed another letter digit followed another digit two adjacent character type reformatted string empty string impossible reformat string
number step reduce number binary representation one binary representation integer string number step reduce 1^10 following rule current number even divide 2^10 current number odd add 1^10 guaranteed always reach one test case
top k^10 frequent element integer array nums integer k^10 k^10 frequent element may answer order
find string lcp define lcp matrix 0^10 indexed string word n^10 lowercase english letter n^10 x n^10 grid lcp j equal length longest common prefix substring word n^10 1^10 word j n^10 1^10 n^10 x n^10 matrix lcp alphabetically smallest string word corresponds lcp string empty string string lexicographically smaller string b^10 length first position b^10 differ string letter appears earlier alphabet corresponding letter b^10 example aabd lexicographically smaller aaca first position differ third letter b^10 come c^10
number subarrays lcm equal k^10 integer array nums integer k^10 number subarrays nums least common multiple subarray element k^10 subarray contiguous non empty sequence element within array least common multiple array smallest positive integer divisible array element
maximum performance team two integer n^10 k^10 two integer array speed efficiency length n^10 n^10 engineer numbered 1^10 n^10 speed efficiency represent speed efficiency ith engineer respectively choose k^10 different engineer n^10 engineer form team maximum performance performance team sum engineer speed multiplied minimum efficiency among engineer maximum performance team answer huge number modulo 109 7^10
finding user active minute log user action leetcode integer k^10 log represented 2d integer array log log idi timei indicates user idi performed action minute timei multiple user perform action simultaneously single user perform multiple action minute user active minute uam user defined number unique minute user performed action leetcode minute counted even multiple action occur calculate 1^10 indexed array answer size k^10 j 1^10 j k^10 answer j number user whose uam equal j array answer described
reverse linked list head singly linked list reverse list reversed list
invalid tweet sql schematable tweet column name type tweet_id int content varchar tweet_id primary key table table contains tweet social medium app write sql query find id invalid tweet tweet invalid number character used content tweet strictly greater 15 result table order query result format following example
guess word array unique string word word six letter long one word word chosen secret word also helper object master may call master guess word word six letter long string must word master guess word return 1^10 word word oran integer representing number exact match value position guess secret word parameter allowedguesses test case allowedguesses maximum number time call master guess word test case call master guess secret word without^10 exceeding maximum number allowed^10 guess get either took many guess find secret word called master guess allowedguesses time call master guess secret word guessed secret word correctly called master guess secret word number call master guess le equal allowedguesses test case generated guess secret word reasonable strategy using^10 bruteforce method
merge two binary tree two binary tree root1 root2 imagine put one cover node two tree overlapped others need merge two tree new binary tree merge rule two node overlap sum node value new value merged node otherwise null node used node new tree merged tree note merging process must start root node tree
delete operation two string two string word1 word2 minimum number step required make word1 word2 one step delete exactly one character either string
peak index mountain array array arr mountain following property hold arr length 3there exists 0^10 arr length 1^10 arr 0^10 arr 1^10 arr 1^10 arr arr arr 1^10 arr arr length 1^10 mountain array arr index arr 0^10 arr 1^10 arr 1^10 arr arr 1^10 arr arr length 1^10 must solve log arr length time complexity
longest mountain array may recall array arr mountain array arr length 3there exists index 0^10 indexed 0^10 arr length 1^10 arr 0^10 arr 1^10 arr 1^10 arr arr arr 1^10 arr arr length 1^10 integer array arr length longest subarray mountain 0^10 mountain subarray
minimum deletion make character frequency unique string called good two different character frequency string minimum number character need delete make good frequency character string number time appears string example string aab frequency 2^10 frequency b^10 1^10
count binary substring binary string number non empty substring number 0^10 1^10 0^10 1^10 substring grouped consecutively substring occur multiple time counted number time occur
stone game vii alice bob take turn playing game alice starting first n^10 stone arranged row player turn remove either leftmost stone rightmost stone row receive point equal sum remaining stone value row winner one higher score stone left remove bob found always lose game poor bob always loses decided minimize score difference alice goal maximize difference score array integer stone stone represents value ith stone left difference alice bob score play optimally
smallest string starting leaf root binary tree node value range 0^10 25 representing letter z lexicographically smallest string start leaf tree end root reminder shorter prefix string lexicographically smaller example ab lexicographically smaller aba leaf node node child
constrained subsequence sum integer array nums integer k^10 maximum sum non empty subsequence array every two consecutive integer subsequence nums nums j j condition j k^10 satisfied subsequence array obtained deleting number element zero array leaving remaining element original order
brick wall rectangular brick wall front n^10 row brick ith row number brick height e one unit different width total width row draw vertical line top bottom cross least brick line go edge brick brick considered crossed cannot draw line along one two vertical edge wall case line obviously cross brick 2d array wall contains information wall minimum number crossed brick drawing vertical line
missing number array nums containing n^10 distinct number range 0^10 n^10 number range missing array
length last word string consisting word space length last word string word maximalsubstringconsisting non space character
palindrome partitioning iii string containing lowercase letter integer k^10 need first change character lowercase english letter divide k^10 non empty disjoint substring substring palindrome minimal number character need change divide string
minimum white tile covering carpet 0^10 indexed binary string floor represents color tile floor floor 0^10 denotes ith tile floor colored black hand floor 1^10 denotes ith tile floor colored white also numcarpets carpetlen numcarpets black carpet length carpetlen tile cover tile carpet number white tile still visible minimum carpet may overlap one another minimum number white tile still visible
number employee report employee sql schematable employee column name type employee_id int name varchar reports_to int age int employee_id primary key table table contains information employee id manager report employee report anyone reports_to null problem consider manager employee least 1^10 employee reporting write sql query report id name manager number employee report directly average age report rounded nearest integer result table ordered employee_id query result format following example
compare version number two version number version1 version2 compare version number consist one revision joined dot revision consists digit may contain leading zero every revision contains least one character revision 0^10 indexed left right leftmost revision revision 0^10 next revision revision 1^10 example 2^10 5^10 33 0^10 1^10 valid version number compare version number compare revision left right order revision compared using^10 integer value ignoring leading zero mean revision 1^10 001 considered equal version number specify revision index treat revision 0^10 example version 1^10 0^10 le version 1^10 1^10 revision 0^10 revision 1^10 0^10 1^10 respectively 0^10 1^10 following version1 version2 1^10 version1 version2 1^10 otherwise 0^10
minimum absolute difference array distinct integer arr find pair element minimum absolute difference two element list pair ascending order respect pair pair b^10 followsa b^10 arra bb equal minimum absolute difference two element arr
substring largest variance variance string defined largest difference number occurrence 2^10 character present string note two character may may string consisting lowercase english letter largest variance possible among substring substring contiguous sequence character within string
number great partition array nums consisting positive integer integer k^10 partition array two ordered group element exactly one group partition called great sum element group greater equal k^10 number distinct great partition answer may large modulo 109 7^10 two partition considered distinct element nums different group two partition
extra character string 0^10 indexed string dictionary word dictionary break one non overlapping substring substring present dictionary may extra character present substring minimum number extra character left break optimally
minimum cost change final value expression valid boolean expression string expression consisting character 1^10 0^10 bitwise operator bitwise operator example 1^10 1^10 1^10 valid 1^10 1^10 0^10 1^10 0^10 1^10 valid expression minimum cost change final value expression example expression 1^10 1^10 0^10 0^10 1^10 value 1^10 1^10 0^10 0^10 1^10 1^10 1^10 0^10 1^10 1^10 0^10 1^10 1^10 1^10 1^10 want apply operation new expression evaluates 0^10 cost changing final value expression number operation performed expression type operation described follows turn 1^10 0^10 turn 0^10 1^10 turn turn note take precedence order calculation evaluate parenthesis first left right order
print order suppose class public class foo public void first print first public void second print second public void third print third instance foo passed three different thread thread call first thread b^10 call second thread c^10 call third design mechanism modify program ensure second executed first third executed second note know thread scheduled operating system even though number input seem imply ordering input format see mainly ensure test comprehensiveness
find k^10 th smallest pair distance distance pair integer b^10 defined absolute difference b^10 integer array nums integer k^10 kth^10 smallest distance among pair nums nums j 0^10 j nums length
query permutation key array query positive integer 1^10 process query 0^10 query length 1^10 according following rule beginning permutation p 1^10 2^10 3^10 current find position query permutation p indexing 0^10 move beginning permutation p notice position query p result query array containing result query
sum total strength wizard ruler kingdom army wizard command 0^10 indexed integer array strength strength denotes strength ith wizard contiguous group wizard e wizard strength form subarray strength total strength defined product following two value strength weakest wizard group total individual strength wizard group sum total strength contiguous group wizard answer may large modulo 109 7^10 subarray contiguous non empty sequence element within array
valid parenthesis string string containing three type character true valid following rule define valid string left parenthesis must corresponding right parenthesis right parenthesis must corresponding left parenthesis left parenthesis must go corresponding right parenthesis could treated single right parenthesis single left parenthesis empty string
coloring border x n^10 integer matrix grid three integer row col color value grid represents color grid square location two square belong connected component color next 4 direction border connected component square connected component either 4 directionally adjacent square component boundary grid first last row column color border connected component contains square grid row col color final grid
step step direction binary tree node another root binary tree n^10 node node uniquely assigned value 1^10 n^10 also integer startvalue representing value start node different integer destvalue representing value destination node find shortest path starting node ending node generate step step direction path string consisting uppercase letter l u letter indicates specific direction l mean go node left child node mean go node right child node u mean go node parent node step step direction shortest path node node
rotate function integer array nums length n^10 assume arrk array obtained rotating nums k^10 position clock wise define rotation function f nums follow f k^10 0^10 arrk 0^10 1^10 arrk 1^10 n^10 1^10 arrk n^10 1^10 maximum value f 0^10 f 1^10 f n^10 1^10 test case generated answer fit 32 bit integer
minimum number operation make array continuous integer array nums one operation replace element nums integer nums considered continuous following condition fulfilled element nums unique difference maximum element minimum element nums equal nums length 1^10 example nums 4 2^10 5^10 3^10 continuous nums 1^10 2^10 3^10 5^10 6 continuous minimum number operation make nums continuous
minimum adjacent swap k^10 consecutive one integer array nums integer k^10 nums comprises 0^10 1^10 one move choose two adjacent index swap value minimum number move required nums k^10 consecutive 1^10
successful pair spell potion two positive integer array spell potion length n^10 respectively spell represents strength ith spell potion j represents strength jth potion also integer success spell potion pair considered successful product strength least success integer array pair length n^10 pair number potion form successful pair ith spell
partition array two array minimize sum difference integer array nums 2^10 n^10 integer need partition nums two array length n^10 minimize absolute difference sum array partition nums put element nums one two array minimum possible absolute difference
largest substring two equal character string length longest substring two equal character excluding two character substring 1^10 substring contiguous sequence character within string
count way build good string integer zero one low high construct string starting empty string step perform either following append character 0^10 zero time append character 1^10 one time performed number time good string string constructed process length low high inclusive number different good string constructed satisfying property answer large modulo 109 7^10
reach number standing position 0^10 infinite number line destination position target make number move nummoves move either go left right ith move starting 1^10 nummoves take step chosen direction integer target minimum number move required e minimum nummoves reach destination
number subarrays gcd equal k^10 integer array nums integer k^10 number subarrays nums greatest common divisor subarray element k^10 subarray contiguous non empty sequence element within array greatest common divisor array largest integer evenly divide array element
triangle triangle array minimum path sum top bottom step may move adjacent number row formally index current row may move either index index 1^10 next row
solving question brainpower 0^10 indexed 2d integer array question question pointsi brainpoweri array describes question exam process question order e starting question 0^10 make decision whether solve skip question solving question earn pointsi point unable solve next brainpoweri question skip question get make decision next question example question 3^10 2^10 4 3^10 4 4 2^10 5^10 question 0^10 solved earn 3^10 point unable solve question 1^10 2^10 instead question 0^10 skipped question 1^10 solved earn 4 point unable solve question 2^10 3^10 maximum point earn exam
cousin binary tree ii root binary tree replace value node tree sum cousin value two node binary tree cousin depth different parent root modified tree note depth node number edge path root node
maximum score node sequence undirected graph n^10 node numbered 0^10 n^10 1^10 0^10 indexed integer array score length n^10 score denotes score node also 2d integer array edge edge ai bi denotes exists undirected edge connecting node ai bi node sequence valid meet following condition edge connecting every pair adjacent node sequence node appears sequence score node sequence defined sum score node sequence maximum score valid node sequence length 4 sequence exists 1^10
minimum increment make array unique integer array nums one move pick index 0^10 nums length increment nums 1^10 minimum number move make every value nums unique test case generated answer fit 32 bit integer
unique number occurrence array integer arr true number occurrence value array unique false otherwise
minimize xor two positive integer num1 num2 find positive integer x x number set bit num2 andthe value x xor num1 minimal note xor bitwise xor operation integer x test case generated x uniquely determined number set bit integer number 1^10 binary representation
rearrange space word string text word placed among number space word consists one lowercase english letter separated least one space guaranteed text contains least one word rearrange space equal number space every pair adjacent word number maximized cannot redistribute space equally place extra space end meaning returned string length text string rearranging space
path minimum effort hiker preparing upcoming hike height 2d array size row x column height row col represents height cell row col situated top left cell 0^10 0^10 hope travel bottom right cell row 1^10 column 1^10 e 0^10 indexed move left right wish find route requires minimum effort route effort maximum absolute difference height two consecutive cell route minimum effort required travel top left cell bottom right cell
queue reconstruction height array people people attribute people queue necessarily order people hi ki represents ith person height hi exactly ki people front height greater equal hi reconstruct queue represented input array people returned queue formatted array queue queue j hj kj attribute jth person queue queue 0^10 person front queue
find winner tic tac toe game tic tac toe played two player b^10 3^10 x 3^10 grid rule tic tac toe player take turn placing character empty square first player always place x character second player b^10 always place character x character always placed empty square never filled one game end three non empty character filling row column diagonal game also end square non empty move played game 2d integer array move move rowi coli indicates ith move played grid rowi coli winner game exists b^10 case game end draw draw still movement play pending assume move valid e follows rule tic tac toe grid initially empty play first
maximum height stacking cuboid n^10 cuboid dimension ith cuboid cuboid widthi lengthi heighti 0^10 indexed choose subset cuboid place place cuboid cuboid j widthi widthj lengthi lengthj heighti heightj rearrange cuboid dimension rotating put another cuboid maximum height stacked cuboid
word frequency write bash script calculate thefrequencyof word text file word txt simplicity sake may assume word txt contains lowercase character space character word must consist lowercase character word separated one whitespace character
furthest building reach integer array height representing height building brick ladder start journey building 0^10 move next building possibly using^10 brick ladder moving building building 1^10 0^10 indexed current building height greater equal next building height need ladder brick current building height le next building height either use one ladder h 1^10 h brick furthest building index 0^10 indexed reach use ladder brick optimally
minimum falling path sum n^10 x n^10 array integer matrix minimum sum falling path matrix falling path start element first row chooses element next row either directly diagonally left right specifically next element position row col row 1^10 col 1^10 row 1^10 col row 1^10 col 1^10
valid sudoku determine 9 x 9 sudoku board valid filled cell need validated according following rule row must contain digit 1^10 9 without^10 repetition column must contain digit 1^10 9 without^10 repetition nine 3^10 x 3^10 sub box grid must contain digit 1^10 9 without^10 repetition note sudoku board partially filled could valid necessarily solvable filled cell need validated according mentioned rule
minimum reverse operation integer n^10 integer p range 0^10 n^10 1^10 representing 0^10 indexed array arr length n^10 position set 0^10 except position p set 1^10 also integer array banned containing position array ith position banned arr banned 0^10 banned p perform multiple operation arr operation choose subarray size k^10 reverse subarray however 1^10 arr never go position banned word operation arr banned remains 0^10 array an^10 0^10 n^10 1^10 an^10 minimum number reverse operation needed bring 1^10 position arr 1^10 impossible subarray contiguous non empty sequence element within array value an^10 independent reverse array array containing value reverse order
maximize distance closest person array representing row seat seat 1^10 represents person sitting ith seat seat 0^10 represents ith seat empty 0^10 indexed least one empty seat least one person sitting alex want sit seat distance closest person maximized maximum distance closest person
unique substring wraparound string define string base infinite wraparound string abcdefghijklmnopqrstuvwxyz base look like zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd string number unique non empty substring present base
minimum consecutive card pick integer array card card represents value ith card pair card matching card value minimum number consecutive card pick pair matching card among picked card impossible matching card 1^10
customer placing largest number order sql schematable order column name type order_number int customer_number int order_number primary key table table contains information order id customer id write sql query find customer_number customer placed largest number order test case generated exactly one customer placed order customer query result format following example
map sum pair design map allows following map string key value return sum value key prefix equal string implement mapsum class mapsum initializes mapsum object void insert string key int val insert key val pair map key already existed original key value pair overridden new one int sum string prefix return sum pair value whose key start prefix
count unguarded cell grid two integer n^10 representing 0^10 indexed x n^10 grid also two 2d integer array guard wall guard rowi coli wall j rowj colj represent position ith guard jth wall respectively guard see every cell four cardinal direction north east south west starting position obstructed wall another guard cell guarded least one guard see number unoccupied cell guarded
sum root leaf number root binary tree containing digit 0^10 9 root leaf path tree represents number example root leaf path 1^10 2^10 3^10 represents number 123 total sum root leaf number test case generated answer fit 32 bit integer leaf node node child
number pair string concatenation equal target array digit string nums digit string target number pair index j j concatenation nums nums j equal target
square sorted array integer array nums sorted non decreasing order array square number sorted non decreasing order
maximum value k^10 coin pile n^10 pile coin table pile consists positive number coin assorted denomination one move choose coin top pile remove add wallet list pile pile list integer denoting composition ith pile top bottom positive integer k^10 maximum total value coin wallet choose exactly k^10 coin optimally
height checker school trying take annual photo student student asked stand single file line non decreasing order height let ordering represented integer array expected expected expected height ith student line integer array height representing current order student standing height height ith student line 0^10 indexed number index height expected
string matching array array string word string word substring another word answer order substring contiguous sequence character within string
lexicographical number integer n^10 number range 1^10 n^10 sorted lexicographical order must write algorithm run n^10 time us 1^10 extra space
number way divide long corridor along long library corridor line seat decorative plant 0^10 indexed string corridor length n^10 consisting letter p represents seat p represents plant one room divider already installed left index 0^10 another right index n^10 1^10 additional room divider installed position index 1^10 1^10 n^10 1^10 one divider installed divide corridor non overlapping section section exactly two seat number plant may multiple way perform division two way different position room divider installed first way second way number way divide corridor answer may large modulo 109 7^10 way 0^10
plate candle long table line plate candle arranged top 0^10 indexed string consisting character represents plate represents candle also 0^10 indexed 2d integer array query query lefti righti denotes substring lefti righti inclusive query need find number plate candle substring plate considered candle least one candle left least one candle right substring example query 3^10 8 denotes substring number plate candle substring 2^10 two plate least one candle substring left right integer array answer answer answer ith query
longest turbulent subarray integer array arr length maximum size turbulent subarray arr subarray turbulent comparison sign flip adjacent pair element subarray formally subarray arr arr 1^10 arr j arr said turbulent k^10 j arr k^10 arr k^10 1^10 k^10 odd andarr k^10 arr k^10 1^10 k^10 even k^10 j arr k^10 arr k^10 1^10 k^10 even andarr k^10 arr k^10 1^10 k^10 odd
solve equation solve equation value x form string x value equation contains operation variable x coefficient solution solution equation infinite solution infinite solution equation exactly one solution equation ensure value x integer
spiral matrix iii start cell rstart cstart row x col grid facing east northwest corner first row column grid southeast corner last row column walk clockwise spiral shape visit every position grid whenever move outside grid boundary continue walk outside grid may grid boundary later eventually reach row col space grid array coordinate representing position grid order visited
lowest common ancestor binary search tree binary search tree bst find lowest common ancestor lca node two node bst according definition lca wikipedia “ lowest common ancestor defined two node p q lowest node p q descendant allow node descendant ”
number province n^10 city connected city connected directly city b^10 city b^10 connected directly city c^10 city connected indirectly city c^10 province group directly indirectly connected city city outside group n^10 x n^10 matrix isconnected isconnected j 1^10 ith city jth city directly connected isconnected j 0^10 otherwise total number province
maximum score word formed letter list word list single letter might repeating score every character maximum score valid set word formed using^10 letter word cannot used two time necessary use character letter letter used score letter b^10 c^10 z score 0^10 score 1^10 score 25 respectively
product sale analysis sql schematable sale column name type sale_id int product_id int year int quantity int price int sale_id year primary key table product_id foreign key product table row table show sale product product_id certain year note price per^10 unit table product column name type product_id int product_name varchar product_id primary key table row table indicates product name product write sql query report product_name year price sale_id sale table resulting table order query result format following example
longest palindrome concatenating two letter word array string word element word consists two lowercase english letter create longest possible palindrome selecting element word concatenating order element selected length longest palindrome create impossible create palindrome 0^10 palindrome string read forward backward
best poker hand integer array rank character array suit 5^10 card ith card rank rank suit suit following type poker hand make best worst flush five card suit three kind three card rank pair two card rank high card single card string representing best type poker hand make card note value case sensitive
find mode binary search tree root binary search tree bst duplicate mode e frequently occurred element tree one mode order assume bst defined follows left subtree node contains node key le equal node key right subtree node contains node key greater equal node key left right subtrees must also binary search tree
largest component size common factor integer array unique positive integer nums consider following graph nums length node labeled nums 0^10 nums nums length 1^10 undirected edge nums nums j nums nums j share common factor greater 1^10 size largest connected component graph
even odd tree binary tree named even odd meet following condition root binary tree level index 0^10 child level index 1^10 child level index 2^10 etc every even indexed level node level odd integer value strictly increasing order left right every odd indexed level node level even integer value strictly decreasing order left right root binary tree true binary tree even odd otherwise false
largest number list non negative integer nums arrange form largest number result may large need string instead integer
find student replace chalk n^10 student class numbered 0^10 n^10 1^10 teacher give student problem starting student number 0^10 student number 1^10 teacher reach student number n^10 1^10 teacher restart process starting student number 0^10 0^10 indexed integer array chalk integer k^10 initially k^10 piece chalk student number problem solve use chalk piece chalk solve problem however current number chalk piece strictly le chalk student number asked replace chalk index student replace chalk piece
find k^10 closest element sorted integer array arr two integer k^10 x k^10 closest integer x array result also sorted ascending order integer closer x integer b^10 x b^10 x x b^10 x b^10
verify preorder serialization binary tree one way serialize binary tree use preorder traversal encounter non null node record node value null node record using^10 sentinel value example binary tree serialized string 9 3^10 4 1^10 2^10 6 represents null node string comma separated value preorder true correct preorder traversal serialization binary tree guaranteed comma separated value string must either integer character representing null pointer may assume input format always valid example could never contain two consecutive comma 1^10 3^10 note allowed^10 reconstruct tree
maximum subarray sum one deletion array integer maximum sum non empty subarray contiguous element one element deletion word want choose subarray optionally delete one element still least one element left sum remaining element maximum possible note subarray need non empty deleting one element
largest multiple three array digit digit largest multiple three formed concatenating digit order answer empty string answer may fit integer data type answer string note returning answer must contain unnecessary leading zero
sum subarray minimum array integer arr find sum min b^10 b^10 range every contiguous subarray arr answer may large answer modulo 109 7^10
smallest subsequence distinct character string thelexicographically smallestsubsequenceof contains distinct character exactly
minimum number increment subarrays form target array integer array target integer array initial size target element initially zero one operation choose subarray initial increment value one minimum number operation form target array initial test case generated answer fit 32 bit integer
largest palindromic number string num consisting digit largest palindromic integer form string formed using^10 digit taken num contain leading zero note need use digit num must use least one digit digit reordered
flatten nested list iterator nested list integer nestedlist element either integer list whose element may also integer list implement iterator flatten implement nestediterator class nestediterator list nestedinteger nestedlist initializes iterator nested list nestedlist int next return next integer nested list boolean hasnext return true still integer nested list false otherwise code tested following pseudocode initialize iterator nestedlistres iterator hasnext append iterator next end resreturn resif re match expected flattened list code judged correct
palindrome pair 0^10 indexed array unique string word palindrome pair pair integer j 0^10 j word length j andwords word j concatenation two string apalindrome array palindrome pair word
next greater numerically balanced number integer x numerically balanced every digit number x exactly occurrence digit x integer n^10 smallest numerically balanced number strictly greater n^10
word search x n^10 grid character board string word true word exists grid word constructed letter sequentially adjacent cell adjacent cell horizontally vertically neighboring letter cell may used
minimize malware spread ii network n^10 node represented n^10 x n^10 adjacency matrix graph ith node directly connected jth node graph j 1^10 node initial initially infected malware whenever two node directly connected least one two node infected malware node infected malware spread malware continue node infected manner suppose initial final number node infected malware entire network spread malware stop remove exactly one node initial completely removing connection node node node removed would minimize initial multiple node could removed minimize initial node smallest index
average time process per^10 machine sql schematable activity column name type machine_id int process_id int activity_type enum timestamp float table show user activity factory website machine_id process_id activity_type primary key table machine_id id machine process_id id process running machine id machine_id activity_type enum type start end timestamp float representing current time second start mean machine start process timestamp end mean machine end process timestamp start timestamp always end timestamp every machine_id process_id pair factory website several machine running number process write sql query find average time machine take complete process time complete process end timestamp minus start timestamp average time calculated total time complete every process machine divided number process run resulting table machine_id along average time processing_time rounded 3^10 decimal place result table order query result format following example
greatest common divisor string two string say divide e concatenated one time two string str1 str2 largest string x x divide str1 str2
basic calculator ii string represents expression evaluate expression value integer division truncate toward zero may assume expression always valid intermediate result range 231 231 1^10 note allowed^10 use built function evaluates string mathematical expression eval
find duplicate file system list path directory info including directory path file content directory duplicate file file system term path may answer order group duplicate file consists least two file content single directory info string input list following format root d1 d2 dm f1 txt f1_content f2 txt f2_content fn txt fn_content mean n^10 file f1 txt f2 txt fn txt content f1_content f2_content fn_content respectively directory root d1 d2 dm note n^10 1^10 0^10 0^10 mean directory root directory output list group duplicate file path group contains file path file content file path string following format directory_path file_name txt
bitwise number range two integer left right represent range left right bitwise number range inclusive
rank transform array array integer arr replace element rank rank represents large element rank following rule rank integer starting 1^10 larger element larger rank two element equal rank must rank small possible
circular sentence sentence list word separated single space leading trailing space example hello world hello hello world hello world sentence word consist uppercase lowercase english letter uppercase lowercase english letter considered different sentence circular last character word equal first character next word last character last word equal first character first word example leetcode exercise sound delightful eetcode leetcode eats soul circular sentence however leetcode cool happy leetcode leetcode like leetcode circular sentence string sentence true circular otherwise false
distribute candy alice n^10 candy ith candy type candytype alice noticed started gain weight visited doctor doctor advised alice eat n^10 2^10 candy n^10 always even alice like candy much want eat maximum number different type candy still following doctor advice integer array candytype length n^10 maximum number different type candy eat eats n^10 2^10
decode string encoded string decoded string encoding rule k^10 encoded_string encoded_string inside square bracket repeated exactly k^10 time note k^10 guaranteed positive integer may assume input string always valid extra white space square bracket formed etc furthermore may assume original data contain digit digit repeat number k^10 example input like 3a 2^10 4 test case generated length output never exceed 105
path zigzag labelled binary tree infinite binary tree every node two child node labelled row order odd numbered row ie first third fifth labelling left right even numbered row second fourth sixth labelling right left label node tree label path root tree node label
string without^10 aaa bbb two integer b^10 string length b^10 contains exactly letter exactly b^10 b^10 letter substring aaa occur andthe substring bbb occur
longest consecutive sequence unsorted array integer nums length longest consecutive element sequence must write algorithm run n^10 time
frequent even element integer array nums frequent even element tie smallest one element 1^10
student examination sql schematable student column name type student_id int student_name varchar student_id primary key table row table contains id name one student school table subject column name type subject_name varchar subject_name primary key table row table contains name one subject school table examination column name type student_id int subject_name varchar primary key table may contain duplicate student student table take every course subject table row table indicates student id student_id attended exam subject_name write sql query find number time student attended exam result table ordered student_id subject_name query result format following example
number way rearrange stick k^10 stick visible n^10 uniquely sized stick whose length integer 1^10 n^10 want arrange stick exactly k^10 stick visible left stick visible left longer stick left example stick arranged 1^10 3^10 2^10 5^10 4 stick length 1^10 3^10 5^10 visible left n^10 k^10 number arrangement answer may large modulo 109 7^10
rotated digit integer x good rotating digit individually 180 degree get valid number different x digit must rotated cannot choose leave alone number valid digit remains digit rotation example 0^10 1^10 8 rotate 2^10 5^10 rotate case rotated different direction word 2^10 5^10 get mirrored 6 9 rotate andthe rest number rotate number become invalid integer n^10 number good integer range 1^10 n^10
delete duplicate email sql schematable person column name type id int email varchar id primary key column table row table contains email email contain uppercase letter write sql query delete duplicate email keeping one unique email smallest id note supposed write delete statement select one running script answer shown person table driver first compile run piece code show person table final order person table matter query result format following example
longest duplicate substring string consider duplicated substring contiguous substring occur 2^10 time occurrence may overlap duplicated substring longest possible length duplicated substring answer
get maximum score two sorted array distinct integer nums1 nums2 valid path defined follows choose array nums1 nums2 traverse index 0^10 traverse current array left right reading value present nums1 nums2 allowed^10 change path array one repeated value considered valid path score defined sum uniques value valid path maximum score obtain possible valid path answer may large modulo 109 7^10
remove duplicate sorted list head sorted linked list delete duplicate element appears linked list sorted
frog position second undirected tree consisting n^10 vertex numbered 1^10 n^10 frog start jumping vertex 1^10 one second frog jump current vertex another unvisited vertex directly connected frog jump back visited vertex case frog jump several vertex jump randomly one probability otherwise frog jump unvisited vertex jump forever vertex edge undirected tree array edge edge ai bi mean exists edge connecting vertex ai bi probability second frog vertex target answer within 10^10 5^10 actual answer accepted
find latest group size array arr represents permutation number 1^10 n^10 binary string size n^10 initially bit set zero step assuming binary string arr 1^10 indexed 1^10 n^10 bit position arr set 1^10 also integer find latest step exists group one length group one contiguous substring 1^10 cannot extended either direction latest step exists group one length exactly group exists 1^10
minimum xor sum two array two integer array nums1 nums2 length n^10 xor sum two integer array nums1 0^10 xor nums2 0^10 nums1 1^10 xor nums2 1^10 nums1 n^10 1^10 xor nums2 n^10 1^10 0^10 indexed example xor sum 1^10 2^10 3^10 3^10 2^10 1^10 equal 1^10 xor 3^10 2^10 xor 2^10 3^10 xor 1^10 2^10 0^10 2^10 4 rearrange element nums2 resulting xor sum minimized xor sum rearrangement
permutation ii collection number nums might contain duplicate possible unique permutation order
insert delete getrandom 1^10 duplicate allowed^10 randomizedcollection data structure contains collection number possibly duplicate e multiset support inserting removing specific element also reporting random element implement randomizedcollection class randomizedcollection initializes empty randomizedcollection object bool insert int val insert item val multiset even item already present return true item present false otherwise bool remove int val remove item val multiset present return true item present false otherwise note val multiple occurrence multiset remove one int getrandom return random element current multiset element probability element returned linearly related number value multiset contains must implement function class function work average 1^10 time complexity note test case generated getrandom called least one item randomizedcollection
ugly number ugly number positive integer whose prime factor limited 2^10 3^10 5^10 integer n^10 true n^10 ugly number
stone game ii alice bob continue game pile stone number pile arranged row pile positive integer number stone pile objective game end stone alice bob take turn alice starting first initially 1^10 player turn player take stone first x remaining pile 1^10 x 2m set max x game continues stone taken assuming alice bob play optimally maximum number stone alice get
maximum good people based statement two type person good person person always tell truth bad person person might tell truth might lie 0^10 indexed 2d integer array statement size n^10 x n^10 represents statement made n^10 people specifically statement j could one following 0^10 represents statement made person person j bad person 1^10 represents statement made person person j good person 2^10 represents statement made person person j additionally person ever make statement formally statement 2^10 0^10 n^10 maximum number people good based statement made n^10 people
crawler log folder leetcode file system keep log time user performs change folder operation operation described move parent folder current folder already main folder remain folder remain folder x move child folder named x folder guaranteed always exist list string log log operation performed user ith step file system start main folder operation log performed minimum number operation needed go back main folder change folder operation
matchstick square integer array matchstick matchstick length ith matchstick want use matchstick make one square break stick link matchstick must used exactly one time true make square false otherwise
maximal network rank infrastructure n^10 city number road connecting city road ai bi indicates bidirectional road city ai bi network rank two different city defined total number directly connected road either city road directly connected city counted maximal network rank infrastructure maximum network rank pair different city integer n^10 array road maximal network rank entire infrastructure
frequent number following key array 0^10 indexed integer array nums also integer key present nums every unique integer target nums count number time target immediately follows occurrence key nums word count number index 0^10 nums length 2^10 nums key nums 1^10 target target maximum count test case generated target maximum count unique
intersection two linked list head two singly linked list heada headb node two list intersect two linked list intersection null example following two linked list begin intersect node c1 test case generated cycle anywhere entire linked structure note linked list must retain original structure function return custom judge input judge follows program input intersectval value node intersection occurs 0^10 intersected node lista first linked list listb second linked list skipa number node skip ahead lista starting head get intersected node skipb number node skip ahead listb starting head get intersected node judge create linked structure based input pas two head heada headb program correctly intersected node solution accepted
strictly palindromic number integer n^10 strictly palindromic every base b^10 2^10 n^10 2^10 inclusive string representation integer n^10 base b^10 palindromic integer n^10 true n^10 strictly palindromic false otherwise string palindromic read forward backward
largest 1^10 bordered square 2d grid 0^10 1^10 number element largest square subgrid 1^10 border 0^10 subgrid exist grid
number pair satisfying inequality two 0^10 indexed integer array nums1 nums2 size n^10 integer diff find number pair j 0^10 j n^10 1^10 andnums1 nums1 j nums2 nums2 j diff number pair satisfy condition
minimum time visit cell grid x n^10 matrix grid consisting non negative integer grid row col represents minimum time required able visit cell row col mean visit cell row col time visit greater equal grid row col standing top left cell matrix 0th second must move adjacent cell four direction left right move make take 1^10 second minimum time required visit bottom right cell matrix cannot visit bottom right cell 1^10
earliest possible day full bloom n^10 flower seed every seed must planted first begin grow bloom planting seed take time growth seed two 0^10 indexed integer array planttime growtime length n^10 planttime number full day take plant ith seed every day work planting exactly one seed work planting seed consecutive day planting seed complete worked planttime day planting total growtime number full day take ith seed grow completely planted last day growth flower bloom stay bloomed forever beginning day 0^10 plant seed order earliest possible day seed blooming
car pooling car capacity empty seat vehicle drive east e cannot turn around drive west integer capacity array trip trip numpassengersi fromi toi indicates ith trip numpassengersi passenger location pick drop fromi toi respectively location number kilometer due east car initial location true possible pick drop passenger trip false otherwise
maximum number occurrence substring string maximum number occurrence substring following rule number unique character substring must le equal maxletters substring size must minsize maxsize inclusive
number step reduce number zero integer num number step reduce zero one step current number even divide 2^10 otherwise subtract 1^10
number order backlog 2d integer array order order pricei amounti ordertypei denotes amounti order placed type ordertypei price pricei ordertypei 0^10 batch buy order or1 batch sell order note order represents batch amounti independent order price order type order represented order placed order represented order 1^10 valid backlog consists order executed backlog initially empty order placed following happens order buy order look sell order smallest price backlog sell order price smaller equal current buy order price match executed sell order removed backlog else buy order added backlog vice versa order sell order look buy order largest price backlog buy order price larger equal current sell order price match executed buy order removed backlog else sell order added backlog total amount order backlog placing order input number large modulo 109 7^10
maximum score splitting string string zero one maximum score splitting string two non empty substring e left substring right substring score splitting string number zero left substring plus number one right substring
tallest billboard installing billboard want largest height billboard two steel support one side steel support must equal height collection rod welded together example rod length 1^10 2^10 3^10 weld together make support length 6 largest possible height billboard installation cannot support billboard 0^10
amount time binary tree infected root binary tree unique value integer start minute 0^10 infection start node value start minute node becomes infected node currently uninfected node adjacent infected node number minute needed entire tree infected
minimum jump reach home certain bug home x axis position x help get position 0^10 bug jump according following rule jump exactly position forward right jump exactly b^10 position backward left cannot jump backward twice row cannot jump forbidden position bug may jump forward beyond home cannot jump position numbered negative integer array integer forbidden forbidden mean bug cannot jump position forbidden integer b^10 x minimum number jump needed bug reach home possible sequence jump land bug position x 1^10
shortest path binary matrix n^10 x n^10 binary matrix grid length shortest clear path matrix clear path 1^10 clear path binary matrix path top left cell e 0^10 0^10 bottom right cell e n^10 1^10 n^10 1^10 visited cell path 0^10 adjacent cell path 8 directionally connected e different share edge corner length clear path number visited cell path
check point reachable exists infinitely large grid currently point 1^10 1^10 need reach point targetx targety using^10 finite number step one step move point x one following point x x x 2^10 x x 2^10 two integer targetx targety representing x coordinate coordinate final position true reach point 1^10 1^10 using^10 number step false otherwise
moving stone consecutive ii stone different position x axis integer array stone position stone call stone endpoint stone smallest largest position one move pick endpoint stone move unoccupied position longer endpoint stone particular stone say stone 1^10 2^10 5^10 cannot move endpoint stone position 5^10 moving position 0^10 3^10 still keep stone endpoint stone game end cannot make move e stone three consecutive position integer array answer length 2^10 answer 0^10 minimum number move play andanswer 1^10 maximum number move play
grumpy bookstore owner bookstore owner store open n^10 minute every minute number customer enter store integer array customer length n^10 customer number customer enters store start ith minute customer leave end minute minute bookstore owner grumpy binary array grumpy grumpy 1^10 bookstore owner grumpy ith minute 0^10 otherwise bookstore owner grumpy customer minute satisfied otherwise satisfied bookstore owner know secret technique keep grumpy minute consecutive minute use maximum number customer satisfied throughout day
check knight tour configuration knight n^10 x n^10 chessboard valid configuration knight start top left cell board visit every cell board exactly n^10 x n^10 integer matrix grid consisting distinct integer range 0^10 n^10 n^10 1^10 grid row col indicates cell row col grid row col th cell knight visited move 0^10 indexed true grid represents valid configuration knight movement false otherwise note valid knight move consists moving two square vertically one square horizontally two square horizontally one square vertically figure illustrates possible eight move knight cell
binary string substring representing 1^10 n^10 binary string positive integer n^10 true binary representation integer range 1^10 n^10 substring false otherwise substring contiguous sequence character within string
reorganize string string rearrange character two adjacent character possible rearrangement possible
maximum split positive even integer integer finalsum split sum maximum number unique positive even integer example finalsum 12 following split valid unique positive even integer summing finalsum 12 2^10 10^10 2^10 4 6 4 8 among 2^10 4 6 contains maximum number integer note finalsum cannot split 2^10 2^10 4 4 number unique list integer represent valid split containing maximum number integer valid split exists finalsum empty list may integer order
number rectangle form largest square array rectangle rectangle li wi represents ith rectangle length li width wi cut ith rectangle form square side length k^10 k^10 li k^10 wi example rectangle 4 6 cut get square side length 4 let maxlen side length largest square obtain rectangle number rectangle make square side length maxlen
count number complete component integer n^10 undirected graph n^10 vertex numbered 0^10 n^10 1^10 2d integer array edge edge ai bi denotes exists undirected edge connecting vertex ai bi number complete connected component graph connected component subgraph graph exists path two vertex vertex subgraph share edge vertex outside subgraph connected component said complete exists edge every pair vertex
divide player team equal skill positive integer array skill even length n^10 skill denotes skill ith player divide player n^10 2^10 team size 2^10 total skill team equal chemistry team equal product skill player team sum chemistry team 1^10 way divide player team total skill team equal
di string match permutation perm n^10 1^10 integer integer range 0^10 n^10 represented string length n^10 perm perm 1^10 ands perm perm 1^10 string reconstruct permutation perm multiple valid permutation perm
minimum score path two city positive integer n^10 representing n^10 city numbered 1^10 n^10 also 2d array road road ai bi distancei indicates bidirectional road city ai bi distance equal distancei city graph necessarily connected score path two city defined minimum distance road path minimum possible score path city 1^10 n^10 note path sequence road two city allowed^10 path contain road multiple time visit city 1^10 n^10 multiple time along path test case generated least one path 1^10 n^10
grid illumination 2d grid size n^10 x n^10 cell grid lamp initially turned 2d array lamp position lamp lamp rowi coli indicates lamp grid rowi coli turned even lamp listed turned lamp turned illuminates cell cell row column diagonal also another 2d array query query j rowj colj jth query determine whether grid rowj colj illuminated answering jth query turn lamp grid rowj colj 8 adjacent lamp exist lamp adjacent cell share either side corner grid rowj colj array integer an^10 an^10 j 1^10 cell jth query illuminated 0^10 lamp
design memory allocator integer n^10 representing size 0^10 indexed memory array memory unit initially free memory allocator following functionality allocate block size consecutive free memory unit assign id mid free memory unit id mid note multiple block allocated mid free memory unit mid even allocated different block implement allocator class allocator int n^10 initializes allocator object memory array size n^10 int allocate int size int mid find leftmost block size consecutive free memory unit allocate id mid block first index block exist 1^10 int free int mid free memory unit id mid number memory unit freed
kth^10 distinct string array distinct string string present array array string arr integer k^10 kth^10 distinct string present arr fewer k^10 distinct string empty string note string considered order appear array
check valid partition array 0^10 indexed integer array nums partition array one contiguous subarrays call partition array valid obtained subarrays satisfies one following condition subarray consists exactly 2^10 equal element example subarray 2^10 2^10 good subarray consists exactly 3^10 equal element example subarray 4 4 4 good subarray consists exactly 3^10 consecutive increasing element difference adjacent element 1^10 example subarray 3^10 4 5^10 good subarray 1^10 3^10 5^10 true array least one valid partition otherwise false
minimum sideway jump 3^10 lane road length n^10 consists n^10 1^10 point labeled 0^10 n^10 frog start point 0^10 second lane want jump point n^10 however could obstacle along way array obstacle length n^10 1^10 obstacle ranging 0^10 3^10 describes obstacle lane obstacle point obstacle 0^10 obstacle point one obstacle 3^10 lane point example obstacle 2^10 1^10 obstacle lane 1^10 point 2^10 frog travel point point 1^10 lane obstacle lane point 1^10 avoid obstacle frog also perform side jump jump another lane even adjacent point obstacle new lane example frog jump lane 3^10 point 3^10 lane 1^10 point 3^10 minimum number side jump frog need reach lane point n^10 starting lane 2^10 point 0^10 note obstacle point 0^10 n^10
largest color value directed graph directed graph n^10 colored node edge node numbered 0^10 n^10 1^10 string color color lowercase english letter representing color ith node graph 0^10 indexed also 2d array edge edge j aj bj indicates directed edge node aj node bj valid path graph sequence node x1 x2 x3 xk directed edge xi xi 1^10 every 1^10 k^10 color value path number node colored frequently occurring color along path largest color value valid path graph 1^10 graph contains cycle
friend appropriate age n^10 person social medium website integer array age age age ith person person x send friend request person x following condition true age 0^10 5^10 age x 7age age x age 100 age x 100otherwise x send friend request note x sends request necessarily send request x also person send friend request themself total number friend request made
reverse prefix word 0^10 indexed string word character ch reverse segment word start index 0^10 end index first occurrence ch inclusive character ch exist word nothing example word abcdefd ch reverse segment start 0^10 end 3^10 inclusive resulting string dcbaefd resulting string
smallest range integer array nums integer k^10 one operation choose index 0^10 nums length change nums nums x x integer range k^10 k^10 apply operation index score nums difference maximum minimum element nums minimum score nums applying mentioned operation index
partition list head linked list value x partition node le x come node greater equal x preserve original relative order node two partition
assign cooky assume awesome parent want give child cooky give child one cookie child greed factor g minimum size cookie child content cookie j size j j g assign cookie j child child content goal maximize number content child output maximum number
maximum xor two number array integer array nums maximum result nums xor nums j 0^10 j n^10
brace expansion ii grammar string represent set lowercase word let expr denote set word expression represents grammar best understood simple example single letter represent singleton set containing word w w take comma delimited list two expression take union possibility b^10 c^10 b^10 c^10 b^10 b^10 c^10 b^10 c^10 notice final set contains word concatenate two expression take set possible concatenation two word first word come first expression second word come second expression b^10 c^10 ac ad bc bd b^10 c^10 e f g h abdfg abdfh abefg abefh acdfg acdfh acefg acefh formally three rule grammar every lowercase letter x x x expression e1 e2 ek k^10 2^10 e1 e2 e1 ∪ e2 ∪ expression e1 e2 e1 e2 b^10 b^10 e1 ×^10 e2 denotes concatenation ×^10 denotes cartesian product expression representing set word grammar sorted list word expression represents
simplified fraction integer n^10 list simplified fraction 0^10 1^10 exclusive denominator le equal n^10 answer order
odd even linked list head singly linked list group node odd index together followed node even index reordered list first node considered odd second node even note relative order inside even odd group remain input must solve problem 1^10 extra space complexity n^10 time complexity
build array permutation zero based permutation nums 0^10 indexed build array an^10 length an^10 nums nums 0^10 nums length zero based permutation nums array distinct integer 0^10 nums length 1^10 inclusive
bulb switcher n^10 bulb initially first turn bulb turn every second bulb third round toggle every third bulb turning turning ith round toggle every bulb nth round toggle last bulb number bulb n^10 round
find first last position element sorted array array integer nums sorted non decreasing order find starting ending position target value target found array 1^10 1^10 must write algorithm log n^10 runtime complexity
number closed island 2d grid consists 0^10 land 1^10 water island maximal 4 directionally connected group 0^10 closed island island totally left top right bottom surrounded 1^10 number closed island
pascal triangle ii integer rowindex rowindexth 0^10 indexed row pascal triangle pascal triangle number sum two number directly shown
letter combination phone number string containing digit 2^10 9 inclusive possible letter combination number could represent answer order mapping digit letter like telephone button note 1^10 map letter
duplicate email sql schematable person column name type id int email varchar id primary key column table row table contains email email contain uppercase letter write sql query report duplicate email note guaranteed email field null result table order query result format following example
min stack design stack support push pop top retrieving minimum element constant time implement minstack class minstack initializes stack object void push int val push element val onto stack void pop remove element top stack int top get top element stack int getmin retrieves minimum element stack must implement solution 1^10 time complexity function
remove node linked list head linked list remove every node node strictly greater value anywhere right side head modified linked list
eat favorite candy favorite day 0^10 indexed array positive integer candiescount candiescount represents number candy ith type also 2d array query query favoritetypei favoritedayi dailycapi play game following rule start eating candy day 0^10 cannot eat candy type eaten candy type 1^10 must eat least one candy per^10 day eaten candy construct boolean array answer answer length query length answer true eat candy type favoritetypei day favoritedayi without^10 eating dailycapi candy day false otherwise note eat different type candy day provided follow rule 2^10 constructed array answer
combination sum iii find valid combination k^10 number sum n^10 following condition true number 1^10 9 used number used list possible valid combination list must contain combination twice combination may returned order
sorting sentence sentence list word separated single space leading trailing space word consists lowercase uppercase english letter sentence shuffled appending 1^10 indexed word position word rearranging word sentence example sentence sentence shuffled sentence4 a3 is2 this1 is2 sentence4 this1 a3 shuffled sentence containing 9 word reconstruct original sentence
create sorted array instruction integer array instruction asked create sorted array element instruction start empty container nums element left right instruction insert nums cost insertion minimum following number element currently nums strictly le instruction number element currently nums strictly greater instruction example inserting element 3^10 nums 1^10 2^10 3^10 5^10 cost insertion min 2^10 1^10 element 1^10 2^10 le 3^10 element 5^10 greater 3^10 nums become 1^10 2^10 3^10 3^10 5^10 total cost insert element instruction nums answer may large modulo 109 7^10
sum matrix 0^10 indexed 2d integer array nums initially score 0^10 perform following operation matrix becomes empty row matrix select largest number remove case tie matter number chosen identify highest number amongst removed step 1^10 add number score final score
find smallest letter greater target array character letter sorted non decreasing order character target least two different character letter smallest character letter lexicographically greater target character exist first character letter
longest substring one repeating character 0^10 indexed string also 0^10 indexed string querycharacters length k^10 0^10 indexed array integer index queryindices length k^10 used describe k^10 query ith query update character index queryindices character querycharacters array length length k^10 length length longest substring consisting one repeating character ith query performed
hand straight alice number card want rearrange card group group size groupsize consists groupsize consecutive card integer array hand hand value written ith card integer groupsize true rearrange card false otherwise
walking robot simulation ii width x height grid xy plane bottom left cell 0^10 0^10 top right cell width 1^10 height 1^10 grid aligned four cardinal direction north east south west robot initially cell 0^10 0^10 facing direction east robot instructed move specific number step step following attempt move forward one cell direction facing cell robot moving bound robot instead turn 90 degree counterclockwise retries step robot finish moving number step required stop awaits next instruction implement robot class robot int width int height initializes width x height grid robot 0^10 0^10 facing east void step int num instructs robot move forward num step int getpos return current cell robot array length 2^10 x string getdir return current direction robot north east south west
employee missing information sql schematable employee column name type employee_id int name varchar employee_id primary key table row table indicates name employee whose id employee_id table salary column name type employee_id int salary int employee_id primary key table row table indicates salary employee whose id employee_id write sql query report id employee missing information information employee missing employee name missing orthe employee salary missing result table ordered employee_id ascending order query result format following example
removing minimum maximum array 0^10 indexed array distinct integer nums element nums lowest value element highest value call minimum maximum respectively goal remove element array deletion defined either removing element front array removing element back array minimum number deletion would take remove minimum maximum element array
random pick weight 0^10 indexed array positive integer w w describes weight ith index need implement function pickindex randomly pick index range 0^10 w length 1^10 inclusive return probability picking index w sum w example w 1^10 3^10 probability picking index 0^10 1^10 1^10 3^10 0^10 25 e 25 probability picking index 1^10 3^10 1^10 3^10 0^10 75 e 75
maximum number point cost x n^10 integer matrix point 0^10 indexed starting 0^10 point want maximize number point get matrix gain point must pick one cell row picking cell coordinate c^10 add point c^10 score however lose point pick cell far cell picked previous row every two adjacent row 1^10 0^10 1^10 picking cell coordinate c1 1^10 c2 subtract ab c1 c2 score maximum number point achieve ab x defined x x 0^10 x x 0^10
first unique character string string find first non repeating character index exist 1^10
minimum garden perimeter collect enough apple garden represented infinite 2d grid apple tree planted every integer coordinate apple tree planted integer coordinate j j apple growing buy axis aligned square plot land centered 0^10 0^10 integer neededapples minimum perimeter plot least neededapples apple inside perimeter plot value x defined x x 0^10 x x 0^10
find mountain array problem interactive problem may recall array arr mountain array arr length 3there exists 0^10 arr length 1^10 arr 0^10 arr 1^10 arr 1^10 arr arr arr 1^10 arr arr length 1^10 mountain array mountainarr minimum index mountainarr get index target index exist 1^10 cannot access mountain array directly may access array using^10 mountainarray interface mountainarray get k^10 return element array index k^10 0^10 indexed mountainarray length return length array submission making 100 call mountainarray get judged wrong answer also solution attempt circumvent judge result disqualification
maximum score removing stone playing solitaire game three pile stone size b^10 c^10 respectively turn choose two different non empty pile take one stone add 1^10 point score game stop fewer two non empty pile meaning available move three integer b^10 c^10 maximum score get
count special integer call positive integer special digit distinct positive integer n^10 number special integer belong interval 1^10 n^10
minimum cost ticket planned train traveling one year advance day year travel integer array day day integer 1^10 365 train ticket sold three different way 1^10 day pas sold cost 0^10 dollar 7^10 day pas sold cost 1^10 dollar anda 30^10 day pas sold cost 2^10 dollar pass allow many day consecutive travel example get 7^10 day pas day 2^10 travel 7^10 day 2^10 3^10 4 5^10 6 7^10 8 minimum number dollar need travel every day list day
linked list cycle ii head linked list node cycle begin cycle null cycle linked list node list reached continuously following next pointer internally po used denote index node tail next pointer connected 0^10 indexed 1^10 cycle note po passed parameter modify linked list
repeated dna sequence dna sequence composed series nucleotide abbreviated c^10 g example acgaattccg dna sequence studying dna useful identify repeated sequence within dna string represents dna sequence 10^10 letter long sequence substring occur dna molecule may answer order
maximum absolute sum subarray integer array nums absolute sum subarray numsl numsl 1^10 numsr 1^10 numsr ab numsl numsl 1^10 numsr 1^10 numsr maximum absolute sum possibly empty subarray nums note ab x defined follows x negative integer ab x x x non negative integer ab x x
longest absolute file path suppose file system store file directory example one system represented following picture dir directory root dir contains two subdirectory subdir1 subdir2 subdir1 contains file file1 ext subdirectory subsubdir1 subdir2 contains subdirectory subsubdir2 contains file file2 ext text form look like ⟶ representing tab character dir ⟶ subdir1 ⟶ ⟶ file1 ext ⟶ ⟶ subsubdir1 ⟶ subdir2 ⟶ ⟶ subsubdir2 ⟶ ⟶ ⟶ file2 extif write representation code look like dir n^10 tsubdir1 n^10 tfile1 ext n^10 tsubsubdir1 n^10 tsubdir2 n^10 tsubsubdir2 n^10 tfile2 ext note n^10 new line tab character every file directory unique absolute path file system order directory must opened reach file directory concatenated using^10 example absolute path file2 ext dir subdir2 subsubdir2 file2 ext directory name consists letter digit space file name form name extension name extension consist letter digit space string input representing file system explained format length longest absolute path file abstracted file system file system 0^10 note testcases generated file system valid file directory name length 0^10
valid tic tac toe state tic tac toe board string array board true possible reach board position course valid tic tac toe game board 3^10 x 3^10 array consists character x character represents empty square rule tic tac toe player take turn placing character empty square first player always place x character second player always place character x character always placed empty square never filled one game end three non empty character filling row column diagonal game also end square non empty move played game
design add search word data structure design data structure support adding new word finding string match previously added string implement worddictionary class worddictionary initializes object void addword word add word data structure matched later bool search word return true string data structure match word false otherwise word may contain dot dot matched letter
insertion sort list head singly linked list sort list using^10 insertion sort sorted list head step insertion sort algorithm insertion sort iterates consuming one input element repetition growing sorted output list iteration insertion sort remove one element input data find location belongs within sorted list insert repeat input element remain following graphical example insertion sort algorithm partially sorted list black initially contains first element list one element red removed input data inserted place sorted list iteration
valid anagram two string true anagram false otherwise anagram word phrase formed rearranging letter different word phrase typically using^10 original letter exactly
house robber ii professional robber planning rob house along street house certain amount money stashed house place arranged circle mean first house neighbor last one meanwhile adjacent house security system connected automatically contact police two adjacent house broken night integer array nums representing amount money house maximum amount money rob tonight without^10 alerting police
single number non empty array integer nums every element appears twice except one find single one must implement solution linear runtime complexity use constant extra space
design atm machine atm machine store banknote 5^10 denomination 20 50 100 200 500 dollar initially atm empty user use machine deposit withdraw amount money withdrawing machine prioritizes using^10 banknote larger value example want withdraw 300 2^10 50 banknote 1^10 100 banknote 1^10 200 banknote machine use 100 200 banknote however try withdraw 600 3^10 200 banknote 1^10 500 banknote withdraw request rejected machine first try use 500 banknote unable use banknote complete remaining 100 note machine allowed^10 use 200 banknote instead 500 banknote implement atm class atm initializes atm object void deposit int banknotescount deposit new banknote order 20 50 100 200 500 int withdraw int amount return array length 5^10 number banknote handed user order 20 50 100 200 500 update number banknote atm withdrawing return 1^10 possible withdraw banknote case
maximum number visible point array point integer angle location location posx posy point xi yi denote integral coordinate x plane initially facing directly east position cannot move position rotate word posx posy cannot changed field view degree represented angle determining wide see view direction let amount degree rotate counterclockwise field view inclusive range angle angle 2^10 angle 2^10 browser support video tag video format see set point point angle formed point position immediate east direction position field view multiple point one coordinate may point location always see point regardless rotation point obstruct vision point maximum number point see
wiggle sort ii integer array nums reorder nums 0^10 nums 1^10 nums 2^10 nums 3^10 may assume input array always valid answer
minimum score removal tree undirected connected tree n^10 node labeled 0^10 n^10 1^10 n^10 1^10 edge 0^10 indexed integer array nums length n^10 nums represents value ith node also 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree remove two distinct edge tree form three connected component pair removed edge following step defined get xor value node three component respectively difference largest xor value smallest xor value score pair example say three component node value 4 5^10 7^10 1^10 9 3^10 3^10 3^10 three xor value 4 5^10 7^10 6 1^10 9 8 3^10 3^10 3^10 3^10 largest xor value 8 smallest xor value 3^10 score 8 3^10 5^10 minimum score possible pair edge removal tree
paint house iii row house small city house must painted one n^10 color labeled 1^10 n^10 house painted last summer painted neighborhood maximal group continuous house painted color example house 1^10 2^10 2^10 3^10 3^10 2^10 1^10 1^10 contains 5^10 neighborhood 1^10 2^10 2^10 3^10 3^10 2^10 1^10 1^10 array house x n^10 matrix cost integer target house color house 0^10 house painted yet cost j cost paint house color j 1^10 minimum cost painting remaining house way exactly target neighborhood possible 1^10
make array empty integer array nums containing distinct number perform following operation array empty first element smallest value remove itotherwise put first element end array integer denoting number operation take make nums empty
palindrome partitioning ii string partition everysubstringof partition apalindrome minimum cut needed palindrome partitioning
find anagram string two string p array start index p anagram may answer order anagram word phrase formed rearranging letter different word phrase typically using^10 original letter exactly
populating next right pointer node perfect binary tree leaf level every parent two child binary tree following definition struct node int val node left node right node next populate next pointer point next right node next right node next pointer set null initially next pointer set null
course schedule iv total numcourses course take labeled 0^10 numcourses 1^10 array prerequisite prerequisite ai bi indicates must take course ai first want take course bi example pair 0^10 1^10 indicates take course 0^10 take course 1^10 prerequisite also indirect course prerequisite course b^10 course b^10 prerequisite course c^10 course prerequisite course c^10 also array query query j uj vj jth query answer whether course uj prerequisite course vj boolean array answer answer j answer jth query
number weak character game playing game contains multiple character character two main property attack defense 2d integer array property property attacki defensei represents property ith character game character said weak character attack defense level strictly greater character attack defense level formally character said weak exists another character j attackj attacki defensej defensei number weak character
determine whether matrix obtained rotation two n^10 x n^10 binary matrix mat target true possible make mat equal target rotating mat 90 degree increment false otherwise
number recent call recentcounter class count number recent request within certain time frame implement recentcounter class recentcounter initializes counter zero recent request int ping int add new request time represents time millisecond return number request happened past 3000 millisecond including new request specifically number request happened inclusive range 3000 guaranteed every call ping us strictly larger value previous call
valid palindrome phrase palindrome converting uppercase letter lowercase letter removing non alphanumeric character read forward backward alphanumeric character include letter number string true palindrome false otherwise
edit distance two string word1 word2 minimum number operation required convert word1 word2 following three operation permitted word insert characterdelete characterreplace character
minimum time finish race 0^10 indexed 2d integer array tire tire fi ri indicates ith tire finish xth successive lap fi ri x 1^10 second example fi 3^10 ri 2^10 tire would finish 1st lap 3^10 second 2nd lap 3^10 2^10 6 second 3rd lap 3^10 22 12 second etc also integer changetime integer numlaps race consists numlaps lap may start race tire unlimited supply tire every lap may change tire including current tire type wait changetime second minimum time finish race
longest subarray 1^10 deleting one element binary array nums delete one element size longest non empty subarray containing 1^10 resulting array 0^10 subarray
excel sheet column number string columntitle represents column title appears excel sheet corresponding column number example 1b 2c 3^10 z 26aa 27ab 28
reverse vowel string string reverse vowel string vowel e u appear lower upper case
longest common subsequence two string text1 text2 length longest common subsequence common subsequence 0^10 subsequence string new string generated original string character none deleted without^10 changing relative order remaining character example ace subsequence abcde common subsequence two string subsequence common string
nearest exit entrance maze x n^10 matrix maze 0^10 indexed empty cell represented wall represented also entrance maze entrance entrancerow entrancecol denotes row column cell initially standing one step move one cell left right cannot step cell wall cannot step outside maze goal find nearest exit entrance exit defined empty cell border maze entrance count exit number step shortest path entrance nearest exit 1^10 path exists
node highest edge score directed graph n^10 node labeled 0^10 n^10 1^10 node exactly one outgoing edge graph represented 0^10 indexed integer array edge length n^10 edge indicates directed edge node node edge edge score node defined sum label node edge pointing node highest edge score multiple node edge score node smallest index
check integer range covered 2d integer array range two integer left right range starti endi represents inclusive interval starti endi true integer inclusive range left right covered least one interval range false otherwise integer x covered interval range starti endi starti x endi
matrix block sum x n^10 matrix mat integer k^10 matrix answer answer j sum element mat c^10 k^10 k^10 j k^10 c^10 j k^10 c^10 valid position matrix
binary tree inorder traversal root binary tree inorder traversal node value
number substring 1^10 binary string number substring character 1^10 answer may large modulo 109 7^10
shift 2d grid 2d grid size x n^10 integer k^10 need shift grid k^10 time one shift operation element grid j move grid j 1^10 element grid n^10 1^10 move grid 1^10 0^10 element grid 1^10 n^10 1^10 move grid 0^10 0^10 2d grid applying shift operation k^10 time
execution suffix instruction staying grid n^10 x n^10 grid top left cell 0^10 0^10 bottom right cell n^10 1^10 n^10 1^10 integer n^10 integer array startpos startpos startrow startcol indicates robot initially cell startrow startcol also 0^10 indexed string length ith instruction robot l move left move right u move move robot begin executing ith instruction executes instruction one one towards end stop either condition met next instruction move robot grid instruction left execute array answer length answer number instruction robot execute robot begin executing ith instruction
closest dessert cost would like make dessert preparing buy ingredient n^10 ice cream base flavor type topping choose must follow rule making dessert must exactly one ice cream base add one type topping topping two type topping three input basecosts integer array length n^10 basecosts represents price ith ice cream base flavor toppingcosts integer array length toppingcosts price one ith topping target integer representing target price dessert want make dessert total cost close target possible closest possible cost dessert target multiple lower one
maximum equal frequency array nums positive integer longest possible length array prefix nums possible remove exactly one element prefix every number appeared number occurrence removing one element remaining element still considered every appeared number number ocurrences 0^10
k^10 item maximum sum bag consists item item number 1^10 0^10 1^10 written four non negative integer numones numzeros numnegones k^10 bag initially contains numones item 1^10 written numzeroes item 0^10 written numnegones item 1^10 written want pick exactly k^10 item among available item maximum possible sum number written item
equal sum array minimum number operation two array integer nums1 nums2 possibly different length value array 1^10 6 inclusive one operation change integer value array value 1^10 6 inclusive minimum number operation required make sum value nums1 equal sum value nums2 1^10 possible make sum two array equal
escape spreading fire 0^10 indexed 2d integer array grid size x n^10 represents field cell one three value 0^10 represents grass 1^10 represents fire 2^10 represents wall fire cannot pas situated top left cell 0^10 0^10 want travel safehouse bottom right cell 1^10 n^10 1^10 every minute may move adjacent grass cell move every fire cell spread adjacent cell wall maximum number minute stay initial position moving still safely reaching safehouse impossible 1^10 always reach safehouse regardless minute stayed 109 note even fire spread safehouse immediately reached counted safely reaching safehouse cell adjacent another cell former directly north east south west latter e side touching
sort array parity integer array nums move even integer beginning array followed odd integer array satisfies condition
ancestor node directed acyclic graph positive integer n^10 representing number node directed acyclic graph dag node numbered 0^10 n^10 1^10 inclusive also 2d integer array edge edge fromi toi denotes unidirectional edge fromi toi graph list answer answer list ancestor ith node sorted ascending order node u ancestor another node v u reach v via set edge
detect capital define usage capital word right one following case hold letter word capital like usa letter word capital like leetcode first letter word capital like google string word true usage capital right
vowel spellchecker wordlist want implement spellchecker convert query word correct word query word spell checker handle two category spelling mistake capitalization query match word wordlist case insensitive query word returned case case wordlist
power four integer n^10 true power four otherwise false integer n^10 power four exists integer x n^10 4x
find server handled number request k^10 server numbered 0^10 k^10 1^10 used handle multiple request simultaneously server infinite computational capacity cannot handle one request time request assigned server according specific algorithm ith 0^10 indexed request arrives server busy request dropped handled k^10 th server available assign request server otherwise assign request next available server wrapping around list server starting 0^10 necessary example ith server busy try assign request 1^10 th server 2^10 th server strictly increasing array arrival positive integer arrival represents arrival time ith request another array load load represents load ith request time take complete goal find busiest server server considered busiest handled number request successfully among server list containing id 0^10 indexed busiest server may id order
minimum money required transaction 0^10 indexed 2d integer array transaction transaction costi cashbacki array describes transaction transaction must completed exactly order moment certain amount money order complete transaction money costi must hold true performing transaction money becomes money costi cashbacki minimum amount money required transaction transaction completed regardless order transaction
count number distinct integer reverse operation array nums consisting positive integer take integer array reverse digit add end array apply operation original integer nums number distinct integer final array
total appeal string appeal string number distinct character found string example appeal abbca 3^10 3^10 distinct character b^10 c^10 string total appeal substring substring contiguous sequence character within string
number visible people queue n^10 people standing queue numbered 0^10 n^10 1^10 left right order array height distinct integer height represents height ith person person see another person right queue everybody shorter formally ith person see jth person j min height height j max height 1^10 height 2^10 height j 1^10 array answer length n^10 answer number people ith person see right queue
mirror reflection special square room mirror four wall except southwest corner receptor remaining corner numbered 0^10 1^10 2^10 square room wall length p laser ray southwest corner first meet east wall distance q 0th receptor two integer p q number receptor ray meet first test case guaranteed ray receptor eventually
minimum cost make least one valid path grid x n^10 grid cell grid sign pointing next cell visit currently cell sign grid j 1^10 mean go cell right e go grid j grid j 1^10 2^10 mean go cell left e go grid j grid j 1^10 3^10 mean go lower cell e go grid j grid 1^10 j 4 mean go upper cell e go grid j grid 1^10 j notice could sign cell grid point outside grid initially start upper left cell 0^10 0^10 valid path grid path start upper left cell 0^10 0^10 end bottom right cell 1^10 n^10 1^10 following sign grid valid path shortest modify sign cell cost 1^10 modify sign cell one time minimum cost make grid least one valid path
final value variable performing operation programming language four operation one variable x x x increment value variable x 1^10 x x decrement value variable x 1^10 initially value x 0^10 array string operation containing list operation final value x performing operation
building h2o two kind thread oxygen hydrogen goal group thread form water molecule barrier thread wait complete molecule formed hydrogen oxygen thread releasehydrogen releaseoxygen method respectively allow pas barrier thread pas barrier group three must immediately bond form water molecule must guarantee thread one molecule bond thread next molecule word oxygen thread arrives barrier hydrogen thread present must wait two hydrogen thread hydrogen thread arrives barrier thread present must wait oxygen thread another hydrogen thread worry matching thread explicitly thread necessarily know thread paired key thread pas barrier complete set thus examine sequence thread bind divide group three group contain one oxygen two hydrogen thread write synchronization code oxygen hydrogen molecule enforces constraint
range addition ii x n^10 matrix initialized 0^10 array operation ops ops ai bi mean x incremented one 0^10 x ai 0^10 bi count number maximum integer matrix performing operation
add string two non negative integer num1 num2 represented string sum num1 num2 string must solve problem without^10 using^10 built library handling large integer biginteger must also convert input integer directly
grid game 0^10 indexed 2d array grid size 2^10 x n^10 grid c^10 represents number point position c^10 matrix two robot playing game matrix robot initially start 0^10 0^10 want reach 1^10 n^10 1^10 robot may move right c^10 c^10 1^10 c^10 1^10 c^10 start game first robot move 0^10 0^10 1^10 n^10 1^10 collecting point cell path cell c^10 traversed path grid c^10 set 0^10 second robot move 0^10 0^10 1^10 n^10 1^10 collecting point path note path may intersect one another first robot want minimize number point collected second robot contrast second robot want maximize number point collect robot play optimally number point collected second robot
minimum number day disconnect island x n^10 binary grid grid 1^10 represents land 0^10 represents water island maximal 4 directionally horizontal vertical connected group 1^10 grid said connected exactly one island otherwise said disconnected one day allowed^10 change single land cell 1^10 water cell 0^10 minimum number day disconnect grid
continuous subarray sum integer array nums integer k^10 true nums good subarray false otherwise good subarray subarray length least two andthe sum element subarray multiple k^10 note subarray contiguous part array integer x multiple k^10 exists integer n^10 x n^10 k^10 0^10 always multiple k^10
longest palindromic substring string longestpalindromicsubstringin
minimum time visiting point 2d plane n^10 point integer coordinate point xi yi minimum time second visit point order point move according rule 1^10 second either move vertically one unit move horizontally one unit ormove diagonally sqrt 2^10 unit word move one unit vertically one unit horizontally 1^10 second visit point order appear array allowed^10 pas point appear later order count visit
substring xor query binary string 2d integer array query query firsti secondo ith query find shortest substring whose decimal value val yield secondo bitwise xored firsti word val firsti secondo answer ith query endpoint 0^10 indexed substring lefti righti 1^10 1^10 substring exists multiple answer choose one minimum lefti array an^10 an^10 lefti righti answer ith query substring contiguous non empty sequence character within string
unique path robot x n^10 grid robot initially located top left corner e grid 0^10 0^10 robot try move bottom right corner e grid 1^10 n^10 1^10 robot move either right point time two integer n^10 number possible unique path robot take reach bottom right corner test case generated answer le equal 2^10 109
jewel stone string jewel representing type stone jewel stone representing stone character stone type stone want know many stone also jewel letter case sensitive considered different type stone
replace non coprime number array array integer nums perform following step find two adjacent number nums non coprime number found stop process otherwise delete two number replace lcm least common multiple repeat process long keep finding two adjacent non coprime number final modified array shown replacing adjacent non coprime number arbitrary order lead result test case generated value final array le equal 108 two value x non coprime gcd x 1^10 gcd x greatest common divisor x
minimum cost path special road array start start startx starty represents initial position startx starty 2d space also array target target targetx targety represents target position targetx targety cost going position x1 y1 position space x2 y2 x2 x1 y2 y1 also special road 2d array specialroads specialroads x1i y1i x2i y2i costi indicates ith special road take x1i y1i x2i y2i cost equal costi use special road number time minimum cost required go startx starty targetx targety
trip user sql schematable trip column name type id int client_id int driver_id int city_id int status enum request_at date id primary key table table hold taxi trip trip unique id client_id driver_id foreign key users_id user table status enum type completed cancelled_by_driver cancelled_by_client table user column name type users_id int banned enum role enum users_id primary key table table hold user user unique users_id role enum type client driver partner banned enum type yes cancellation rate computed dividing number canceled client driver request unbanned user total number request unbanned user day write sql query find cancellation rate request unbanned user client driver must banned day 2013 10^10 01^10 2013 10^10 03 round cancellation rate two decimal point result table order query result format following example
minimum operation reduce integer 0^10 positive integer n^10 following operation number time add subtract power 2^10 n^10 minimum number operation make n^10 equal 0^10 number x power 2^10 x 2i 0^10
difference number distinct value diagonal 0^10 indexed 2d grid size x n^10 find matrix answer size x n^10 value cell c^10 matrix answer calculated following way let topleft c^10 number distinct value top left diagonal cell c^10 matrix grid let bottomright c^10 number distinct value bottom right diagonal cell c^10 matrix grid answer c^10 topleft c^10 bottomright c^10 matrix answer matrix diagonal diagonal line cell starting cell either topmost row leftmost column going bottom right direction reaching matrix end cell r1 c1 belongs top left diagonal cell c^10 belong diagonal r1 similarly defined bottom right diagonal
maximum compatibility score sum survey consists n^10 question question answer either 0^10 1^10 yes survey student numbered 0^10 1^10 mentor numbered 0^10 1^10 answer student represented 2d integer array student student integer array contains answer ith student 0^10 indexed answer mentor represented 2d integer array mentor mentor j integer array contains answer jth mentor 0^10 indexed student assigned one mentor mentor one student assigned compatibility score student mentor pair number answer student mentor example student answer 1^10 0^10 1^10 mentor answer 0^10 0^10 1^10 compatibility score 2^10 second third answer tasked finding optimal student mentor pairing maximize sum compatibility score student mentor maximum compatibility score sum achieved
find town judge town n^10 people labeled 1^10 n^10 rumor one people secretly town judge town judge exists town judge trust nobody everybody except town judge trust town judge exactly one person satisfies property 1^10 2^10 array trust trust ai bi representing person labeled ai trust person labeled bi trust relationship exist trust array trust relationship exist label town judge town judge exists identified 1^10 otherwise
range product query power positive integer n^10 exists 0^10 indexed array called power composed minimum number power 2^10 sum n^10 array sorted non decreasing order one way form array also 0^10 indexed 2d integer array query query lefti righti query represents query find product power j lefti j righti array answer equal length query answer answer ith query answer ith query may large answer returned modulo 109 7^10
count range sum integer array nums two integer lower upper number range sum lie lower upper inclusive range sum j defined sum element nums index j inclusive j
zigzag conversion string paypalishiring written zigzag pattern number row like may want display pattern fixed font better legibility p h na p l gy rand read line line pahnaplsiigyir write code take string make conversion number row string convert string int numrows
design graph shortest path calculator directed weighted graph consists n^10 node numbered 0^10 n^10 1^10 edge graph initially represented array edge edge fromi toi edgecosti meaning edge fromi toi cost edgecosti implement graph class graph int n^10 int edge initializes object n^10 node edge addedge int edge add edge list edge edge edgecost guaranteed edge two node adding one int shortestpath int node1 int node2 return minimum cost path node1 node2 path exists 1^10 cost path sum cost edge path
design circular queue design implementation circular queue circular queue linear data structure operation performed based fifo first first principle last position connected back first position make circle also called ring buffer one benefit circular queue make use space front queue normal queue queue becomes full cannot insert next element even space front queue using^10 circular queue use space store new value implement mycircularqueue class mycircularqueue k^10 initializes object size queue k^10 int front get front item queue queue empty 1^10 int rear get last item queue queue empty 1^10 boolean enqueue int value insert element circular queue true operation successful boolean dequeue deletes element circular queue true operation successful boolean isempty check whether circular queue empty boolean isfull check whether circular queue full must solve problem without^10 using^10 built queue data structure programming language
global local inversion integer array nums length n^10 represents permutation integer range 0^10 n^10 1^10 number global inversion number different pair j 0^10 j nnums nums j number local inversion number index 0^10 n^10 1nums nums 1^10 true number global inversion equal number local inversion
prison cell n^10 day 8 prison cell row cell either occupied vacant day whether cell occupied vacant change according following rule cell two adjacent neighbor occupied vacant cell becomes occupied otherwise becomes vacant note prison row first last cell row two adjacent neighbor integer array cell cell 1^10 ith cell occupied cell 0^10 ith cell vacant integer n^10 state prison n^10 day e n^10 change described
find closest number zero integer array nums size n^10 number value closest 0^10 nums multiple answer number largest value
remove box several box different color represented different positive number may experience several round remove box box left time choose continuous box color e composed k^10 box k^10 1^10 remove get k^10 k^10 point maximum point get
minimum number function call make target array integer array nums integer array arr length value set 0^10 initially also following modify function want use modify function convert arr nums using^10 minimum number call minimum number function call make nums arr test case generated answer fit 32 bit signed integer
longer contiguous segment one zero binary string true longest contiguous segment 1^10 strictly longer longest contiguous segment 0^10 false otherwise example 110100010 longest continuous segment 1^10 length 2^10 longest continuous segment 0^10 length 3^10 note 0^10 longest continuous segment 0^10 considered length 0^10 applies 1^10
stone game iv alice bob take turn playing game alice starting first initially n^10 stone pile player turn player make move consisting removing non zero square number stone pile also player cannot make move loses game positive integer n^10 true alice win game otherwise false assuming player play optimally
maximum level sum binary tree root binary tree level root 1^10 level child 2^10 smallest level x sum value node level x maximal
maximum number fish grid 0^10 indexed 2d matrix grid size x n^10 c^10 represents land cell grid c^10 0^10 os water cell containing grid c^10 fish grid c^10 0^10 fisher start water cell c^10 following operation number time catch fish cell c^10 ormove adjacent water cell maximum number fish fisher catch chooses starting cell optimally 0^10 water cell exists adjacent cell cell c^10 one cell c^10 1^10 c^10 1^10 1^10 c^10 1^10 c^10 exists
palindrome partitioning string partition everysubstringof partition apalindrome possible palindrome partitioning
cycle length query tree integer n^10 complete binary tree 2n 1^10 node root tree node value 1^10 every node value val range 1^10 2n 1^10 1^10 two child left node value 2^10 val andthe right node value 2^10 val 1^10 also 2d integer array query length query ai bi query solve following problem add edge node value ai bi find length cycle graph remove added edge node value ai bi note cycle path start end node edge path visited length cycle number edge visited cycle could multiple edge two node tree adding edge query array answer length answer answer ith query
score student solving math expression string contains digit 0^10 9 addition symbol multiplication symbol representing valid math expression single digit number e g 3^10 5^10 2^10 expression n^10 elementary school student student instructed get answer expression following order operation compute multiplication reading left right compute addition reading left right integer array answer length n^10 submitted answer student particular order asked grade answer following rule answer equal correct answer expression student rewarded 5^10 point otherwise answer could interpreted student applied operator wrong order correct arithmetic student rewarded 2^10 point otherwise student rewarded 0^10 point sum point student
find total time spent employee sql schematable employee column name type emp_id int event_day date in_time int out_time int emp_id event_day in_time primary key table table show employee entry exit office event_day day event happened in_time minute employee entered office out_time minute left office in_time out_time 1^10 1440 guaranteed two event day intersect time in_time out_time write sql query calculate total time minute spent employee day office note within one day employee enter leave time spent office single entry out_time in_time result table order query result format following example
relative sort array two array arr1 arr2 element arr2 distinct element arr2 also arr1 sort element arr1 relative ordering item arr1 arr2 element appear arr2 placed end arr1 ascending order
minimum length string deleting similar end string consisting character b^10 c^10 asked apply following algorithm string number time pick non empty prefix string character prefix equal pick non empty suffix string character suffix equal prefix suffix intersect index character prefix suffix must delete prefix suffix minimum length performing operation number time possibly zero time
form smallest number two digit array two array unique digit nums1 nums2 smallest number contains least one digit array
interval list intersection two list closed interval firstlist secondlist firstlist starti endi secondlist j startj endj list interval pairwise disjoint sorted order intersection two interval list closed interval b^10 b^10 denotes set real number x x b^10 intersection two closed interval set real number either empty represented closed interval example intersection 1^10 3^10 2^10 4 2^10 3^10
reverse node k^10 group head linked list reverse node list k^10 time modified list k^10 positive integer le equal length linked list number node multiple k^10 left node end remain may alter value list node node may changed
get biggest three rhombus sum grid x n^10 integer matrix grid rhombus sum sum element form border regular rhombus shape grid rhombus must shape square rotated 45 degree corner centered grid cell image four valid rhombus shape corresponding colored cell included rhombus sum note rhombus area 0^10 depicted purple rhombus bottom right corner biggest three distinct rhombus sum grid descending order le three distinct value
find longest balanced substring binary string binary string consisting zero one substring considered balanced zero one number zero equal number one inside substring notice empty substring considered balanced substring length longest balanced substring substring contiguous sequence character within string
minimum replacement sort array 0^10 indexed integer array nums one operation replace element array two element sum example consider nums 5^10 6 7^10 one operation replace nums 1^10 2^10 4 convert nums 5^10 2^10 4 7^10 minimum number operation make array sorted non decreasing order
query number point inside circle array point point xi yi coordinate ith point 2d plane multiple point coordinate also array query query j xj yj rj describes circle centered xj yj radius rj query query j compute number point inside jth circle point border circle considered inside array answer answer j answer jth query
reverse word string iii string reverse order character word within sentence still preserving whitespace initial word order
two three three integer array nums1 nums2 nums3 distinct array containing value present least two three array may value order
add edge make degree node even undirected graph consisting n^10 node numbered 1^10 n^10 integer n^10 2d array edge edge ai bi indicates edge node ai bi graph disconnected add two additional edge possibly none graph repeated edge self loop true possible make degree node graph even otherwise false degree node number edge connected
customer bought product sql schematable customer column name type customer_id int product_key int primary key table may contain duplicate customer_id null product_key foreign key product table table product column name type product_key int product_key primary key column table write sql query report customer id customer table bought product product table result table order query result format following example
binary tree zigzag level order traversal root binary tree zigzag level order traversal node value e left right right left next level alternate
maximum product k^10 increment array non negative integer nums integer k^10 one operation may choose element nums increment 1^10 maximum product nums k^10 operation answer may large modulo 109 7^10 note maximize product taking modulo
spiral matrix iv two integer n^10 represent dimension matrix also head linked list integer generate x n^10 matrix contains integer linked list presented spiral order clockwise starting top left matrix remaining empty space fill 1^10 generated matrix
actor director cooperated least three time sql schematable actordirector column name type actor_id int director_id int timestamp int timestamp primary key column table write sql query report provides pair actor_id director_id actor cooperated director least three time result table order query result format following example
maximum difference increasing element 0^10 indexed integer array nums size n^10 find maximum difference nums nums j e nums j nums 0^10 j n^10 nums nums j maximum difference j exists 1^10
generate string character odd count integer n^10 string n^10 character character string occurs odd number time returned string must contain lowercase english letter multiple valid string
count node highest score binary tree rooted 0^10 consisting n^10 node node labeled 0^10 n^10 1^10 0^10 indexed integer array parent representing tree parent parent node node 0^10 root parent 0^10 1^10 node score find score node consider node edge connected removed tree would become one non empty subtrees size subtree number node score node product size subtrees number node highest score
concatenation consecutive binary number integer n^10 decimal value binary string formed concatenating binary representation 1^10 n^10 order modulo 109 7^10
xor operation array integer n^10 integer start define array nums nums start 2^10 0^10 indexed n^10 nums length bitwise xor element nums
min cost connect point array point representing integer coordinate point 2d plane point xi yi cost connecting two point xi yi xj yj manhattan distance xi xj yi yj val denotes absolute value val minimum cost make point connected point connected exactly one simple path two point
decode message string key message represent cipher key secret message respectively step decode message follows use first appearance 26 lowercase english letter key order substitution table align substitution table regular english alphabet letter message substituted using^10 table space transformed example key happy boy actual key would least one instance letter alphabet partial substitution table h b^10 p c^10 b^10 e f decoded message
different way add parenthesis string expression number operator possible result computing different possible way group number operator may answer order test case generated output value fit 32 bit integer number different result exceed 104
convert bst greater tree root binary search tree bst convert greater tree every key original bst changed original key plus sum key greater original key bst reminder binary search tree tree satisfies constraint left subtree node contains node key le node key right subtree node contains node key greater node key left right subtrees must also binary search tree
minimum absolute sum difference two positive integer array nums1 nums2 length n^10 absolute sum difference array nums1 nums2 defined sum nums1 nums2 0^10 n^10 0^10 indexed replace one element nums1 element nums1 minimize absolute sum difference minimum absolute sum difference replacing one element array nums1 answer may large modulo 109 7^10 x defined x x 0^10 x x 0^10
minimum swap make string equal two string s1 s2 equal length consisting letter x task make two string equal swap two character belong different string mean swap s1 s2 j minimum number swap required make s1 s2 equal 1^10 impossible
maximum number dart inside circular dartboard alice throwing n^10 dart large wall array dart dart xi yi position ith dart alice threw wall bob know position n^10 dart wall want place dartboard radius wall maximum number dart alice throw lie dartboard integer maximum number dart lie dartboard
reorder data log file array log log space delimited string word first word identifier two type log letter log word except identifier consist lowercase english letter digit log word except identifier consist digit reorder log letter log come digit log letter log sorted lexicographically content content sort lexicographically identifier digit log maintain relative ordering final order log
pizza 3n^10 slice pizza 3n^10 slice varying size friend take slice pizza follows pick pizza slice friend alice pick next slice anti clockwise direction pick friend bob pick next slice clockwise direction pick repeat slice pizza integer array slice represent size pizza slice clockwise direction maximum possible sum slice size pick
minimum difference sum removal element 0^10 indexed integer array nums consisting 3^10 n^10 element allowed^10 remove subsequence element size exactly n^10 nums remaining 2^10 n^10 element divided two equal part first n^10 element belonging first part sum sumfirst next n^10 element belonging second part sum sumsecond difference sum two part denoted sumfirst sumsecond example sumfirst 3^10 sumsecond 2^10 difference 1^10 similarly sumfirst 2^10 sumsecond 3^10 difference 1^10 minimum difference possible sum two part removal n^10 element
sum prefix score string array word size n^10 consisting non empty string define score string word number string word word prefix word example word ab abc cab score ab 2^10 ab prefix ab abc array answer size n^10 answer sum score every non empty prefix word note string considered prefix
airplane seat assignment probability n^10 passenger board airplane exactly n^10 seat first passenger lost ticket pick seat randomly rest passenger take seat still available andpick seat randomly find seat occupiedreturn probability nth person get seat
first day room n^10 room need visit labeled 0^10 n^10 1^10 day labeled starting 0^10 go visit one room day initially day 0^10 visit room 0^10 order visit room coming day determined following rule 0^10 indexed array nextvisit length n^10 assuming day visit room room odd number time including current visit next day visit room lower equal room number specified nextvisit 0^10 nextvisit room even number time including current visit next day visit room 1^10 mod n^10 label first day room shown day exists answer may large modulo 109 7^10
nim game playing following nim game friend initially heap stone table friend alternate taking turn go first turn person whose turn remove 1^10 3^10 stone heap one remove last stone winner n^10 number stone heap true win game assuming friend play optimally otherwise false
calendar iii k^10 booking happens k^10 event non empty intersection e time common k^10 event event starttime endtime event integer k^10 representing maximum k^10 booking previous event implement mycalendarthree class mycalendarthree initializes object int book int starttime int endtime return integer k^10 representing largest integer exists k^10 booking calendar
subset integer array nums unique element possiblesubsets power set solution set must contain duplicate subset solution order
greatest english letter upper lower case string english letter greatest english letter occurs lowercase uppercase letter returned letter uppercase letter exists empty string english letter b^10 greater another letter b^10 appears english alphabet
remove element integer array nums integer val remove occurrence val nums place order element may changed number element nums equal val consider number element nums equal val k^10 get accepted need following thing change array nums first k^10 element nums contain element equal val remaining element nums important size nums k^10 custom judge judge test solution following code int nums input arrayint val value removeint expectednums expected answer correct length sorted value equaling val int k^10 removeelement nums val call implementationassert k^10 expectednums length sort nums 0^10 k^10 sort first k^10 element numsfor int 0^10 actuallength assert nums expectednums assertion pas solution accepted
minimum index sum two list two array string list1 list2 find common string least index sum common string string appeared list1 list2 common string least index sum common string appeared list1 list2 j j minimum value among common string common string least index sum answer order
reconstruct 2^10 row binary matrix following detail matrix n^10 column 2^10 row matrix binary matrix mean element matrix 0^10 1^10 sum element 0^10 th upper row upper sum element 1^10 st lower row lower sum element th column 0^10 indexed colsum colsum integer array length n^10 task reconstruct matrix upper lower colsum 2^10 integer array one valid solution accepted valid solution exists empty 2^10 array
number node sub tree label tree e connected undirected graph cycle consisting n^10 node numbered 0^10 n^10 1^10 exactly n^10 1^10 edge root tree node 0^10 node tree label lower case character string label e node number label label edge array form edge ai bi mean edge node ai bi tree array size n^10 an^10 number node subtree ith node label node subtree tree tree consisting node descendant node
number excellent pair 0^10 indexed positive integer array nums positive integer k^10 pair number num1 num2 called excellent following condition satisfied number num1 num2 exist array nums sum number set bit num1 num2 num1 num2 greater equal k^10 bitwise operation bitwise operation number distinct excellent pair two pair b^10 c^10 considered distinct either c^10 b^10 example 1^10 2^10 2^10 1^10 distinct note pair num1 num2 num1 num2 also excellent least one occurrence num1 array
longest performing interval hour list number hour worked per^10 day employee day considered tiring day number hour worked strictly greater 8 performing interval interval day number tiring day strictly larger number non tiring day length longest performing interval
vowel substring string word sum number vowel e u every substring word substring contiguous non empty sequence character within string note due large constraint answer may fit signed 32 bit integer please careful calculation
number n^10 digit set array digit sorted non decreasing order write number using^10 digit many time want example digit 1^10 3^10 5^10 may write number 13 551 1351315 number positive integer generated le equal integer n^10
preimage size factorial zero function let f x number zero end x recall x 1^10 2^10 3^10 x convention 0^10 1^10 example f 3^10 0^10 3^10 6 zero end f 11 2^10 11 39916800 two zero end integer k^10 number non negative integer x property f x k^10
patching array sorted integer array nums integer n^10 add patch element array number range 1^10 n^10 inclusive formed sum element array minimum number patch required
pyramid transition matrix stacking block form pyramid block color represented single letter row block contains one le block row beneath centered top make pyramid aesthetically pleasing specific triangular pattern allowed^10 triangular pattern consists single block stacked top two block pattern list three letter string allowed^10 first two character pattern represent left right bottom block respectively third character top block example abc represents triangular pattern c^10 block stacked top left b^10 right block note different bac b^10 left bottom right bottom start bottom row block bottom single string must use base pyramid bottom allowed^10 true build pyramid way top every triangular pattern pyramid allowed^10 false otherwise
filter restaurant vegan friendly price distance array restaurant restaurant idi ratingi veganfriendlyi pricei distancei filter restaurant using^10 three filter veganfriendly filter either true meaning include restaurant veganfriendlyi set true false meaning include restaurant addition filter maxprice maxdistance maximum value price distance restaurant consider respectively array restaurant id filtering ordered rating highest lowest restaurant rating order id highest lowest simplicity veganfriendlyi veganfriendly take value 1^10 true 0^10 false
sum two integer two integer b^10 sum two integer without^10 using^10 operator
take k^10 character left right string consisting character b^10 c^10 non negative integer k^10 minute may take either leftmost character rightmost character minimum number minute needed take least k^10 character 1^10 possible take k^10 character
shifting letter string lowercase english letter integer array shift length call shift letter next letter alphabet wrapping around z becomes example shift b^10 shift u shift z shift x want shift first 1^10 letter x time final string shift applied
number good leaf node pair root binary tree integer distance pair two different leaf node binary tree said good length shortest path le equal distance number good leaf node pair tree
minimum move reach target rotation n^10 n^10 grid snake span 2^10 cell start moving top left corner 0^10 0^10 0^10 1^10 grid empty cell represented zero blocked cell represented one snake want reach lower right corner n^10 1^10 n^10 2^10 n^10 1^10 n^10 1^10 one move snake move one cell right blocked cell move keep horizontal vertical position snake move one cell blocked cell move keep horizontal vertical position snake rotate clockwise horizontal position two cell empty case snake move c^10 c^10 1^10 c^10 1^10 c^10 rotate counterclockwise vertical position two cell right empty case snake move c^10 1^10 c^10 c^10 c^10 1^10 minimum number move reach target way reach target 1^10
sum odd length subarrays array positive integer arr sum possible odd length subarrays arr subarray contiguous subsequence array
sudoku solver write program solve sudoku puzzle filling empty cell sudoku solution must satisfy following rule digit 1^10 9 must occur exactly row digit 1^10 9 must occur exactly column digit 1^10 9 must occur exactly 9 3x3 sub box grid character indicates empty cell
maximum number consecutive value make integer array coin length n^10 represents n^10 coin value ith coin coin make value x choose n^10 coin value sum x maximum number consecutive integer value make coin starting including 0^10 note may multiple coin value
maximum product subarray integer array nums find asubarraythat largest product product test case generated answer fit 32 bit integer
palindrome linked list head singly linked list true apalindromeor false otherwise
number enclave x n^10 binary matrix grid 0^10 represents sea cell 1^10 represents land cell move consists walking one land cell another adjacent 4 directionally land cell walking boundary grid number land cell grid cannot walk boundary grid number move
maximum product two element array array integer nums choose two different index j array maximum value nums 1^10 nums j 1^10
find closest palindrome string n^10 representing integer closest integer including palindrome tie smaller one closest defined absolute difference minimized two integer
minimum speed arrive time floating point number hour representing amount time reach office commute office must take n^10 train sequential order also integer array dist length n^10 dist describes distance kilometer ith train ride train depart integer hour may need wait train ride example 1st train ride take 1^10 5^10 hour must wait additional 0^10 5^10 hour depart 2nd train ride 2^10 hour mark minimum positive integer speed kilometer per^10 hour train must travel reach office time 1^10 impossible time test generated answer exceed 107 hour two digit decimal point
backspace string compare two string true equal typed empty text editor mean backspace character note backspacing empty text text continue empty
prime arrangement number permutation 1^10 n^10 prime number prime index 1^10 indexed recall integer prime greater 1^10 cannot written product two positive integer smaller answer may large answer modulo 10^10 9 7^10
using^10 robot print lexicographically smallest string string robot currently hold empty string apply one following operation empty remove first character string give robot robot append character string remove last character string give robot robot write character paper lexicographically smallest string written paper
number set k^10 non overlapping line segment n^10 point 1^10 plane ith point 0^10 n^10 1^10 x find number way draw exactly k^10 non overlapping line segment segment cover two point endpoint segment must integral coordinate k^10 line segment cover n^10 point allowed^10 share endpoint number way draw k^10 non overlapping line segment number huge modulo 109 7^10
longest substring vowel order string considered beautiful satisfies following condition 5^10 english vowel e u must appear least letter must sorted alphabetical order e e e etc example string aeiou aaaaaaeiiiioou considered beautiful uaeio aeoiu aaaeeeooo beautiful string word consisting english vowel length longest beautiful substring word substring exists 0^10 substring contiguous sequence character string
range sum query immutable integer array nums handle multiple query following type calculate sum element nums index left right inclusive left right implement numarray class numarray int nums initializes object integer array nums int sumrange int left int right return sum element nums index left right inclusive e nums left nums left 1^10 nums right
finding 3^10 digit even number integer array digit element digit array may contain duplicate need find unique integer follow requirement integer consists concatenation three element digit arbitrary order integer leading zero integer even example digit 1^10 2^10 3^10 integer 132^10 312 follow requirement sorted array unique integer
number subsequence satisfy sum condition array integer nums integer target number non empty subsequence nums sum minimum maximum element le equal target answer may large modulo 109 7^10
count anagram string containing one word every consecutive pair word separated single space string anagram string ith word permutation ith word example acb dfe anagram abc def def cab adc bef number distinct anagram answer may large modulo 109 7^10
random point non overlapping rectangle array non overlapping axis aligned rectangle rects rects ai bi xi yi indicates ai bi bottom left corner point ith rectangle xi yi top right corner point ith rectangle design algorithm pick random integer point inside space covered one rectangle point perimeter rectangle included space covered rectangle integer point inside space covered one rectangle equally likely returned note integer point point integer coordinate implement solution class solution int rects initializes object rectangle rects int pick return random integer point u v inside space covered one rectangle
win 100 game two player take turn adding running total integer 1^10 10^10 player first cause running total reach exceed 100 win change game player cannot use integer example two player might take turn drawing common pool number 1^10 15 without^10 replacement reach total 100 two integer maxchoosableinteger desiredtotal true first player move force win otherwise false assume player play optimally
binary gap positive integer n^10 find longest distance two adjacent 1^10 binary representation n^10 two adjacent 1^10 0^10 two 1^10 adjacent 0^10 separating possibly 0^10 distance two 1^10 absolute difference bit position example two 1^10 1001 distance 3^10
move piece obtain string two string start target length n^10 string consists character l character l represent piece piece l move left blank space directly left piece move right blank space directly right character represents blank space occupied l piece true possible obtain string target moving piece string start number time otherwise false
maximum profit job scheduling n^10 job every job scheduled done starttime endtime obtaining profit profit starttime endtime profit array maximum profit take two job subset overlapping time range choose job end time x able start another job start time x
minimum operation reduce x zero integer array nums integer x one operation either remove leftmost rightmost element array nums subtract value x note modifies array future operation minimum number operation reduce x exactly 0^10 possible otherwise 1^10
diagonal traverse ii 2d integer array nums element nums diagonal order shown image
partitioning minimum number deci binary number decimal number called deci binary digit either 0^10 1^10 without^10 leading zero example 101 1100 deci binary 112 3001 string n^10 represents positive decimal integer minimum number positive deci binary number needed sum n^10
maximum average subarray integer array nums consisting n^10 element integer k^10 find contiguous subarray whose length equal k^10 maximum average value value answer calculation error le 10^10 5^10 accepted
escape ghost playing simplified pac man game infinite 2^10 grid start point 0^10 0^10 destination point target xtarget ytarget trying get several ghost map starting position 2d array ghost ghost xi yi represents starting position ith ghost input integral coordinate turn ghost may independently choose either move 1^10 unit four cardinal direction north east south west stay still action happen simultaneously escape reach target ghost reach reach square including target time ghost count escape true possible escape regardless ghost move otherwise false
expressive word sometimes people repeat letter represent extra feeling example hello heeellooo hi hiiii string like heeellooo group adjacent letter h eee ooo string array query string word query word stretchy made equal number application following extension operation choose group consisting character c^10 add number character c^10 group size group three example starting hello could extension group get hellooo cannot get helloo group oo size le three also could another extension like lllll get helllllooo helllllooo query word hello would stretchy two extension operation query hello hellooo helllllooo number query string stretchy
make palindrome substring string array query query lefti righti ki may rearrange substring lefti righti query choose ki replace lowercase english letter substring possible palindrome string operation result query true otherwise result false boolean array answer answer result ith query query note letter counted individually replacement example lefti righti aaa ki 2^10 replace two letter also note query modifies initial string
middle linked list head singly linked list middle node linked list two middle node second middle node
count match tournament integer n^10 number team tournament strange rule current number team even team get paired another team total n^10 2^10 match played n^10 2^10 team advance next round current number team odd one team randomly advance tournament rest get paired total n^10 1^10 2^10 match played n^10 1^10 2^10 1^10 team advance next round number match played tournament winner decided
count different palindromic subsequence string number different non empty palindromic subsequence answer may large modulo 109 7^10 subsequence string obtained deleting zero character string sequence palindromic equal sequence reversed two sequence a1 a2 b1 b2 different ai bi
maximum distance pair value two non increasing 0^10 indexed integer array nums1 nums2 pair index j 0^10 nums1 length 0^10 j nums2 length valid j nums1 nums2 j distance pair j maximum distance valid pair j valid pair 0^10 array arr non increasing arr 1^10 arr every 1^10 arr length
find subsequence length k^10 largest sum integer array nums integer k^10 want find subsequence nums length k^10 largest sum subsequence integer array length k^10 subsequence array derived another array deleting element without^10 changing order remaining element
number laser beam bank anti theft security device activated inside bank 0^10 indexed binary string array bank representing floor plan bank x n^10 2d matrix bank represents ith row consisting 0^10 1^10 0^10 mean cell empty 1^10 mean cell security device one laser beam two security device condition met two device located two different row r1 r2 r1 r2 row r1 r2 security device ith row laser beam independent e one beam interfere join another total number laser beam bank
count number rectangle containing point 2d integer array rectangle rectangle li hi indicates ith rectangle length li height hi also 2d integer array point point j xj yj point coordinate xj yj ith rectangle bottom left corner point coordinate 0^10 0^10 top right corner point li hi integer array count length point length count j number rectangle contain jth point ith rectangle contains jth point 0^10 xj li 0^10 yj hi note point lie edge rectangle also considered contained rectangle
smallest rotation highest score array nums rotate non negative integer k^10 array becomes nums k^10 nums k^10 1^10 nums nums length 1^10 nums 0^10 nums 1^10 nums k^10 1^10 afterward entry le equal index worth one point example nums 2^10 4 1^10 3^10 0^10 rotate k^10 2^10 becomes 1^10 3^10 0^10 2^10 4 worth 3^10 point 1^10 0^10 point 3^10 1^10 point 0^10 2^10 one point 2^10 3^10 one point 4 4 one point rotation index k^10 corresponds highest score achieve rotated nums multiple answer smallest index k^10
find kth^10 smallest sum matrix sorted row x n^10 matrix mat row sorted non decreasing order integer k^10 allowed^10 choose exactly one element row form array kth^10 smallest array sum among possible array
surrounded region x n^10 matrix board containing x capture region 4 directionally surrounded x region captured flipping x surrounded region
minimum sum four digit number splitting digit positive integer num consisting exactly four digit split num two new integer new1 new2 using^10 digit found num leading zero allowed^10 new1 new2 digit found num must used example num 2932 following digit two 2^10 one 9 one 3^10 possible pair new1 new2 22 93 23 92 223 9 2^10 329 minimum possible sum new1 new2
binary tree level order traversal ii root binary tree bottom level order traversal node value e left right level level leaf root
cell odd value matrix x n^10 matrix initialized 0^10 also 2d array index index ri ci represents 0^10 indexed location perform increment operation matrix location index following increment cell row ri increment cell column ci n^10 index number odd valued cell matrix applying increment location index
count subarrays score le k^10 score array defined product sum length example score 1^10 2^10 3^10 4 5^10 1^10 2^10 3^10 4 5^10 5^10 75 positive integer array nums integer k^10 number non empty subarrays nums whose score strictly le k^10 subarray contiguous sequence element within array
reformat department table sql schematable department column name type id int revenue int month varchar id month primary key table table information revenue department per^10 month month value jan feb mar apr may jun jul aug sep oct nov dec write sql query reformat table department id column revenue column month result table order query result format following example
distinct prime factor product array array positive integer nums number distinct prime factor product element nums note number greater 1^10 called prime divisible 1^10 integer val1 factor another integer val2 val2 val1 integer
number unique subject taught teacher sql schematable teacher column name type teacher_id int subject_id int dept_id int subject_id dept_id primary key table row table indicates teacher teacher_id teach subject subject_id department dept_id write sql query report number unique subject teacher teach university result table order query result format shown following example
prime palindrome integer n^10 smallest prime palindrome greater equal n^10 integer prime exactly two divisor 1^10 note 1^10 prime number example 2^10 3^10 5^10 7^10 11 13 prime integer palindrome read left right right left example 101 12321 palindrome test case generated answer always exists range 2^10 2^10 108
generate parenthesis n^10 pair parenthesis write function generate combination formed parenthesis
check n^10 double exist array arr integer check exist two index j j0 j arr lengtharr 2^10 arr j
shortest impossible sequence roll integer array roll length n^10 integer k^10 roll k^10 sided dice numbered 1^10 k^10 n^10 time result ith roll roll length shortest sequence roll cannot taken roll sequence roll length len result rolling k^10 sided dice len time note sequence taken consecutive long order
arithmetic slice ii subsequence integer array nums number arithmetic subsequence nums sequence number called arithmetic consists least three element difference two consecutive element example 1^10 3^10 5^10 7^10 9 7^10 7^10 7^10 7^10 3^10 1^10 5^10 9 arithmetic sequence example 1^10 1^10 2^10 5^10 7^10 arithmetic sequence subsequence array sequence formed removing element possibly none array example 2^10 5^10 10^10 subsequence 1^10 2^10 1^10 2^10 4 1^10 5^10 10^10 test case generated answer fit 32 bit integer
find substring hash value hash 0^10 indexed string length k^10 integer p computed using^10 following function hash p val 0^10 p0 val 1^10 p1 val k^10 1^10 pk 1^10 mod val represents index alphabet val 1^10 val z 26 string integer power modulo k^10 hashvalue sub first substring length k^10 hash sub power modulo hashvalue test case generated answer always exists substring contiguous non empty sequence character within string
number student unable eat lunch school cafeteria offer circular square sandwich lunch break referred number 0^10 1^10 respectively student stand queue student either prefers square circular sandwich number sandwich cafeteria equal number student sandwich placed stack step student front queue prefers sandwich top stack take leave queue otherwise leave go queue end continues none queue student want take top sandwich thus unable eat two integer array student sandwich sandwich type ith sandwich stack 0^10 top stack student j preference jth student initial queue j 0^10 front queue number student unable eat
day week date corresponding day week date input three integer representing day month year respectively answer one following value sunday monday tuesday wednesday thursday friday saturday
integer break integer n^10 break sum k^10 positive integer k^10 2^10 maximize product integer maximum product get
subsequence two string true subsequence false otherwise subsequence string new string formed original string deleting none character without^10 disturbing relative position remaining character e ace subsequence abcde aec
apply discount price sentence string single space separated word word contain digit lowercase letter dollar sign word represents price sequence digit preceded dollar sign example 100 23 6 represent price 100 1e5 string sentence representing sentence integer discount word representing price apply discount discount price update word sentence updated price represented exactly two decimal place string representing modified sentence note price contain 10^10 digit
minimum move move box target location storekeeper game player push box around warehouse trying get target location game represented x n^10 grid character grid element wall floor box task move box b^10 target position following rule character represents player player move left right grid floor empty cell character represents floor mean free cell walk character represents wall mean obstacle impossible walk one box b^10 one target cell grid box moved adjacent free cell standing next box moving direction box push player cannot walk box minimum number push move box target way reach target 1^10
ugly number ii ugly number positive integer whose prime factor limited 2^10 3^10 5^10 integer n^10 nth ugly number
count number pair absolute difference k^10 integer array nums integer k^10 number pair j j nums nums j k^10 value x defined x x 0^10 x x 0^10
magical string magical string consists 1^10 2^10 obeys following rule string magical concatenating number contiguous occurrence character 1^10 2^10 generates string first element 1221121221221121122 … … group consecutive 1^10 2^10 1^10 22 11 2^10 1^10 22 1^10 22 11 2^10 11 22 occurrence 1^10 2^10 group 1^10 2^10 2^10 1^10 1^10 2^10 1^10 2^10 2^10 1^10 2^10 2^10 see occurrence sequence integer n^10 number 1^10 first n^10 number magical string
frequent subtree sum root binary tree frequent subtree sum tie value highest frequency order subtree sum node defined sum node value formed subtree rooted node including node
concatenated word array string word without^10 duplicate concatenated word list word concatenated word defined string comprised entirely least two shorter word necesssarily distinct array
cracking safe safe protected password password sequence n^10 digit digit range 0^10 k^10 1^10 safe peculiar way checking password enter sequence check recent n^10 digit entered time type digit example correct password 345 enter 012345 typing 0^10 recent 3^10 digit 0^10 incorrect typing 1^10 recent 3^10 digit 01^10 incorrect typing 2^10 recent 3^10 digit 012 incorrect typing 3^10 recent 3^10 digit 123 incorrect typing 4 recent 3^10 digit 234 incorrect typing 5^10 recent 3^10 digit 345 correct safe unlocks string minimum length unlock safe point entering
linked list random node singly linked list random node value linked list node must probability chosen implement solution class solution listnode head initializes object head singly linked list head int getrandom chooses node randomly list return value node list equally likely chosen
thousand separator integer n^10 add dot thousand separator string format
number valid word sentence sentence consists lowercase letter z digit 0^10 9 hyphen punctuation mark space sentence broken one token separated one space token valid word three following true contains lowercase letter hyphen punctuation digit one hyphen present must surrounded lowercase character b^10 valid ab ab valid one punctuation mark present must end token ab cd valid b^10 c^10 valid
count number team n^10 soldier standing line soldier assigned unique rating value form team 3^10 soldier amongst following rule choose 3^10 soldier index j k^10 rating rating rating j rating k^10 team valid rating rating j rating k^10 rating rating j rating k^10 0^10 j k^10 n^10 number team form condition soldier part multiple team
common word string paragraph string array banned word banned frequent word banned guaranteed least one word banned answer unique word paragraph case insensitive answer returned lowercase
find good string string s1 s2 size n^10 string evil number good string good string size n^10 alphabetically greater equal s1 alphabetically smaller equal s2 contain string evil substring answer huge number modulo 109 7^10
reordered power 2^10 integer n^10 reorder digit order including original order leading digit zero true resulting number power two
minimum addition make valid string string word insert letter b^10 c^10 anywhere number time minimum number letter must inserted word becomes valid string called valid formed concatenating string abc several time
number smooth descent period stock integer array price representing daily price history stock price stock price ith day smooth descent period stock consists one contiguous day price day lower price preceding day exactly 1^10 first day period exempted rule number smooth descent period
minimum distance type word using^10 two finger keyboard layout shown x plane english uppercase letter located coordinate example letter located coordinate 0^10 0^10 letter b^10 located coordinate 0^10 1^10 letter p located coordinate 2^10 3^10 letter z located coordinate 4 1^10 string word minimum total distance type string using^10 two finger distance coordinate x1 y1 x2 y2 x1 x2 y1 y2 note initial position two finger considered free count towards total distance also two finger start first letter first two letter
maximum number point grid query x n^10 integer matrix grid array query size k^10 find array answer size k^10 integer query start top left cell matrix repeat following process query strictly greater value current cell get one point first time visiting cell move adjacent cell 4 direction left right otherwise get point end process process answer maximum number point get note query allowed^10 visit cell multiple time resulting array answer
count operation obtain zero two non negative integer num1 num2 one operation num1 num2 must subtract num2 num1 otherwise subtract num1 num2 example num1 5^10 num2 4 subtract num2 num1 thus obtaining num1 1^10 num2 4 however num1 4 num2 5^10 one operation num1 4 num2 1^10 number operation required make either num1 0^10 num2 0^10
validate stack sequence two integer array pushed popped distinct value true could result sequence push pop operation initially empty stack false otherwise
check valid path grid x n^10 grid cell grid represents street street grid j 1^10 mean street connecting left cell right cell 2^10 mean street connecting upper cell lower cell 3^10 mean street connecting left cell lower cell 4 mean street connecting right cell lower cell 5^10 mean street connecting left cell upper cell 6 mean street connecting right cell upper cell initially start street upper left cell 0^10 0^10 valid path grid path start upper left cell 0^10 0^10 end bottom right cell 1^10 n^10 1^10 path follow street notice allowed^10 change street true valid path grid false otherwise
n^10 ary tree preorder traversal root n^10 ary tree preorder traversal node value nary tree input serialization represented level order traversal group child separated null value see example
maximum number coin get 3n^10 pile coin varying size friend take pile coin follows step choose 3^10 pile coin necessarily consecutive choice alice pick pile maximum number coin pick next pile maximum number coin friend bob pick last pile repeat pile coin array integer pile pile number coin ith pile maximum number coin
binary tree factor array unique integer arr integer arr strictly greater 1^10 make binary tree using^10 integer number may used number time non leaf node value equal product value child number binary tree make answer may large answer modulo 109 7^10
difference maximum minimum price sum exists undirected initially unrooted tree n^10 node indexed 0^10 n^10 1^10 integer n^10 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree node associated price integer array price price price ith node price sum path sum price node lying path tree rooted node root choice incurred cost choosing root difference maximum minimum price sum amongst path starting root maximum possible cost amongst possible root choice
minimum operation make array alternating 0^10 indexed array nums consisting n^10 positive integer array nums called alternating nums 2^10 nums 2^10 n^10 1^10 nums 1^10 nums 1^10 n^10 1^10 one operation choose index change nums positive integer minimum number operation required make array alternating
frog jump frog crossing river river divided number unit unit may may exist stone frog jump stone must jump water list stone position unit sorted ascending order determine frog cross river landing last stone initially frog first stone assumes first jump must 1^10 unit frog last jump k^10 unit next jump must either k^10 1^10 k^10 k^10 1^10 unit frog jump forward direction
binary subarrays sum binary array nums integer goal number non empty subarrays sum goal subarray contiguous part array
minimum window substring two string length n^10 respectively minimum windowsubstringof every character including duplicate included window substring empty string testcases generated answer unique
collect coin tree exists undirected unrooted tree n^10 node indexed 0^10 n^10 1^10 integer n^10 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree also array coin size n^10 coin either 0^10 1^10 1^10 indicates presence coin vertex initially choose start vertex tree perform following operation number time collect coin distance 2^10 current vertex ormove adjacent vertex tree find minimum number edge need go collect coin go back initial vertex note pas edge several time need count answer several time
number day two date write program count number day two date two date string format yyyy mm dd shown example
buy two chocolate integer array price representing price various chocolate store also single integer money represents initial amount money must buy exactly two chocolate way still non negative leftover money would like minimize sum price two chocolate buy amount money leftover buying two chocolate way buy two chocolate without^10 ending debt money note leftover must non negative
cousin binary tree root binary tree unique value value two different node tree x true node corresponding value x tree cousin false otherwise two node binary tree cousin depth different parent note binary tree root node depth 0^10 child depth k^10 node depth k^10 1^10
closest node query binary search tree root binary search tree array query size n^10 consisting positive integer find 2d array answer size n^10 answer mini maxi mini largest value tree smaller equal query value exist add 1^10 instead maxi smallest value tree greater equal query value exist add 1^10 instead array answer
word ladder transformation sequence word beginword word endword using^10 dictionary wordlist sequence word beginword s1 s2 sk every adjacent pair word differs single letter every si 1^10 k^10 wordlist note beginword need wordlist sk endwordgiven two word beginword endword dictionary wordlist number word shortest transformation sequence beginword endword 0^10 sequence exists
maximum alternating subsequence sum alternating sum 0^10 indexed array defined sum element even index minus sum element odd index example alternating sum 4 2^10 5^10 3^10 4 5^10 2^10 3^10 4 array nums maximum alternating sum subsequence nums reindexing element subsequence subsequence array new array generated original array deleting element possibly none without^10 changing remaining element relative order example 2^10 7^10 4 subsequence 4 2^10 3^10 7^10 2^10 1^10 4 underlined element 2^10 4 2^10
maximum number week work n^10 project numbered 0^10 n^10 1^10 integer array milestone milestone denotes number milestone ith project work project following two rule every week finish exactly one milestone one project must work every week cannot work two milestone project two consecutive week milestone project finished milestone work cause violate rule stop working note may able finish every project milestone due constraint maximum number week would able work project without^10 violating rule mentioned
rank score sql schematable score column name type id int score decimal id primary key table row table contains score game score floating point value two decimal place write sql query rank score ranking calculated according following rule score ranked highest lowest tie two score ranking tie next ranking number next consecutive integer value word hole rank result table ordered score descending order query result format following example
toeplitz matrix x n^10 matrix true matrix toeplitz otherwise false matrix toeplitz every diagonal top left bottom right element
group special equivalent string array string length word one move swap two even indexed character two odd indexed character string word two string word word j special equivalent number move word word j example word zzxy word j xyzz special equivalent may make move zzxy xzzy xyzz group special equivalent string word non empty subset word every pair string group special equivalent andthe group largest size possible e string word group word special equivalent every string group number group special equivalent string word
check sentence pangram pangram sentence every letter english alphabet appears least string sentence containing lowercase english letter true sentence pangram false otherwise
count server communicate map server center represented n^10 integer matrix grid 1^10 mean cell server 0^10 mean server two server said communicate row column number server communicate server
remove invalid parenthesis string contains parenthesis letter remove minimum number invalid parenthesis make input string valid list unique string valid minimum number removal may answer order
generate random point circle radius position center circle implement function randpoint generates uniform random point inside circle implement solution class solution double radius double x_center double y_center initializes object radius circle radius position center x_center y_center randpoint return random point inside circle point circumference circle considered circle answer returned array x
smallest k^10 length subsequence occurrence letter string integer k^10 letter letter integer repetition lexicographically smallest subsequence length k^10 letter letter appear least repetition time test case generated letter appears least repetition time subsequence string derived another string deleting character without^10 changing order remaining character string lexicographically smaller string b^10 first position b^10 differ string letter appears earlier alphabet corresponding letter b^10
implement stack using^10 queue implement last first lifo stack using^10 two queue implemented stack support function normal stack push top pop empty implement mystack class void push int x push element x top stack int pop remove element top stack return int top return element top stack boolean empty return true stack empty false otherwise note must use standard operation queue mean push back peek pop front size empty operation valid depending language queue may supported natively may simulate queue using^10 list deque double ended queue long use queue standard operation
base 7^10 integer num string base 7^10 representation
minimum skip arrive meeting time integer hoursbefore number hour travel meeting arrive meeting travel n^10 road road length integer array dist length n^10 dist describes length ith road kilometer addition integer speed speed km h travel travel road must rest wait next integer hour begin traveling next road note rest traveling last road already meeting example traveling road take 1^10 4 hour must wait 2^10 hour mark traveling next road traveling road take exactly 2^10 hour need wait however allowed^10 skip rest able arrive time meaning need wait next integer hour note mean may finish traveling future road different hour mark example suppose traveling first road take 1^10 4 hour traveling second road take 0^10 6 hour skipping rest first road mean finish traveling second road right 2^10 hour mark letting start traveling third road immediately minimum number skip required arrive meeting time 1^10 impossible
iterator combination design combinationiterator class combinationiterator string character int combinationlength initializes object string character sorted distinct lowercase english letter number combinationlength argument next return next combination length combinationlength lexicographical order hasnext return true exists next combination
minimum falling path sum ii n^10 x n^10 integer matrix grid minimum sum falling path non zero shift falling path non zero shift choice exactly one element row grid two element chosen adjacent row column
find missing observation observation n^10 6 sided dice roll face numbered 1^10 6 n^10 observation went missing observation roll fortunately also calculated average value n^10 roll integer array roll length roll value ith observation also two integer mean n^10 array length n^10 containing missing observation average value n^10 roll exactly mean multiple valid answer array exists empty array average value set k^10 number sum number divided k^10 note mean integer sum n^10 roll divisible n^10
kth^10 smallest element sorted matrix n^10 x n^10 matrix row column sorted ascending order kth^10 smallest element matrix note kth^10 smallest element sorted order kth^10 distinct element must find solution memory complexity better n2
split array consecutive subsequence integer array nums sorted non decreasing order determine possible split nums one subsequence following condition true subsequence consecutive increasing sequence e integer exactly one previous integer subsequence length 3^10 true split nums according condition false otherwise subsequence array new array formed original array deleting none element without^10 disturbing relative position remaining element e 1^10 3^10 5^10 subsequence 1^10 2^10 3^10 4 5^10 1^10 3^10 2^10
find k^10 beauty number k^10 beauty integer num defined number substring num read string following condition length k^10 divisor num integer num k^10 k^10 beauty num note leading zero allowed^10 0^10 divisor value substring contiguous sequence character string
number common factor two positive integer b^10 number common factor b^10 integer x common factor b^10 x divide b^10
detonate maximum bomb list bomb range bomb defined area effect felt area shape circle center location bomb bomb represented 0^10 indexed 2d integer array bomb bomb xi yi ri xi yi denote x coordinate coordinate location ith bomb whereas ri denotes radius range may choose detonate single bomb bomb detonated detonate bomb lie range bomb detonate bomb lie range list bomb maximum number bomb detonated allowed^10 detonate one bomb
minimum size subarray sum array positive integer nums positive integer target minimal length asubarraywhose sum greater equal target subarray 0^10 instead
position large group string lowercase letter letter form consecutive group character example string like abbxxxxzyy group bb xxxx z yy group identified interval start end start end denote start end index inclusive group example xxxx interval 3^10 6 group considered large 3^10 character interval every large group sorted increasing order start index
circular array loop playing game involving circular array non zero integer nums nums denotes number index forward backward must move located index nums positive move nums step forward andif nums negative move nums step backward array circular may assume moving forward last element put first element moving backwards first element put last element cycle array consists sequence index seq length k^10 following movement rule result repeating index sequence seq 0^10 seq 1^10 seq k^10 1^10 seq 0^10 every nums seq j either positive negative k^10 1return true cycle nums false otherwise
reverse string write function revers string input string array character must modifying input array place 1^10 extra memory
candy n^10 child standing line child assigned rating value integer array rating giving candy child subjected following requirement child must least one candy child higher rating get candy neighbor minimum number candy need distribute candy child
reduce array size half integer array arr choose set integer remove occurrence integer array minimum size set least half integer array removed
largest perimeter triangle integer array nums largest perimeter triangle non zero area formed three length impossible form triangle non zero area 0^10
construct k^10 palindrome string string integer k^10 true use character construct k^10 palindrome string false otherwise
beautiful arrangement suppose n^10 integer labeled 1^10 n^10 permutation n^10 integer perm 1^10 indexed considered beautiful arrangement every 1^10 n^10 either following true perm divisible divisible perm integer n^10 number beautiful arrangement construct
rank team vote special ranking system voter give rank highest lowest team participating competition ordering team decided received position one vote two team tie first position consider second position resolve conflict tie continue process tie resolved two team still tied considering position rank alphabetically based team letter array string vote vote voter ranking system sort team according ranking system described string team sorted ranking system
replace avoid consecutive repeating character string containing lowercase english letter character convert character lowercase letter final string contain consecutive repeating character cannot modify non character guaranteed consecutive repeating character string except final string conversion possibly zero made one solution shown answer always possible constraint
check appears b^10 string consisting character b^10 true every appears every b^10 string otherwise false
categorize box according criterion four integer length width height mass representing dimension mass box respectively string representing category box box bulky dimension box greater equal 104 volume box greater equal 109 mass box greater equal 100 heavy box bulky heavy category box neither bulky heavy category neither box bulky heavy category bulky box heavy bulky category heavy note volume box product length width height
median two sorted array two sorted array nums1 nums2 size n^10 respectively median two sorted array overall run time complexity log n^10
minimum score changing two element 0^10 indexed integer array nums low score nums minimum value nums nums j 0^10 j nums length high score nums maximum value nums nums j 0^10 j nums length score nums sum high low score nums minimize score nums change value two element nums minimum possible score changing value two element nums note x denotes absolute value x
count repetition define str n^10 string str consists string concatenated n^10 time example str abc 3^10 abcabcabc define string s1 obtained string s2 remove character s2 becomes s1 example s1 abc obtained s2 abdbec based definition removing bolded underlined character two string s1 s2 two integer n1 n2 two string str1 s1 n1 str2 s2 n2 maximum integer str str2 obtained str1
maximum 69^10 number positive integer num consisting digit 6 9 maximum number get changing one digit 6 becomes 9 9 becomes 6
sum beauty array 0^10 indexed integer array nums index 1^10 nums length 2^10 beauty nums equal 2^10 nums j nums nums k^10 0^10 j k^10 nums length 1^10 1^10 nums 1^10 nums nums 1^10 previous condition satisfied 0^10 none previous condition hold sum beauty nums 1^10 nums length 2^10
take gift richest pile integer array gift denoting number gift various pile every second following choose pile maximum number gift one pile maximum number gift choose leave behind floor square root number gift pile take rest gift number gift remaining k^10 second
check valid parenthesis string path parenthesis string non empty string consisting valid following condition true written ab concatenated b^10 b^10 valid parenthesis string written valid parenthesis string x n^10 matrix parenthesis grid valid parenthesis string path grid path satisfying following condition path start upper left cell 0^10 0^10 path end bottom right cell 1^10 n^10 1^10 path ever move right resulting parenthesis string formed path valid true exists valid parenthesis string path grid otherwise false
design underground system underground railway system keeping track customer travel time different station using^10 data calculate average time take travel one station another implement undergroundsystem class void checkin int id string stationname int customer card id equal id check station stationname time customer checked one place time void checkout int id string stationname int customer card id equal id check station stationname time double getaveragetime string startstation string endstation return average time take travel startstation endstation average time computed previous traveling time startstation endstation happened directly meaning check startstation followed check endstation time take travel startstation endstation may different time take travel endstation startstation least one customer traveled startstation endstation getaveragetime called may assume call checkin checkout method consistent customer check time t1 check time t2 t1 t2 event happen chronological order
rotate image n^10 x n^10 2d matrix representing image rotate image 90 degree clockwise rotate image place mean modify input 2d matrix directly allocate another 2d matrix rotation
alphabet board path alphabet board start position 0^10 0^10 corresponding character board 0^10 0^10 board abcde fghij klmno pqrst uvwxy z shown diagram may make following move u move position one row position exists board move position one row position exists board l move position left one column position exists board move position right one column position exists board add character board c^10 current position c^10 answer position exist board position letter sequence move make answer equal target minimum number move may path
decode slanted ciphertext string originaltext encoded using^10 slanted transposition cipher string encodedtext help matrix fixed number row row originaltext placed first top left bottom right manner blue cell filled first followed red cell yellow cell reach end originaltext arrow indicates order cell filled empty cell filled number column chosen rightmost column empty filling originaltext encodedtext formed appending character matrix row wise fashion character blue cell appended first encodedtext red cell finally yellow cell arrow indicates order cell accessed example originaltext cipher row 3^10 encode following manner blue arrow depict originaltext placed matrix red arrow denote order encodedtext formed example encodedtext ch ie pr encoded string encodedtext number row row original string originaltext note originaltext trailing space test case generated one possible originaltext
beautiful array array nums length n^10 beautiful nums permutation integer range 1^10 n^10 every 0^10 j n^10 index k^10 k^10 j 2^10 nums k^10 nums nums j integer n^10 beautiful array nums length n^10 least one valid answer n^10
sum left leaf root binary tree sum left leaf leaf node child left leaf leaf left child another node
largest triangle area array point x plane point point xi yi area largest triangle formed three different point answer within 10^10 5^10 actual answer accepted
first completely painted row column 0^10 indexed integer array arr x n^10 integer matrix mat arr mat contain integer range 1^10 n^10 go index arr starting index 0^10 paint cell mat containing integer arr smallest index either row column completely painted mat
smallest subarrays maximum bitwise 0^10 indexed array nums length n^10 consisting non negative integer index 0^10 n^10 1^10 must determine size minimum sized non empty subarray nums starting inclusive maximum possible bitwise word let bij bitwise subarray nums j need find smallest subarray starting bitwise subarray equal max bik k^10 n^10 1^10 bitwise array bitwise number integer array answer size n^10 answer length minimum sized subarray starting maximum bitwise subarray contiguous non empty sequence element within array
minimum suffix flip 0^10 indexed binary string target length n^10 another binary string length n^10 initially set zero want make equal target one operation pick index 0^10 n^10 flip bit inclusive range n^10 1^10 flip mean changing 0^10 1^10 1^10 0^10 minimum number operation needed make equal target
shortest cycle graph bi directional graph n^10 vertex vertex labeled 0^10 n^10 1^10 edge graph represented 2d integer array edge edge ui vi denotes edge vertex ui vertex vi every vertex pair connected one edge vertex edge length shortest cycle graph cycle exists 1^10 cycle path start end node edge path used
flip binary tree match preorder traversal root binary tree n^10 node node uniquely assigned value 1^10 n^10 also sequence n^10 value voyage desired pre order traversal binary tree node binary tree flipped swapping left right subtrees example flipping node 1^10 following effect flip smallest number node pre order traversal tree match voyage list value flipped node may answer order impossible flip node tree make pre order traversal match voyage list 1^10
robot bounded circle infinite plane robot initially stand 0^10 0^10 face north note north direction positive direction axis south direction negative direction axis east direction positive direction x axis west direction negative direction x axis robot receive one three instruction g go straight 1^10 unit l turn 90 degree left e anti clockwise direction turn 90 degree right e clockwise direction robot performs instruction order repeat forever true exists circle plane robot never leaf circle
seat reservation manager design system manages reservation state n^10 seat numbered 1^10 n^10 implement seatmanager class seatmanager int n^10 initializes seatmanager object manage n^10 seat numbered 1^10 n^10 seat initially available int reserve fetch smallest numbered unreserved seat reserve return number void unreserve int seatnumber unreserves seat seatnumber
robot origin robot starting position 0^10 0^10 origin 2d plane sequence move judge robot end 0^10 0^10 completes move string move represents move sequence robot move represents ith move valid move right l left u true robot return origin finish move false otherwise note way robot facing irrelevant always make robot move right l always make move left etc also assume magnitude robot movement move
remove letter equalize frequency 0^10 indexed string word consisting lowercase english letter need select one index remove letter index word frequency every letter present word equal true possible remove one letter frequency letter word equal false otherwise note frequency letter x number time occurs string must remove exactly one letter cannot chose nothing
number matching subsequence string array string word number word subsequence subsequence string new string generated original string character none deleted without^10 changing relative order remaining character example ace subsequence abcde
minimum impossible 0^10 indexed integer array nums say integer x expressible nums exist integer 0^10 index1 index2 indexk nums length nums index1 nums index2 nums indexk x word integer expressible written bitwise subsequence nums minimum positive non zero integer expressible nums
find triangular sum array 0^10 indexed integer array nums nums digit 0^10 9 inclusive triangular sum nums value element present nums following process terminates let nums comprise n^10 element n^10 1^10 end process otherwise create new 0^10 indexed integer array newnums length n^10 1^10 index 0^10 n^10 1^10 assign value newnums nums nums 1^10 10^10 denotes modulo operator replace array nums newnums repeat entire process starting step 1^10 triangular sum nums
minimum common value two integer array nums1 nums2 sorted non decreasing order minimum integer common array common integer amongst nums1 nums2 1^10 note integer said common nums1 nums2 array least one occurrence integer
symmetric tree root binary tree check whether mirror e symmetric around center
search binary search tree root binary search tree bst integer val find node bst node value equal val subtree rooted node node exist null
probability two box number distinct ball 2n ball k^10 distinct color integer array ball size k^10 ball number ball color ball shuffled uniformly random distribute first n^10 ball first box remaining n^10 ball box please read explanation second example carefully please note two box considered different example two ball color b^10 two box distribution b^10 considered different distribution b^10 please read explanation first example carefully probability two box number distinct ball answer within 10^10 5^10 actual value accepted correct
last stone weight ii array integer stone stone weight ith stone playing game stone turn choose two stone smash together suppose stone weight x x result smash x stone destroyed andif x stone weight x destroyed stone weight new weight x end game one stone left smallest possible weight left stone stone left 0^10
k^10 diff pair array array integer nums integer k^10 number unique k^10 diff pair array k^10 diff pair integer pair nums nums j following true 0^10 j nums lengthi j nums nums j knotice val denotes absolute value val
minimum area rectangle array point x plane point point xi yi minimum area rectangle formed point side parallel x ax rectangle 0^10
remove nth node end list head linked list remove nth node end list head
find minimum maximum number node critical point critical point linked list defined either local maximum local minimum node local maximum current node value strictly greater previous node next node node local minimum current node value strictly smaller previous node next node note node local maximum minimum exists previous node next node linked list head array length 2^10 containing mindistance maxdistance mindistance minimum distance two distinct critical point maxdistance maximum distance two distinct critical point fewer two critical point 1^10 1^10
climbing stair climbing staircase take n^10 step reach top time either climb 1^10 2^10 step many distinct way climb top
word ladder ii transformation sequence word beginword word endword using^10 dictionary wordlist sequence word beginword s1 s2 sk every adjacent pair word differs single letter every si 1^10 k^10 wordlist note beginword need wordlist sk endwordgiven two word beginword endword dictionary wordlist shortest transformation sequence beginword endword empty list sequence exists sequence returned list word beginword s1 s2 sk
sale analysis iii sql schematable product column name type product_id int product_name varchar unit_price int product_id primary key table row table indicates name price product table sale column name type seller_id int product_id int buyer_id int sale_date date quantity int price int table primary key repeated row product_id foreign key product table row table contains information one sale write sql query report product sold first quarter 2019 2019 01^10 01^10 2019 03 31 inclusive result table order query result format following example
minimum operation make subsequence array target consists distinct integer another integer array arr duplicate one operation insert integer position arr example arr 1^10 4 1^10 2^10 add 3^10 middle make 1^10 4 3^10 1^10 2^10 note insert integer beginning end array minimum number operation needed make target subsequence arr subsequence array new array generated original array deleting element possibly none without^10 changing remaining element relative order example 2^10 7^10 4 subsequence 4 2^10 3^10 7^10 2^10 1^10 4 underlined element 2^10 4 2^10
remove stone minimize total 0^10 indexed integer array pile pile represents number stone ith pile integer k^10 apply following operation exactly k^10 time choose pile remove floor pile 2^10 stone notice apply operation pile minimum possible total number stone remaining applying k^10 operation floor x greatest integer smaller equal x e round x
monotone increasing digit integer monotone increasing digit pair adjacent digit x satisfy x integer n^10 largest number le equal n^10 monotone increasing digit
replace substring balanced string string length n^10 containing four kind character q w e string said balanced character appears n^10 4 time n^10 length string minimum length substring replaced string length make balanced already balanced 0^10
implement queue using^10 stack implement first first fifo queue using^10 two stack implemented queue support function normal queue push peek pop empty implement myqueue class void push int x push element x back queue int pop remove element front queue return int peek return element front queue boolean empty return true queue empty false otherwise note must use standard operation stack mean push top peek pop top size empty operation valid depending language stack may supported natively may simulate stack using^10 list deque double ended queue long use stack standard operation
maximum width ramp ramp integer array nums pair j j nums nums j width ramp j integer array nums maximum width ramp nums ramp nums 0^10
random flip matrix x n^10 binary grid matrix value set 0^10 initially design algorithm randomly pick index j matrix j 0^10 flip 1^10 index j matrix j 0^10 equally likely returned optimize algorithm minimize number call made built random function language optimize time space complexity implement solution class solution int int n^10 initializes object size binary matrix n^10 int flip return random index j matrix matrix j 0^10 flip 1^10 void reset reset value matrix 0^10
count increasing quadruplet 0^10 indexed integer array nums size n^10 containing number 1^10 n^10 number increasing quadruplet quadruplet j k^10 l increasing 0^10 j k^10 l n^10 andnums nums k^10 nums j nums l
construct string repeat limit string integer repeatlimit construct new string repeatlimitedstring using^10 character letter appears repeatlimit time row use character lexicographically largest repeatlimitedstring possible string lexicographically larger string b^10 first position b^10 differ string letter appears later alphabet corresponding letter b^10 first min length b^10 length character differ longer string lexicographically larger one
maximum employee invited meeting company organizing meeting list n^10 employee waiting invited arranged large circular table capable seating number employee employee numbered 0^10 n^10 1^10 employee favorite person attend meeting sit next favorite person table favorite person employee themself 0^10 indexed integer array favorite favorite denotes favorite person ith employee maximum number employee invited meeting
minimum area rectangle ii array point x plane point point xi yi minimum area rectangle formed point side necessarily parallel x ax rectangle 0^10 answer within 10^10 5^10 actual answer accepted
daily lead partner sql schematable dailysales column name type date_id date make_name varchar lead_id int partner_id int table primary key table contains date name product sold id lead partner sold name consists lowercase english letter write sql query date_id make_name number distinct lead_id distinct partner_id result table order query result format following example
power three integer n^10 true power three otherwise false integer n^10 power three exists integer x n^10 3x
maximize confusion exam teacher writing test n^10 true false question denoting true f denoting false want confuse student maximizing number consecutive question answer multiple true multiple falses row string answerkey answerkey original answer ith question addition integer k^10 maximum number time may perform following operation change answer key question f e set answerkey f maximum number consecutive f answer key performing operation k^10 time
smallest number infinite set set contains positive integer 1^10 2^10 3^10 4 5^10 implement smallestinfiniteset class smallestinfiniteset initializes smallestinfiniteset object contain positive integer int popsmallest remove return smallest integer contained infinite set void addback int num add positive integer num back infinite set already infinite set
gcd sort array integer array nums perform following operation number time nums swap position two element nums nums j gcd nums nums j 1^10 gcd nums nums j greatest common divisor nums nums j true possible sort nums non decreasing order using^10 swap method false otherwise
minimum score triangulation polygon convex n^10 sided polygon vertex integer value integer array value value value ith vertex e clockwise order triangulate polygon n^10 2^10 triangle triangle value triangle product value vertex total score triangulation sum value n^10 2^10 triangle triangulation smallest possible total score achieve triangulation polygon
first missing positive unsorted integer array nums smallest missing positive integer must implement algorithm run n^10 time us constant extra space
maximum area piece cake horizontal vertical cut rectangular cake size h x w two array integer horizontalcuts verticalcuts horizontalcuts distance top rectangular cake ith horizontal cut similarly andverticalcuts j distance left rectangular cake jth vertical cut maximum area piece cake cut horizontal vertical position provided array horizontalcuts verticalcuts answer large number modulo 109 7^10
number way earn point test n^10 type question integer target 0^10 indexed 2d integer array type type counti marksi indicates counti question ith type one worth marksi point number way earn exactly target point exam answer may large modulo 109 7^10 note question type indistinguishable example 3^10 question type solving 1st 2nd question solving 1st 3rd question 2nd 3rd question
rectangle area coordinate two rectilinear rectangle 2d plane total area covered two rectangle first rectangle defined bottom left corner ax1 ay1 top right corner ax2 ay2 second rectangle defined bottom left corner bx1 by1 top right corner bx2 by2
maximum nesting depth parenthesis string valid parenthesis string denoted vps meet one following empty string single character equal written ab concatenated b^10 b^10 vps orit written vps similarly define nesting depth depth vps follows depth 0depth c^10 0^10 c^10 string single character equal depth b^10 max depth depth b^10 b^10 vps depth 1^10 depth vps example vps nesting depth 0^10 1^10 2^10 vps vps represented string nesting depth
search suggestion system array string product string searchword design system suggests three product name product character searchword typed suggested product common prefix searchword three product common prefix three lexicographically minimum product list list suggested product character searchword typed
diameter binary tree root binary tree length diameter tree diameter binary tree length longest path two node tree path may may pas root length path two node represented number edge
maximum ice cream bar sweltering summer day boy want buy ice cream bar store n^10 ice cream bar array cost length n^10 cost price ith ice cream bar coin boy initially coin coin spend want buy many ice cream bar possible note boy buy ice cream bar order maximum number ice cream bar boy buy coin coin must solve problem counting sort
find positive integer solution equation callable function f x hidden formula value z reverse engineer formula positive integer pair x f x z may pair order exact formula hidden function monotonically increasing e f x f x 1^10 f x f x 1^10 function interface defined like interface customfunction public return positive integer f x two positive integer x based formula int f int x int judge solution follows judge list 9 hidden implementation customfunction along way generate answer key valid pair specific z judge receive two input function_id determine implementation test code target z judge call findsolution compare result answer key result match answer key solution accepted
frequency tracker design data structure keep track value answer query regarding frequency implement frequencytracker class frequencytracker initializes frequencytracker object empty array initially void add int number add number data structure void deleteone int number deletes one occurrence number data structure data structure may contain number case nothing deleted bool hasfrequency int frequency return true number data structure occurs frequency number time otherwise return false
jump game v array integer arr integer one step jump index index x x arr length 0^10 x x x 0^10 0^10 x addition jump index index j arr arr j arr arr k^10 index k^10 j formally min j k^10 max j choose index array start jumping maximum number index visit notice jump outside array time
check one string swap make string equal two string s1 s2 equal length string swap operation choose two index string necessarily different swap character index true possible make string equal performing one string swap exactly one string otherwise false
clumsy factorial factorial positive integer n^10 product positive integer le equal n^10 example factorial 10^10 10^10 9 8 7^10 6 5^10 4 3^10 2^10 1^10 make clumsy factorial using^10 integer decreasing order swapping multiply operation fixed rotation operation multiply divide add subtract order example clumsy 10^10 10^10 9 8 7^10 6 5^10 4 3^10 2^10 1^10 however operation still applied using^10 usual order operation arithmetic multiplication division step addition subtraction step multiplication division step processed left right additionally division use floor division 10^10 9 8 90 8 11 integer n^10 clumsy factorial n^10
course schedule total numcourses course take labeled 0^10 numcourses 1^10 array prerequisite prerequisite ai bi indicates must take course bi first want take course ai example pair 0^10 1^10 indicates take course 0^10 first take course 1^10 true finish course otherwise false
maximum value insertion large integer n^10 represented string integer digit x digit n^10 digit x inclusive range 1^10 9 n^10 may represent negative number want maximize n^10 numerical value inserting x anywhere decimal representation n^10 cannot insert x left negative sign example n^10 73 x 6 would best insert 7^10 3^10 making n^10 763 n^10 55 x 2^10 would best insert first 5^10 making n^10 255 string representing maximum value n^10 insertion
car fleet n^10 car going destination along one lane road destination target mile away two integer array position speed length n^10 position position ith car speed speed ith car mile per^10 hour car never pas another car ahead catch drive bumper bumper speed faster car slow match slower car speed distance two car ignored e assumed position car fleet non empty set car driving position speed note single car also car fleet car catch car fleet right destination point still considered one car fleet number car fleet arrive destination
number sub array size k^10 average greater equal threshold array integer arr two integer k^10 threshold number sub array size k^10 average greater equal threshold
remove covered interval array interval interval li ri represent interval li ri remove interval covered another interval list interval b^10 covered interval c^10 c^10 b^10 number remaining interval
number atom string formula representing chemical formula count atom atomic element always start uppercase character zero lowercase letter representing name one digit representing element count may follow count greater 1^10 count 1^10 digit follow example h2o h2o2 possible h1o2 impossible two formula concatenated together produce another formula example h2o2he3mg4 also formula formula placed parenthesis count optionally added also formula example h2o2 h2o2 3^10 formula count element string following form first name sorted order followed count count 1^10 followed second name sorted order followed count count 1^10 test case generated value output fit 32 bit integer
walking robot simulation robot infinite xy plane start point 0^10 0^10 facing north robot receive sequence three possible type command 2^10 turn left 90 degree 1^10 turn right 90 degree 1^10 k^10 9 move forward k^10 unit one unit time grid square obstacle ith obstacle grid point obstacle xi yi robot run obstacle instead stay current location move next command maximum euclidean distance robot ever get origin squared e distance 5^10 25 note north mean direction east mean x direction south mean direction west mean x direction
count lattice point inside circle 2d integer array circle circle xi yi ri represents center xi yi radius ri ith circle drawn grid number lattice point present inside least one circle note lattice point point integer coordinate point lie circumference circle also considered inside
number valid move combination chessboard 8 x 8 chessboard containing n^10 piece rook queen bishop string array piece length n^10 piece describes type rook queen bishop ith piece addition 2d integer array position also length n^10 position ri ci indicates ith piece currently 1^10 based coordinate ri ci chessboard making move piece choose destination square piece travel toward stop rook travel horizontally vertically c^10 direction 1^10 c^10 1^10 c^10 c^10 1^10 c^10 1^10 queen travel horizontally vertically diagonally c^10 direction 1^10 c^10 1^10 c^10 c^10 1^10 c^10 1^10 1^10 c^10 1^10 1^10 c^10 1^10 1^10 c^10 1^10 1^10 c^10 1^10 bishop travel diagonally c^10 direction 1^10 c^10 1^10 1^10 c^10 1^10 1^10 c^10 1^10 1^10 c^10 1^10 must make move every piece board simultaneously move combination consists move performed piece every second piece instantaneously travel one square towards destination already piece start traveling 0th second move combination invalid time two piece occupy square number valid move combination note two piece start square may choose square piece already destination two piece directly adjacent valid move past swap position one second
describe painting long thin painting represented number line painting painted multiple overlapping segment segment painted unique color 2d integer array segment segment starti endi colori represents half closed segment starti endi colori color color overlapping segment painting mixed painted two color mix form new color represented set mixed color example color 2^10 4 6 mixed resulting mixed color 2^10 4 6 sake simplicity output sum element set rather full set want describe painting minimum number non overlapping half closed segment mixed color segment represented 2d array painting painting j leftj rightj mixj describes half closed segment leftj rightj mixed color sum mixj example painting created segment 1^10 4 5^10 1^10 7^10 7^10 described painting 1^10 4 12 4 7^10 7^10 1^10 4 colored 5^10 7^10 sum 12 first second segment 4 7^10 colored 7^10 second segment 2d array painting describing finished painting excluding part painted may segment order half closed segment b^10 section number line point b^10 including point including point b^10
kth^10 largest element stream design class find kth^10 largest element stream note kth^10 largest element sorted order kth^10 distinct element implement kthlargest class kthlargest int k^10 int nums initializes object integer k^10 stream integer nums int add int val appends integer val stream return element representing kth^10 largest element stream
tuple product array nums distinct positive integer number tuples b^10 c^10 b^10 c^10 b^10 c^10 element nums b^10 c^10
find index first occurrence string two string needle haystack index first occurrence needle haystack 1^10 needle part haystack
count subtrees max distance city n^10 city numbered 1^10 n^10 array edge size n^10 1^10 edge ui vi represents bidirectional edge city ui vi exists unique path pair city word city form tree subtree subset city every city reachable every city subset path pair pass city subset two subtrees different city one subtree present 1^10 n^10 1^10 find number subtrees maximum distance two city subtree equal array size n^10 1^10 dth element 1^10 indexed number subtrees maximum distance two city equal notice distance two city number edge path
sliding window maximum array integer nums sliding window size k^10 moving left array right see k^10 number window time sliding window move right one position max sliding window
zuma game playing variation game zuma variation zuma single row colored ball board ball colored red yellow blue b^10 green g white w also several colored ball hand goal clear ball board turn pick ball hand insert two ball row either end row group three consecutive ball color remove group ball board removal cause group three color form continue removing group none left ball board win game repeat process either win ball hand string board representing row ball board string hand representing ball hand minimum number ball insert clear ball board cannot clear ball board using^10 ball hand 1^10
find original array prefix xor integer array pref size n^10 find array arr size n^10 satisfies pref arr 0^10 arr 1^10 arr note denotes bitwise xor operation proven answer unique
merge similar item two 2d integer array items1 items2 representing two set item array item following property item valuei weighti valuei represents value weighti represents weight ith item value item item unique 2d integer array ret ret valuei weighti weighti sum weight item value valuei note ret returned ascending order value
next greater element iv 0^10 indexed array non negative integer nums integer nums must find respective second greater integer second greater integer nums nums j j inums j nums exists exactly one index k^10 nums k^10 nums k^10 j nums j second greater integer considered 1^10 example array 1^10 2^10 4 3^10 second greater integer 1^10 4 2^10 3^10 3^10 4 1^10 integer array answer answer second greater integer nums
semi ordered permutation 0^10 indexed permutation n^10 integer nums permutation called semi ordered first number equal 1^10 last number equal n^10 perform operation many time want make nums semi ordered permutation pick two adjacent element nums swap minimum number operation make nums semi ordered permutation permutation sequence integer 1^10 n^10 length n^10 containing number exactly
pacific atlantic water flow x n^10 rectangular island border pacific ocean atlantic ocean pacific ocean touch island left top edge atlantic ocean touch island right bottom edge island partitioned grid square cell x n^10 integer matrix height height c^10 represents height sea level cell coordinate c^10 island receives lot rain rain water flow neighboring cell directly north south east west neighboring cell height le equal current cell height water flow cell adjacent ocean ocean 2d list grid coordinate result result ri ci denotes rain water flow cell ri ci pacific atlantic ocean
set matrix zero x n^10 integer matrix matrix element 0^10 set entire row column 0^10 must place
make two array equal reversing subarrays two integer array equal length target arr one step select non empty subarray arr reverse allowed^10 make number step true make arr equal target false otherwise
maximum number balloon string text want use character text form many instance word balloon possible use character text maximum number instance formed
count hill valley array 0^10 indexed integer array nums index part hill nums closest non equal neighbor smaller nums similarly index part valley nums closest non equal neighbor larger nums adjacent index j part hill valley nums nums j note index part hill valley must non equal neighbor left right index number hill valley nums
min max game 0^10 indexed integer array nums whose length power 2^10 apply following algorithm nums let n^10 length nums n^10 1^10 end process otherwise create new 0^10 indexed integer array newnums length n^10 2^10 every even index 0^10 n^10 2^10 assign value newnums min nums 2^10 nums 2^10 1^10 every odd index 0^10 n^10 2^10 assign value newnums max nums 2^10 nums 2^10 1^10 replace array nums newnums repeat entire process starting step 1^10 last number remains nums applying algorithm
find word formed character array string word string char string good formed character char character used sum length good string word
fizz buzz multithreaded four function printfizz print word fizz console printbuzz print word buzz console printfizzbuzz print word fizzbuzz console andprintnumber print integer console instance class fizzbuzz four function fizz buzz fizzbuzz number instance fizzbuzz passed four different thread thread call fizz output word fizz thread b^10 call buzz output word buzz thread c^10 call fizzbuzz output word fizzbuzz thread call number output integer modify class output series 1^10 2^10 fizz 4 buzz ith token 1^10 indexed series fizzbuzz divisible 3^10 5^10 fizz divisible 3^10 5^10 buzz divisible 5^10 3^10 ori divisible 3^10 5^10 implement fizzbuzz class fizzbuzz int n^10 initializes object number n^10 represents length sequence printed void fizz printfizz call printfizz output fizz void buzz printbuzz call printbuzz output buzz void fizzbuzz printfizzbuzz call printfizzbuzz output fizzbuzz void number printnumber call printnumber output number
maximum score performing multiplication operation two 0^10 indexed integer array nums multiplier size n^10 respectively n^10 begin score 0^10 want perform exactly operation ith operation 0^10 indexed choose one integer x either start end array nums add multiplier x score note multiplier 0^10 corresponds first operation multiplier 1^10 second operation remove x nums maximum score performing operation
contains duplicate ii integer array nums integer k^10 true two distinct index j array nums nums j ab j k^10
count subarrays fixed bound integer array nums two integer mink maxk fixed bound subarray nums subarray satisfies following condition minimum value subarray equal mink maximum value subarray equal maxk number fixed bound subarrays subarray contiguous part array
count say count say sequence sequence digit string defined recursive formula countandsay 1^10 1^10 countandsay n^10 way would say digit string countandsay n^10 1^10 converted different digit string determine say digit string split minimal number substring substring contains exactly one unique digit substring say number digit say digit finally concatenate every said digit example saying conversion digit string 3322251 positive integer n^10 nth term count say sequence
append k^10 integer minimal sum integer array nums integer k^10 append k^10 unique positive integer appear nums nums resulting total sum minimum sum k^10 integer appended nums
count good triplet array two 0^10 indexed array nums1 nums2 length n^10 permutation 0^10 1^10 n^10 1^10 good triplet set 3^10 distinct value present increasing order position nums1 nums2 word consider pos1v index value v nums1 pos2v index value v nums2 good triplet set x z 0^10 x z n^10 1^10 pos1x pos1y pos1z pos2x pos2y pos2z total number good triplet
binary search array integer nums sorted ascending order integer target write function search target nums target exists index otherwise 1^10 must write algorithm log n^10 runtime complexity
distinct echo substring number distinct non empty substring text written concatenation string e written string
distribute candy people distribute number candy row n^10 num_people people following way give 1^10 candy first person 2^10 candy second person give n^10 candy last person go back start row giving n^10 1^10 candy first person n^10 2^10 candy second person give 2^10 n^10 candy last person process repeat u giving one candy time moving start row reach end run candy last person receive remaining candy necessarily one previous gift array length num_people sum candy represents final distribution candy
reduction operation make array element equal integer array nums goal make element nums equal complete one operation follow step find largest value nums let index 0^10 indexed value largest multiple element largest value pick smallest find next largest value nums strictly smaller largest let value nextlargest reduce nums nextlargest number operation make element nums equal
row maximum one x n^10 binary matrix mat find 0^10 indexed position row contains maximum count one number one row case multiple row maximum count one row smallest row number selected array containing index row number one
basic calculator string representing valid expression implement basic calculator evaluate result evaluation note allowed^10 use built function evaluates string mathematical expression eval
count possible route array distinct positive integer location location represents position city also integer start finish fuel representing starting city ending city initial amount fuel respectively step city pick city j j 0^10 j location length move city j moving city city j reduces amount fuel location location j please notice x denotes absolute value x notice fuel cannot become negative point time allowed^10 visit city including start finish count possible route start finish answer may large modulo 109 7^10
range sum query 2d immutable 2d matrix matrix handle multiple query following type calculate sum element matrix inside rectangle defined upper left corner row1 col1 lower right corner row2 col2 implement nummatrix class nummatrix int matrix initializes object integer matrix matrix int sumregion int row1 int col1 int row2 int col2 return sum element matrix inside rectangle defined upper left corner row1 col1 lower right corner row2 col2 must design algorithm sumregion work 1^10 time complexity
eliminate maximum number monster playing video game defending city group n^10 monster 0^10 indexed integer array dist size n^10 dist initial distance kilometer ith monster city monster walk toward city constant speed speed monster integer array speed size n^10 speed speed ith monster kilometer per^10 minute weapon fully charged eliminate single monster however weapon take one minute charge weapon fully charged start lose monster reach city monster reach city exact moment weapon fully charged count loss game end use weapon maximum number monster eliminate lose n^10 eliminate monster reach city
number valid word puzzle respect puzzle string word valid following condition satisfied word contains first letter puzzle letter word letter puzzle example puzzle abcdefg valid word faced cabbage baggage whileinvalid word beefed include based includes puzzle array answer answer number word word list word valid respect puzzle puzzle
sum matrix query integer n^10 0^10 indexed 2d array query query typei indexi vali initially 0^10 indexed n^10 x n^10 matrix filled 0^10 query must apply one following change typei 0^10 set value row indexi vali overwriting previous value typei 1^10 set value column indexi vali overwriting previous value sum integer matrix query applied
apply operation array 0^10 indexed array nums size n^10 consisting non negative integer need apply n^10 1^10 operation array ith operation 0^10 indexed apply following ith element nums nums nums 1^10 multiply nums 2^10 set nums 1^10 0^10 otherwise skip operation performing operation shift 0^10 end array example array 1^10 0^10 2^10 0^10 0^10 1^10 shifting 0^10 end 1^10 2^10 1^10 0^10 0^10 0^10 resulting array note operation applied sequentially
count vowel string range 0^10 indexed array string word 2d array integer query query query li ri asks u find number string present range li ri inclusive word start end vowel array an^10 size query length an^10 answer ith query note vowel letter e u
smallest value rearranged number integer num rearrange digit num value minimized contain leading zero rearranged number minimal value note sign number change rearranging digit
design hashset design hashset without^10 using^10 built hash table library implement myhashset class void add key insert value key hashset bool contains key return whether value key exists hashset void remove key remove value key hashset key exist hashset nothing
arithmetic subarrays sequence number called arithmetic consists least two element difference every two consecutive element formally sequence arithmetic 1^10 1^10 0^10 valid example arithmetic sequence 1^10 3^10 5^10 7^10 97 7^10 7^10 73 1^10 5^10 9the following sequence arithmetic 1^10 1^10 2^10 5^10 7you array n^10 integer nums two array integer l representing range query ith query range l array 0^10 indexed list boolean element answer answer true subarray nums l nums l 1^10 nums rearranged form arithmetic sequence false otherwise
binary tree coloring game two player play turn based game binary tree root binary tree number node n^10 tree n^10 odd node distinct value 1^10 n^10 initially first player name value x 1^10 x n^10 second player name value 1^10 n^10 x first player color node value x red second player color node value blue player take turn starting first player turn player chooses node color red player 1^10 blue player 2^10 color uncolored neighbor chosen node either left child right child parent chosen node player cannot choose node way must pas turn player pas turn game end winner player colored node second player possible choose ensure win game true possible false
find group farmland 0^10 indexed x n^10 binary matrix land 0^10 represents hectare forested land 1^10 represents hectare farmland keep land organized designated rectangular area hectare consist entirely farmland rectangular area called group two group adjacent meaning farmland one group four directionally adjacent another farmland different group land represented coordinate system top left corner land 0^10 0^10 bottom right corner land 1^10 n^10 1^10 find coordinate top left bottom right corner group farmland group farmland top left corner r1 c1 bottom right corner r2 c2 represented 4 length array r1 c1 r2 c2 2d array containing 4 length array described group farmland land group farmland empty array may answer order
check array sorted rotated array nums true array originally sorted non decreasing order rotated number position including zero otherwise false may duplicate original array note array rotated x position result array b^10 length b^10 x length modulo operation
remove max number edge keep graph fully traversable alice bob undirected graph n^10 node three type edge type 1^10 traversed alice type 2^10 traversed bob type 3^10 traversed alice bob array edge edge typei ui vi represents bidirectional edge type typei node ui vi find maximum number edge remove removing edge graph still fully traversed alice bob graph fully traversed alice bob starting node reach node maximum number edge remove 1^10 alice bob cannot fully traverse graph
split message based limit string message positive integer limit must split message one part based limit resulting part suffix b^10 b^10 replaced total number part replaced index part starting 1^10 going b^10 additionally length resulting part including suffix equal limit except last part whose length limit resulting part formed suffix removed concatenated order equal message also result contain part possible part message would split array string impossible split message required empty array
minimum number tap open water garden one dimensional garden x axis garden start point 0^10 end point n^10 e length garden n^10 n^10 1^10 tap located point 0^10 1^10 n^10 garden integer n^10 integer array range length n^10 1^10 range 0^10 indexed mean th tap water area range range open minimum number tap open water whole garden garden cannot watered 1^10
number increasing path grid x n^10 integer matrix grid move cell adjacent cell 4 direction number strictly increasing path grid start cell end cell answer may large modulo 109 7^10 two path considered different exactly sequence visited cell
find width column grid 0^10 indexed x n^10 integer matrix grid width column maximum length integer example grid 10^10 3^10 12 width column 3^10 10^10 length 3^10 integer array an^10 size n^10 an^10 width ith column length integer x len digit equal len x non negative len 1^10 otherwise
distinct subsequence two string number distinctsubsequencesof equal test case generated answer fit 32 bit signed integer
minimum genetic mutation gene string represented 8 character long string choice c^10 g suppose need investigate mutation gene string startgene gene string endgene one mutation defined one single character changed gene string example aaccggtt aaccggta one mutation also gene bank bank record valid gene mutation gene must bank make valid gene string two gene string startgene endgene gene bank bank minimum number mutation needed mutate startgene endgene mutation 1^10 note starting point assumed valid might included bank
swap adjacent lr string string composed l x character like rxxlrxrxl move consists either replacing one occurrence xl lx replacing one occurrence rx xr starting string start ending string end true exists sequence move transform one string
count good triplet array integer arr three integer b^10 c^10 need find number good triplet triplet arr arr j arr k^10 good following condition true 0^10 j k^10 arr length arr arr j arr j arr k^10 b^10 arr arr k^10 cwhere x denotes absolute value x number good triplet
consecutive number sql schematable log column name type id int num varchar id primary key table id autoincrement column write sql query find number appear least three time consecutively result table order query result format following example
pas pillow n^10 people standing line labeled 1^10 n^10 first person line holding pillow initially every second person holding pillow pass next person standing line pillow reach end line direction change people continue passing pillow opposite direction example pillow reach nth person pas n^10 1th person n^10 2th person two positive integer n^10 time index person holding pillow time second
construct lexicographically largest valid sequence integer n^10 find sequence satisfies following integer 1^10 occurs sequence integer 2^10 n^10 occurs twice sequence every integer 2^10 n^10 distance two occurrence exactly distance two number sequence j absolute difference index j lexicographically largest sequence guaranteed constraint always solution sequence lexicographically larger sequence b^10 length first position b^10 differ sequence number greater corresponding number b^10 example 0^10 1^10 9 0^10 lexicographically larger 0^10 1^10 5^10 6 first position differ third number 9 greater 5^10
list product ordered period sql schematable product column name type product_id int product_name varchar product_category varchar product_id primary key table table contains data company product table order column name type product_id int order_date date unit int primary key table may duplicate row product_id foreign key product table unit number product ordered order_date write sql query get name product least 100 unit ordered february 2020^10 amount result table order query result format following example
find bottom left tree value root binary tree leftmost value last row tree
meeting room iii integer n^10 n^10 room numbered 0^10 n^10 1^10 2d integer array meeting meeting starti endi mean meeting held half closed time interval starti endi value starti unique meeting allocated room following manner meeting take place unused room lowest number available room meeting delayed room becomes free delayed meeting duration original meeting room becomes unused meeting earlier original start time room number room held meeting multiple room room lowest number half closed interval b^10 interval b^10 including including b^10
minimize maximum array 0^10 indexed array nums comprising n^10 non negative integer one operation must choose integer 1^10 n^10 nums 0^10 decrease nums 1^10 increase nums 1^10 1^10 minimum possible value maximum integer nums performing number operation
circle rectangle overlapping circle represented radius xcenter ycenter axis aligned rectangle represented x1 y1 x2 y2 x1 y1 coordinate bottom left corner x2 y2 coordinate top right corner rectangle true circle rectangle overlapped otherwise false word check point xi yi belongs circle rectangle time
count complete tree node root complete binary tree number node tree according wikipedia every level except possibly last completely filled complete binary tree node last level far left possible 1^10 2h node inclusive last level h design algorithm run le n^10 time complexity
k^10 th smallest lexicographical order two integer n^10 k^10 kth^10 lexicographically smallest integer range 1^10 n^10
check move legal 0^10 indexed 8 x 8 grid board board c^10 represents cell c^10 game board board free cell represented white cell represented w black cell represented b^10 move game consists choosing free cell changing color playing either white black however move legal changing cell becomes endpoint good line horizontal vertical diagonal good line line three cell including endpoint endpoint line one color remaining cell middle opposite color cell line free find example good line figure two integer rmove cmove character color representing color playing white black true changing cell rmove cmove color color legal move false legal
statistic large sample large sample integer range 0^10 255 sample large represented array count count k^10 number time k^10 appears sample calculate following statistic minimum minimum element sample maximum maximum element sample mean average sample calculated total sum element divided total number element median sample odd number element median middle element sample sorted sample even number element median average two middle element sample sorted mode number appears sample guaranteed unique statistic sample array floating point number minimum maximum mean median mode answer within 10^10 5^10 actual answer accepted
path matrix whose sum divisible k^10 0^10 indexed x n^10 integer matrix grid integer k^10 currently position 0^10 0^10 want reach position 1^10 n^10 1^10 moving right number path sum element path divisible k^10 answer may large modulo 109 7^10
profitable path tree undirected tree n^10 node labeled 0^10 n^10 1^10 rooted node 0^10 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree every node gate also array even integer amount amount represents price needed open gate node amount negative cash reward obtained opening gate node otherwise game go follows initially alice node 0^10 bob node bob every second alice bob move adjacent node alice move towards leaf node bob move towards node 0^10 every node along path alice bob either spend money open gate node accept reward note gate already open price required cash reward alice bob reach node simultaneously share price reward opening gate word price open gate c^10 alice bob pay c^10 2^10 similarly reward gate c^10 receive c^10 2^10 alice reach leaf node stop moving similarly bob reach node 0^10 stop moving note event independent maximum net income alice travel towards optimal leaf node
merge k^10 sorted list array k^10 linked list list linked list sorted ascending order merge linked list one sorted linked list
sell diminishing valued colored ball inventory different colored ball customer want order ball color customer weirdly value colored ball colored ball value number ball color currently inventory example 6 yellow ball customer would pay 6 first yellow ball transaction 5^10 yellow ball left next yellow ball valued 5^10 e value ball decrease sell customer integer array inventory inventory represents number ball ith color initially also integer order represents total number ball customer want sell ball order maximum total value attain selling order colored ball answer may large modulo 109 7^10
split array average integer array nums move element nums one two array b^10 b^10 non empty average average b^10 true possible achieve false otherwise note array arr average arr sum element arr length arr
number student homework time two integer array starttime endtime integer querytime ith student started homework time starttime finished time endtime number student homework time querytime formally number student querytime lay interval starttime endtime inclusive
partition array according pivot 0^10 indexed integer array nums integer pivot rearrange nums following condition satisfied every element le pivot appears every element greater pivot every element equal pivot appears element le greater pivot relative order element le pivot element greater pivot maintained formally consider every pi pj pi new position ith element pj new position jth element element le pivot j nums pivot nums j pivot pi pj similarly element greater pivot j nums pivot nums j pivot pi pj nums rearrangement
remove adjacent duplicate string ii string integer k^10 k^10 duplicate removal consists choosing k^10 adjacent equal letter removing causing left right side deleted substring concatenate together repeatedly make k^10 duplicate removal longer final string duplicate removal made guaranteed answer unique
rearrange array element sign 0^10 indexed integer array nums even length consisting equal number positive negative integer rearrange element nums modified array follows condition every consecutive pair integer opposite sign integer sign order present nums preserved rearranged array begin positive integer modified array rearranging element satisfy aforementioned condition
find longest substring containing vowel even count string size longest substring containing vowel even number time e u must appear even number time
strange printer ii strange printer following two special requirement turn printer print solid rectangular pattern single color grid cover existing color rectangle printer used color operation color cannot used x n^10 matrix targetgrid targetgrid row col color position row col grid true possible print matrix targetgrid otherwise false
sum digit base k^10 integer n^10 base 10^10 base k^10 sum digit n^10 converting n^10 base 10^10 base k^10 converting digit interpreted base 10^10 number sum returned base 10^10
maximum length subarray positive product array integer nums find maximum length subarray product element positive subarray array consecutive sequence zero value taken array maximum length subarray positive product
camelcase matching array string query string pattern boolean array answer answer true query match pattern false otherwise query word query match pattern insert lowercase english letter pattern equal query may insert character position may insert character
decode way ii message containing letter z encoded number using^10 following mapping 1^10 b^10 2^10 z 26 decode encoded message digit must grouped mapped back letter using^10 reverse mapping may multiple way example 11106 mapped aajf grouping 1^10 1^10 10^10 6 kjf grouping 11 10^10 6 note grouping 1^10 11 06 invalid 06 cannot mapped f 6 different 06 addition mapping encoded message may contain character represent digit 1^10 9 0^10 excluded example encoded message 1^10 may represent encoded message 11 12 13 14 15 16 17 18 19 decoding 1^10 equivalent decoding encoded message represent string consisting digit character number way decode answer may large modulo 109 7^10
make k^10 subarray sum equal 0^10 indexed integer array arr integer k^10 array arr circular word first element array next element last element last element array previous element first element following operation number time pick element arr increase decrease 1^10 minimum number operation sum subarray length k^10 equal subarray contiguous part array
reverse node even length group head linked list node linked list sequentially assigned non empty group whose length form sequence natural number 1^10 2^10 3^10 4 length group number node assigned word 1st node assigned first group 2nd 3rd node assigned second group 4th 5th 6th node assigned third group note length last group may le equal 1^10 length second last group reverse node group even length head modified linked list
number island x n^10 2d binary grid grid represents map 1^10 land 0^10 water number island island surrounded water formed connecting adjacent land horizontally vertically may assume four edge grid surrounded water
find k^10 sum array integer array nums positive integer k^10 choose subsequence array sum element together define k^10 sum array kth^10 largest subsequence sum obtained necessarily distinct k^10 sum array subsequence array derived another array deleting element without^10 changing order remaining element note empty subsequence considered sum 0^10
reachable node restriction undirected tree n^10 node labeled 0^10 n^10 1^10 n^10 1^10 edge 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree also integer array restricted represents restricted node maximum number node reach node 0^10 without^10 visiting restricted node note node 0^10 restricted node
exchange seat sql schematable seat column name type id int student varchar id primary key column table row table indicates name id student id continuous increment write sql query swap seat id every two consecutive student number student odd id last student swapped result table ordered id ascending order query result format following example
first bad version product manager currently leading team develop new product unfortunately latest version product fails quality check version developed based previous version version bad version also bad suppose n^10 version 1^10 2^10 n^10 want find first bad one cause following one bad api bool isbadversion version return whether version bad implement function find first bad version minimize number call api
best time buy sell stock cooldown array price price price stock ith day find maximum profit achieve may complete many transaction like e buy one sell one share stock multiple time following restriction sell stock cannot buy stock next day e cooldown one day note may engage multiple transaction simultaneously e must sell stock buy
path maximum gold gold mine grid size x n^10 cell mine integer representing amount gold cell 0^10 empty maximum amount gold collect condition every time located cell collect gold cell position walk one step left right visit cell never visit cell 0^10 gold start stop collecting gold position grid gold
smallest missing non negative integer operation 0^10 indexed integer array nums integer value one operation add subtract value element nums example nums 1^10 2^10 3^10 value 2^10 choose subtract value nums 0^10 make nums 1^10 2^10 3^10 mex minimum excluded array smallest missing non negative integer example mex 1^10 2^10 3^10 0^10 mex 1^10 0^10 3^10 2^10 maximum mex nums applying mentioned operation number time
super egg drop k^10 identical egg access building n^10 floor labeled 1^10 n^10 know exists floor f 0^10 f n^10 egg dropped floor higher f break egg dropped floor f break move may take unbroken egg drop floor x 1^10 x n^10 egg break longer use however egg break may reuse future move minimum number move need determine certainty value f
linked list component head linked list containing unique integer value integer array nums subset linked list value number connected component nums two value connected appear consecutively linked list
copy list random pointer linked list length n^10 node contains additional random pointer could point node list null construct deep copy list deep copy consist exactly n^10 brand new node new node value set value corresponding original node next random pointer new node point new node copied list pointer original list copied list represent list state none pointer new list point node original list example two node x original list x random corresponding two node x copied list x random head copied linked list linked list represented input output list n^10 node node represented pair val random_index val integer representing node valrandom_index index node range 0^10 n^10 1^10 random pointer point null point node code head original linked list
minimum value get positive step step sum array integer nums start initial positive value startvalue iteration calculate step step sum startvalue plus element nums left right minimum positive value startvalue step step sum never le 1^10
form array concatenating subarrays another array 2d integer array group length n^10 also integer array nums asked choose n^10 disjoint subarrays array nums ith subarray equal group 0^10 indexed 0^10 1^10 th subarray appears ith subarray nums e subarrays must order group true task false otherwise note subarrays disjoint index k^10 nums k^10 belongs one subarray subarray contiguous sequence element within array
longest happy prefix string called happy prefix non empty prefix also suffix excluding string longest happy prefix empty string prefix exists
minimum average difference 0^10 indexed integer array nums length n^10 average difference index absolute difference average first 1^10 element nums average last n^10 1^10 element average rounded nearest integer index minimum average difference multiple index smallest one note absolute difference two number absolute value difference average n^10 element sum n^10 element divided integer division n^10 average 0^10 element considered 0^10
sqrt x non negative integer x square root x rounded nearest integer returned integer non negative must use built exponent function operator example use pow x 0^10 5^10 c^10 x 0^10 5^10 python
number zero filled subarrays integer array nums number subarrays filled 0^10 subarray contiguous non empty sequence element within array
handling sum query update two 0^10 indexed array nums1 nums2 2d array query query three type query query type 1^10 query 1^10 l flip value 0^10 1^10 1^10 0^10 nums1 index l index l 0^10 indexed query type 2^10 query 2^10 p 0^10 every index 0^10 n^10 set nums2 nums2 nums1 p query type 3^10 query 3^10 0^10 0^10 find sum element nums2 array containing answer third type query
minimum difference largest smallest value three move integer array nums one move choose one element nums change value minimum difference largest smallest value nums performing three move
unique morse code word international morse code defines standard encoding letter mapped series dot dash follows map b^10 map c^10 map convenience full table 26 letter english alphabet array string word word written concatenation morse code letter example cab written concatenation call concatenation transformation word number different transformation among word
check every row column contains number n^10 x n^10 matrix valid every row every column contains integer 1^10 n^10 inclusive n^10 x n^10 integer matrix matrix true matrix valid otherwise false
binary prefix divisible 5^10 binary array nums 0^10 indexed define xi number whose binary representation subarray nums 0^10 significant bit least significant bit example nums 1^10 0^10 1^10 x0 1^10 x1 2^10 x2 5^10 array booleans answer answer true xi divisible 5^10
cat mouse ii game played cat mouse named cat mouse environment represented grid size row x col element wall floor player cat mouse food player represented character c^10 cat mouse floor represented character walked wall represented character cannot walked food represented character f walked one character c^10 f grid mouse cat play according following rule mouse move first take turn move turn cat mouse jump one four direction left right cannot jump wall outside grid catjump mousejump maximum length cat mouse jump time respectively cat mouse jump le maximum length staying position allowed^10 mouse jump cat game end 4 way cat occupies position mouse cat win cat reach food first cat win mouse reach food first mouse win mouse cannot get food within 1000 turn cat win row x col matrix grid two integer catjump mousejump true mouse win game cat mouse play optimally otherwise false
online majority element subarray design data structure efficiently find majority element subarray majority element subarray element occurs threshold time subarray implementing majoritychecker class majoritychecker int arr initializes instance class array arr int query int left int right int threshold return element subarray arr left right occurs least threshold time 1^10 element exists
split array fibonacci sequence string digit num 123456579 split fibonacci like sequence 123 456 579 formally fibonacci like sequence list f non negative integer 0^10 f 231 integer fit 32 bit signed integer type f length 3^10 andf f 1^10 f 2^10 0^10 f length 2^10 note splitting string piece piece must extra leading zero except piece number 0^10 fibonacci like sequence split num cannot done
max point line array point point xi yi represents point x plane maximum number point lie straight line
word break ii string dictionary string worddict add space construct sentence word valid dictionary word possible sentence order note word dictionary may reused multiple time segmentation
maximum sum distinct subarrays length k^10 integer array nums integer k^10 find maximum subarray sum subarrays nums following condition length subarray k^10 andall element subarray distinct maximum subarray sum subarrays condition subarray meet condition 0^10 subarray contiguous non empty sequence element within array
remove linked list element head linked list integer val remove node linked list node val val new head
largest divisible subset set distinct positive integer nums largest subset answer every pair answer answer j element subset satisfies answer answer j 0^10 oranswer j answer 0if multiple solution
sign product array function signfunc x return 1^10 x positive 1^10 x negative 0^10 x equal 0^10 integer array nums let product product value array nums signfunc product
count common word one occurrence two string array words1 words2 number string appear exactly two array
binary tree pruning root binary tree tree every subtree tree containing 1^10 removed subtree node node node plus every node descendant node
n^10 queen n^10 queen puzzle problem placing n^10 queen n^10 x n^10 chessboard two queen attack integer n^10 distinct solution n^10 queen puzzle may answer order solution contains distinct board configuration n^10 queen placement q indicate queen empty space respectively
build array find maximum exactly k^10 comparison three integer n^10 k^10 consider following algorithm find maximum element array positive integer build array arr following property arr exactly n^10 integer 1^10 arr 0^10 n^10 applying mentioned algorithm arr value search_cost equal k^10 number way build array arr mentioned condition answer may grow large answer must computed modulo 109 7^10
region cut slash n^10 x n^10 grid composed 1^10 x 1^10 square 1^10 x 1^10 square consists blank space character divide square contiguous region grid grid represented string array number region note backslash character escaped represented
clone graph reference node connected undirected graph deep copy clone graph node graph contains value int list list node neighbor class node public int val public list node neighbor test case format simplicity node value node index 1^10 indexed example first node val 1^10 second node val 2^10 graph represented test case using^10 adjacency list adjacency list collection unordered list used represent finite graph list describes set neighbor node graph node always first node val 1^10 must copy node reference cloned graph
keyboard row array string word word typed using^10 letter alphabet one row american keyboard like image american keyboard first row consists character qwertyuiop second row consists character asdfghjkl andthe third row consists character zxcvbnm
minimum fuel cost report capital tree e connected undirected graph cycle structure country network consisting n^10 city numbered 0^10 n^10 1^10 exactly n^10 1^10 road capital city city 0^10 2d integer array road road ai bi denotes exists bidirectional road connecting city ai bi meeting representative city meeting capital city car city integer seat indicates number seat car representative use car city travel change car ride another representative cost traveling two city one liter fuel minimum number liter fuel reach capital city
delete column make sorted iii array n^10 string strs length may choose deletion index delete character index string example strs abcdef uvwxyz deletion index 0^10 2^10 3^10 final array deletion bef vyz suppose chose set deletion index answer deletion final array every string row lexicographic order e strs 0^10 0^10 strs 0^10 1^10 strs 0^10 strs 0^10 length 1^10 strs 1^10 0^10 strs 1^10 1^10 strs 1^10 strs 1^10 length 1^10 minimum possible value answer length
minimum operation make array equal ii two integer array nums1 nums2 equal length n^10 integer k^10 perform following operation nums1 choose two index j increment nums1 k^10 decrement nums1 j k^10 word nums1 nums1 k^10 nums1 j nums1 j k^10 nums1 said equal nums2 index 0^10 n^10 nums1 nums2 minimum number operation required make nums1 equal nums2 impossible make equal 1^10
way make fair array integer array nums choose exactly one index 0^10 indexed remove element notice index element may change removal example nums 6 1^10 7^10 4 1^10 choosing remove index 1^10 result nums 6 7^10 4 1^10 choosing remove index 2^10 result nums 6 1^10 4 1^10 choosing remove index 4 result nums 6 1^10 7^10 4 array fair sum odd indexed value equal sum even indexed value number index could choose removal nums fair
smallest missing genetic value subtree family tree rooted 0^10 consisting n^10 node numbered 0^10 n^10 1^10 0^10 indexed integer array parent parent parent node node 0^10 root parent 0^10 1^10 105 genetic value represented integer inclusive range 1^10 105 0^10 indexed integer array nums nums distinct genetic value node array an^10 length n^10 an^10 smallest genetic value missing subtree rooted node subtree rooted node x contains node x descendant node
minimum difference highest lowest k^10 score 0^10 indexed integer array nums nums represents score ith student also integer k^10 pick score k^10 student array difference highest lowest k^10 score minimized minimum possible difference
koko eating banana koko love eat banana n^10 pile banana ith pile pile banana guard gone come back h hour koko decide banana per^10 hour eating speed k^10 hour chooses pile banana eats k^10 banana pile pile le k^10 banana eats instead eat banana hour koko like eat slowly still want finish eating banana guard minimum integer k^10 eat banana within h hour
distance bus stop bus n^10 stop numbered 0^10 n^10 1^10 form circle know distance pair neighboring stop distance distance stop number 1^10 n^10 bus go along direction e clockwise counterclockwise shortest distance start destination stop
jump game integer array nums initially positioned array first index element array represents maximum jump length position true reach last index false otherwise
minimum number day eat n^10 orange n^10 orange kitchen decided eat orange every day follows eat one orange number remaining orange n^10 divisible 2^10 eat n^10 2^10 orange number remaining orange n^10 divisible 3^10 eat 2^10 n^10 3^10 orange choose one action per^10 day integer n^10 minimum number day eat n^10 orange
occurrence bigram two string first second consider occurrence text form first second third second come immediately first third come immediately second array word third occurrence first second third
calendar implementing program use calendar add new event adding event cause double booking double booking happens two event non empty intersection e moment common event event represented pair integer start end represents booking half open interval start end range real number x start x end implement mycalendar class mycalendar initializes calendar object boolean book int start int end return true event added calendar successfully without^10 causing double booking otherwise false add event calendar
convert base 2^10 integer n^10 binary string representing representation base 2^10 note returned string leading zero string 0^10
maximum xor query sorted array nums n^10 non negative integer integer maximumbit want perform following query n^10 time find non negative integer k^10 2maximumbit nums 0^10 xor nums 1^10 xor xor nums nums length 1^10 xor k^10 maximized k^10 answer ith query remove last element current array nums array answer answer answer ith query
count number good subarrays integer array nums integer k^10 number good subarrays nums subarray arr good least k^10 pair index j j arr arr j subarray contiguous non empty sequence element within array
largest rectangle histogram array integer height representing histogram bar height width bar 1^10 area largest rectangle histogram
interleaving string string s1 s2 s3 find whether s3 formed interleaving s1 s2 interleaving two string configuration divided n^10 msubstringsrespectively s1 s2 snt t1 t2 tm n^10 1the interleaving s1 t1 s2 t2 s3 t3 t1 s1 t2 s2 t3 s3 note b^10 concatenation string b^10
count number bad pair 0^10 indexed integer array nums pair index j bad pair j j nums j nums total number bad pair nums
minimum add make parenthesis valid parenthesis string valid empty string written ab concatenated b^10 b^10 valid string orit written valid string parenthesis string one move insert parenthesis position string example insert opening parenthesis closing parenthesis minimum number move required make valid
utf 8 validation integer array data representing data whether valid utf 8 encoding e translates sequence valid utf 8 encoded character character utf8 1^10 4 byte long subjected following rule 1^10 byte character first bit 0^10 followed unicode code n^10 byte character first n^10 bit one n^10 1^10 bit 0^10 followed n^10 1^10 byte significant 2^10 bit 10^10 utf 8 encoding would work number byte utf 8 octet sequence binary 1^10 0xxxxxxx2 110xxxxx 10xxxxxx3 1110xxxx 10xxxxxx 10xxxxxx4 11110xxx 10xxxxxx 10xxxxxx 10xxxxxxx denotes bit binary form byte may either 0^10 1^10 note input array integer least significant 8 bit integer used store data mean integer represents 1^10 byte data
single element sorted array sorted array consisting integer every element appears exactly twice except one element appears exactly single element appears solution must run log n^10 time 1^10 space
delete leaf value binary tree root integer target delete leaf node value target note delete leaf node value target parent node becomes leaf node value target also deleted need continue cannot
rearrange array maximize prefix score 0^10 indexed integer array nums rearrange element nums order including order let prefix array containing prefix sum nums rearranging word prefix sum element 0^10 nums rearranging score nums number positive integer array prefix maximum score achieve
stamping sequence two string stamp target initially string length target length one turn place stamp replace every letter corresponding letter stamp example stamp abc target abcba initially one turn place stamp index 0^10 obtain abc place stamp index 1^10 obtain abc orplace stamp index 2^10 obtain abc note stamp must fully contained boundary order stamp e cannot place stamp index 3^10 want convert target using^10 10^10 target length turn array index left letter stamped turn cannot obtain target within 10^10 target length turn empty array
minimum number step make two string anagram two string length one step choose character replace another character minimum number step make anagram anagram string string contains character different ordering
largest local value matrix n^10 x n^10 integer matrix grid generate integer matrix maxlocal size n^10 2^10 x n^10 2^10 maxlocal j equal largest value 3^10 x 3^10 matrix grid centered around row 1^10 column j 1^10 word want find largest value every contiguous 3^10 x 3^10 matrix grid generated matrix
minimum incompatibility integer array nums integer k^10 asked distribute array k^10 subset equal size two equal element subset subset incompatibility difference maximum minimum element array minimum possible sum incompatibility k^10 subset distributing array optimally 1^10 possible subset group integer appear array particular order
perfect rectangle array rectangle rectangle xi yi ai bi represents axis aligned rectangle bottom left point rectangle xi yi top right point ai bi true rectangle together form exact cover rectangular region
count fertile pyramid land farmer rectangular grid land row n^10 column divided unit cell cell either fertile represented 1^10 barren represented 0^10 cell outside grid considered barren pyramidal plot land defined set cell following criterion number cell set greater 1^10 cell must fertile apex pyramid topmost cell pyramid height pyramid number row cover let c^10 apex pyramid height h plot comprises cell j h 1^10 c^10 j c^10 inverse pyramidal plot land defined set cell similar criterion number cell set greater 1^10 cell must fertile apex inverse pyramid bottommost cell inverse pyramid height inverse pyramid number row cover let c^10 apex pyramid height h plot comprises cell j h 1^10 c^10 j c^10 example valid invalid pyramidal inverse pyramidal plot shown black cell indicate fertile cell 0^10 indexed x n^10 binary matrix grid representing farmland total number pyramidal inverse pyramidal plot found grid
substring size three distinct character string good repeated character string number good substring length three note multiple occurrence substring every occurrence counted substring contiguous sequence character string
minimum obstacle removal reach corner 0^10 indexed 2d integer array grid size x n^10 cell one two value 0^10 represents empty cell 1^10 represents obstacle may removed move left right empty cell minimum number obstacle remove move upper left corner 0^10 0^10 lower right corner 1^10 n^10 1^10
smallest range covering element k^10 list k^10 list sorted integer non decreasing order find smallest range includes least one number k^10 list define range b^10 smaller range c^10 b^10 c^10 c^10 b^10 c^10
sum even number query integer array nums array query query vali indexi query first apply nums indexi nums indexi vali print sum even value nums integer array answer answer answer ith query
escape large maze 1^10 million 1^10 million grid xy plane coordinate grid square x start source sx sy square want reach target tx ty square also array blocked square blocked xi yi represents blocked square coordinate xi yi move walk one square north east south west square array blocked square also allowed^10 walk outside grid true possible reach target square source square sequence valid move
erect fence array tree tree xi yi represents location tree garden fence entire garden using^10 minimum length rope expensive garden fenced tree enclosed coordinate tree exactly located fence perimeter may answer order
second minimum time reach destination city represented bi directional connected graph n^10 vertex vertex labeled 1^10 n^10 inclusive edge graph represented 2d integer array edge edge ui vi denotes bi directional edge vertex ui vertex vi every vertex pair connected one edge vertex edge time taken traverse edge time minute vertex traffic signal change color green red vice versa every change minute signal change time enter vertex time leave vertex signal green cannot wait vertex signal green second minimum value defined smallest value strictly larger minimum value example second minimum value 2^10 3^10 4 3^10 second minimum value 2^10 2^10 4 4 n^10 edge time change second minimum time take go vertex 1^10 vertex n^10 note go vertex number time including 1^10 n^10 assume journey start signal turned green
confirmation rate sql schematable signups column name type user_id int time_stamp datetime user_id primary key table row contains information signup time user id user_id table confirmation column name type user_id int time_stamp datetime action enum user_id time_stamp primary key table user_id foreign key reference signups table action enum type confirmed timeout row table indicates user id user_id requested confirmation message time_stamp confirmation message either confirmed confirmed expired without^10 confirming timeout confirmation rate user number confirmed message divided total number requested confirmation message confirmation rate user request confirmation message 0^10 round confirmation rate two decimal place write sql query find confirmation rate user result table order query result format following example
minimum number food bucket feed hamster 0^10 indexed string hamster hamster either h indicating hamster index indicating index empty add number food bucket empty index order feed hamster hamster fed least one food bucket left right formally hamster index fed place food bucket index 1^10 index 1^10 minimum number food bucket place empty index feed hamster 1^10 impossible feed
find longest valid obstacle course position want build obstacle course 0^10 indexed integer array obstacle length n^10 obstacle describes height ith obstacle every index 0^10 n^10 1^10 inclusive find length longest obstacle course obstacle choose number obstacle 0^10 inclusive must include ith obstacle course must put chosen obstacle order appear obstacle every obstacle except first taller height obstacle immediately array an^10 length n^10 an^10 length longest obstacle course index described
minimum difficulty job schedule want schedule list job day job dependent e work ith job finish job j 0^10 j finish least one task every day difficulty job schedule sum difficulty day day difficulty day maximum difficulty job done day integer array jobdifficulty integer difficulty ith job jobdifficulty minimum difficulty job schedule cannot find schedule job 1^10
bitwise xor pairing two 0^10 indexed array nums1 nums2 consisting non negative integer exists another array nums3 contains bitwise xor pairing integer nums1 nums2 every integer nums1 paired every integer nums2 exactly bitwise xor integer nums3
maximum number non overlapping palindrome substring string positive integer k^10 select set non overlapping substring string satisfy following condition length substring least k^10 substring palindrome maximum number substring optimal selection substring contiguous sequence character within string
flower planting adjacent n^10 garden labeled 1^10 n^10 array path path xi yi describes bidirectional path garden xi garden yi garden want plant one 4 type flower garden 3^10 path coming leaving task choose flower type garden two garden connected path different type flower choice array answer answer type flower planted 1^10 th garden flower type denoted 1^10 2^10 3^10 4 guaranteed answer exists
merge sorted array two integer array nums1 nums2 sorted non decreasing order two integer n^10 representing number element nums1 nums2 respectively merge nums1 nums2 single array sorted non decreasing order final sorted array returned function instead stored inside array nums1 accommodate nums1 length n^10 first element denote element merged last n^10 element set 0^10 ignored nums2 length n^10
exam room exam room n^10 seat single row labeled 0^10 n^10 1^10 student enters room must sit seat maximizes distance closest person multiple seat sit seat lowest number one room student sits seat number 0^10 design class simulates mentioned exam room implement examroom class examroom int n^10 initializes object exam room number seat n^10 int seat return label seat next student set void leave int p indicates student sitting seat p leave room guaranteed student sitting seat p
find middle index array 0^10 indexed integer array nums find leftmost middleindex e smallest amongst possible one middleindex index nums 0^10 nums 1^10 nums middleindex 1^10 nums middleindex 1^10 nums middleindex 2^10 nums nums length 1^10 middleindex 0^10 left side sum considered 0^10 similarly middleindex nums length 1^10 right side sum considered 0^10 leftmost middleindex satisfies condition 1^10 index
longest palindrome string consists lowercase uppercase letter length longest palindrome built letter letter case sensitive example aa considered palindrome
convert array 2d array condition integer array nums need create 2d array nums satisfying following condition 2d array contain element array nums row 2d array contains distinct integer number row 2d array minimal resulting array multiple answer note 2d array different number element row
binary tree path root binary tree root leaf path order leaf node child
sender largest word count chat log n^10 message two string array message sender message message sent sender message list word separated single space leading trailing space word count sender total number word sent sender note sender may send one message sender largest word count one sender largest word count one lexicographically largest name note uppercase letter come lowercase letter lexicographical order alice alice distinct
remove occurrence substring two string part perform following operation occurrence substring part removed find leftmost occurrence substring part remove removing occurrence part substring contiguous sequence character string
bus route array route representing bus route route bus route ith bus repeat forever example route 0^10 1^10 5^10 7^10 mean 0th bus travel sequence 1^10 5^10 7^10 1^10 5^10 7^10 1^10 forever start bus stop source bus initially want go bus stop target travel bus stop bus least number bus must take travel source target 1^10 possible
x kind deck card integer array deck deck represents number written ith card partition card one group group exactly x card x 1^10 andall card one group integer written true partition possible false otherwise
longest arithmetic subsequence array nums integer length longest arithmetic subsequence nums note subsequence array derived another array deleting element without^10 changing order remaining element sequence seq arithmetic seq 1^10 seq value 0^10 seq length 1^10
construct smallest number di string 0^10 indexed string pattern length n^10 consisting character meaning increasing meaning decreasing 0^10 indexed string num length n^10 1^10 created using^10 following condition num consists digit 1^10 9 digit used pattern num num 1^10 pattern num num 1^10 lexicographically smallest possible string num meet condition
two furthest house different color n^10 house evenly lined street house beautifully painted 0^10 indexed integer array color length n^10 color represents color ith house maximum distance two house different color distance ith jth house ab j ab x absolute value x
merge node zero head linked list contains series integer separated 0^10 beginning end linked list node val 0^10 every two consecutive 0^10 merge node lying single node whose value sum merged node modified list contain 0^10 head modified linked list
largest number least twice others integer array nums largest integer unique determine whether largest element array least twice much every number array index largest element 1^10 otherwise
chalkboard xor game array integer nums represents number written chalkboard alice bob take turn erasing exactly one number chalkboard alice starting first erasing number cause bitwise xor element chalkboard become 0^10 player loses bitwise xor one element element bitwise xor element 0^10 also player start turn bitwise xor element chalkboard equal 0^10 player win true alice win game assuming player play optimally
detect pattern length repeated k^10 time array positive integer arr find pattern length repeated k^10 time pattern subarray consecutive sub sequence consists one value repeated multiple time consecutively without^10 overlapping pattern defined length number repetition true exists pattern length repeated k^10 time otherwise false
count array pair divisible k^10 0^10 indexed integer array nums length n^10 integer k^10 number pair j 0^10 j n^10 1^10 andnums nums j divisible k^10
kth^10 smallest number multiplication table nearly everyone used multiplication table multiplication table size x n^10 integer matrix mat mat j j 1^10 indexed three integer n^10 k^10 kth^10 smallest element x n^10 multiplication table
count day spent together alice bob traveling rome separate business meeting 4 string arrivealice leavealice arrivebob leavebob alice city date arrivealice leavealice inclusive bob city date arrivebob leavebob inclusive 5^10 character string format mm dd corresponding month day date total number day alice bob rome together assume date occur calendar year leap year note number day per^10 month represented 31 28 31 30^10 31 30^10 31 31 30^10 31 30^10 31
24^10 game integer array card length 4 four card containing number range 1^10 9 arrange number card mathematical expression using^10 operator parenthesis get value 24^10 restricted following rule division operator represents real division integer division example 4 1^10 2^10 3^10 4 1^10 3^10 12 every operation done two number particular cannot use unary operator example card 1^10 1^10 1^10 1^10 expression 1^10 1^10 1^10 1^10 allowed^10 cannot concatenate number togetherfor example card 1^10 2^10 1^10 2^10 expression 12 12 valid true get expression evaluates 24^10 false otherwise
angle hand clock two number hour minute smaller angle degree formed hour minute hand answer within 10^10 5^10 actual value accepted correct
count salary category sql schematable account column name type account_id int income int account_id primary key table row contains information monthly income one bank account write sql query report number bank account salary category salary category low salary salary strictly le 20000 average salary salary inclusive range 20000 50000 high salary salary strictly greater 50000 result table must contain three category account category report 0^10 result table order query result format following example
longest binary subsequence le equal k^10 binary string positive integer k^10 length longest subsequence make binary number le equal k^10 note subsequence contain leading zero empty string considered equal 0^10 subsequence string derived another string deleting character without^10 changing order remaining character
last stone weight array integer stone stone weight ith stone playing game stone turn choose heaviest two stone smash together suppose heaviest two stone weight x x result smash x stone destroyed andif x stone weight x destroyed stone weight new weight x end game one stone left weight last remaining stone stone left 0^10
stone game ix alice bob continue game stone row n^10 stone stone associated value integer array stone stone value ith stone alice bob take turn alice starting first turn player may remove stone stone player remove stone loses sum value removed stone divisible 3^10 bob win automatically remaining stone even alice turn assuming player play optimally true alice win false bob win
check word placed crossword x n^10 matrix board representing current state crossword puzzle crossword contains lowercase english letter solved word represent empty cell represent blocked cell word placed horizontally left right right left vertically top bottom bottom top board occupy cell containing character cell letter placed must either empty match letter already board must empty cell lowercase letter directly left right word word placed horizontally must empty cell lowercase letter directly word word placed vertically string word true word placed board false otherwise
find k^10 distant index array 0^10 indexed integer array nums two integer key k^10 k^10 distant index index nums exists least one index j j k^10 nums j key list k^10 distant index sorted increasing order
swap salary sql schematable salary column name type id int name varchar sex enum salary int id primary key table sex column enum value type f table contains information employee write sql query swap f value e change f value vice versa single update statement intermediate temporary table note must write single update statement write select statement problem query result format following example
number smallest unoccupied chair party n^10 friend numbered 0^10 n^10 1^10 attending infinite number chair party numbered 0^10 infinity friend arrives party sit unoccupied chair smallest number example chair 0^10 1^10 5^10 occupied friend come sit chair number 2^10 friend leaf party chair becomes unoccupied moment leave another friend arrives moment sit chair 0^10 indexed 2d integer array time time arrivali leavingi indicating arrival leaving time ith friend respectively integer targetfriend arrival time distinct chair number friend numbered targetfriend sit
diagonal traverse x n^10 matrix mat array element array diagonal order
match substring replacement two string sub also 2d character array mapping mapping oldi newi indicates may perform following operation number time replace character oldi sub newi character sub cannot replaced true possible make sub substring replacing zero character according mapping otherwise false substring contiguous non empty sequence character within string
image smoother image smoother filter size 3^10 x 3^10 applied cell image rounding average cell eight surrounding cell e average nine cell blue smoother one surrounding cell cell present consider average e average four cell red smoother x n^10 integer matrix img representing grayscale image image applying smoother cell
evaluate reverse polish notation array string token represents arithmetic expression reverse polish notation evaluate expression integer represents value expression note valid operator operand may integer another expression division two integer always truncates toward zero division zero input represents valid arithmetic expression reverse polish notation answer intermediate calculation represented 32 bit integer
jump game ii 0^10 indexed array integer nums length n^10 initially positioned nums 0^10 element nums represents maximum length forward jump index word nums jump nums j 0^10 j nums andi j nreturn minimum number jump reach nums n^10 1^10 test case generated reach nums n^10 1^10
maximum student taking exam n^10 matrix seat represent seat distribution classroom seat broken denoted character otherwise denoted character student see answer sitting next left right upper left upper right cannot see answer student sitting directly front behind maximum number student take exam together without^10 cheating possible student must placed seat good condition
maximum length concatenated string unique character array string arr string formed concatenation subsequence arr unique character maximum possible length subsequence array derived another array deleting element without^10 changing order remaining element
article view sql schematable view column name type article_id int author_id int viewer_id int view_date date primary key table may duplicate row row table indicates viewer viewed article written author date note equal author_id viewer_id indicate person write sql query find author viewed least one article result table sorted id ascending order query result format following example
scramble string scramble string get string using^10 following algorithm length string 1^10 stop length string 1^10 following split string two non empty substring random index e string divide x x randomly decide swap two substring keep order e step may become x x apply step 1^10 recursively two substring x two string s1 s2 length true s2 scrambled string s1 otherwise false
domino tromino tiling two type tile 2^10 x 1^10 domino shape tromino shape may rotate shape integer n^10 number way tile 2^10 x n^10 board answer may large modulo 109 7^10 tiling every square must covered tile two tiling different two 4 directionally adjacent cell board exactly one tiling square occupied tile
permutation sequence set 1^10 2^10 3^10 n^10 contains total n^10 unique permutation listing labeling permutation order get following sequence n^10 3^10 123 132^10 213 231 312 321 n^10 k^10 kth^10 permutation sequence
minimum insertion balance parenthesis string parenthesis string containing character parenthesis string balanced left parenthesis must corresponding two consecutive right parenthesis left parenthesis must go corresponding two consecutive right parenthesis word treat opening parenthesis closing parenthesis example balanced balanced insert character position string balance needed minimum number insertion needed make balanced
immediate food delivery ii sql schematable delivery column name type delivery_id int customer_id int order_date date customer_pref_delivery_date date delivery_id primary key table table hold information food delivery customer make order date specify preferred delivery date order date customer preferred delivery date order date order called immediate otherwise called scheduled first order customer order earliest order date customer made guaranteed customer precisely one first order write sql query find percentage immediate order first order customer rounded 2^10 decimal place query result format following example
count sub island two x n^10 binary matrix grid1 grid2 containing 0^10 representing water 1^10 representing land island group 1^10 connected 4 directionally horizontal vertical cell outside grid considered water cell island grid2 considered sub island island grid1 contains cell make island grid2 number island grid2 considered sub island
powerful integer three integer x bound list powerful integer value le equal bound integer powerful represented xi yj integer 0^10 j 0^10 may answer order answer value occur
number distinct average 0^10 indexed integer array nums even length long nums empty must repetitively find minimum number nums remove find maximum number nums remove calculate average two removed number average two number b^10 b^10 2^10 example average 2^10 3^10 2^10 3^10 2^10 2^10 5^10 number distinct average calculated using^10 process note tie minimum maximum number removed
sort item group respecting dependency n^10 item belonging zero one group group group th item belongs equal 1^10 th item belongs group item group zero indexed group item belonging sorted list item item belong group next sorted list relation item beforeitems list containing item come th item sorted array left th item solution one solution empty list solution
roman integer roman numeral represented seven different symbol v x l c^10 symbol valuei 1v 5x 10l 50c 100d 500m 1000for example 2^10 written ii roman numeral two one added together 12 written xii simply x ii number 27 written xxvii xx v ii roman numeral usually written largest smallest left right however numeral four iiii instead number four written iv one five subtract making four principle applies number nine written ix six instance subtraction used placed v 5^10 x 10^10 make 4 9 x placed l 50 c^10 100 make 40 90 c^10 placed 500 1000 make 400 900 roman numeral convert integer
student attendance record ii attendance record student represented string character signifies whether student absent late present day record contains following three character absent l late p present student eligible attendance award following criterion student absent strictly fewer 2^10 day total student never late l 3^10 consecutive day integer n^10 number possible attendance record length n^10 make student eligible attendance award answer may large modulo 109 7^10
maximum gap integer array nums maximum difference two successive element sorted form array contains le two element 0^10 must write algorithm run linear time us linear extra space
least operator express number single positive integer x write expression form x op1 x op2 x op3 x operator op1 op2 etc either addition subtraction multiplication division example x 3^10 might write 3^10 3^10 3^10 3^10 3^10 value 3^10 writing expression adhere following convention division operator return rational number parenthesis placed anywhere use usual order operation multiplication division happen addition subtraction allowed^10 use unary negation operator example x x valid expression us subtraction x x us negation would like write expression least number operator expression equal target least number operator used
partition equal subset sum integer array nums true partition array two subset sum element subset equal false otherwise
user activity past 30^10 day sql schematable activity column name type user_id int session_id int activity_date date activity_type enum primary key table may duplicate row activity_type column enum type open_session end_session scroll_down send_message table show user activity social medium website note session belongs exactly one user write sql query find daily active user count period 30^10 day ending 2019 07 27 inclusively user active someday made least one activity day result table order query result format following example
max difference get changing integer integer num apply following step exactly two time pick digit x 0^10 x 9 pick another digit 0^10 9 digit equal x replace occurrence x decimal representation num new integer cannot leading zero also new integer cannot 0^10 let b^10 result applying operation num first second time respectively max difference b^10
add two number two non empty linked list representing two non negative integer digit stored reverse order node contains single digit add two number sum linked list may assume two number contain leading zero except number 0^10
longest word dictionary deleting string string array dictionary longest string dictionary formed deleting string character one possible result longest word smallest lexicographical order possible result empty string
minimum move reach target score playing game integer start integer 1^10 want reach integer target one move either increment current integer one e x x 1^10 double current integer e x 2^10 x use increment operation number time however use double operation maxdoubles time two integer target maxdoubles minimum number move needed reach target starting 1^10
find duplicate array integer array nums length n^10 integer nums range 1^10 n^10 integer appears twice array integer appears twice must write algorithm run n^10 time us constant extra space
maximum strength group 0^10 indexed integer array nums representing score student exam teacher would like form one non empty group student maximal strength strength group student index i0 i1 i2 ik defined nums i0 nums i1 nums i2 nums ik maximum strength group teacher create
number operation make network connected n^10 computer numbered 0^10 n^10 1^10 connected ethernet cable connection forming network connection ai bi represents connection computer ai bi computer reach computer directly indirectly network initial computer network connection extract certain cable two directly connected computer place pair disconnected computer make directly connected minimum number time need order make computer connected possible 1^10
sentence similarity iii sentence list word separated single space leading trailing space example hello world hello hello world hello world sentence word consist uppercase lowercase english letter two sentence sentence1 sentence2 similar possible insert arbitrary sentence possibly empty inside one sentence two sentence become equal example sentence1 hello name jane sentence2 hello jane made equal inserting name hello jane sentence2 two sentence sentence1 sentence2 true sentence1 sentence2 similar otherwise false
brick falling hit x n^10 binary grid 1^10 represents brick 0^10 represents empty space brick stable directly connected top grid orat least one brick four adjacent cell stable also array hit sequence erasure want apply time want erase brick location hit rowi coli brick location exists disappear brick may longer stable erasure fall brick fall immediately erased grid e land stable brick array result result number brick fall ith erasure applied note erasure may refer location brick brick drop
leaf similar tree consider leaf binary tree left right order value leaf form leaf value sequence example tree leaf value sequence 6 7^10 4 9 8 two binary tree considered leaf similar leaf value sequence true two tree head node root1 root2 leaf similar
search rotated sorted array integer array nums sorted ascending order distinct value prior passed function nums possibly rotated unknown pivot index k^10 1^10 k^10 nums length resulting array nums k^10 nums k^10 1^10 nums n^10 1^10 nums 0^10 nums 1^10 nums k^10 1^10 0^10 indexed example 0^10 1^10 2^10 4 5^10 6 7^10 might rotated pivot index 3^10 become 4 5^10 6 7^10 0^10 1^10 2^10 array nums possible rotation integer target index target nums 1^10 nums must write algorithm log n^10 runtime complexity
minimum deletion make array divisible two positive integer array nums numsdivide delete number element nums minimum number deletion smallest element nums divide element numsdivide possible 1^10 note integer x divide x 0^10
critical connection network n^10 server numbered 0^10 n^10 1^10 connected undirected server server connection forming network connection ai bi represents connection server ai bi server reach server directly indirectly network critical connection connection removed make server unable reach server critical connection network order
last moment ant fall plank wooden plank length n^10 unit ant walking plank ant move speed 1^10 unit per^10 second ant move left move right two ant moving two different direction point change direction continue moving assume changing direction take additional time ant reach one end plank time fall plank immediately integer n^10 two integer array left right position ant moving left right moment last ant fall plank
apply bitwise operation make string equal two 0^10 indexed binary string target length n^10 following operation number time choose two different index j 0^10 j n^10 simultaneously replace j j xor j example 0110 choose 0^10 j 2^10 simultaneously replace 0^10 0^10 2^10 0^10 1^10 1^10 2^10 0^10 xor 2^10 0^10 xor 1^10 1^10 1110 true make string equal target false otherwise
path sum root binary tree integer targetsum true tree root leaf path adding value along path equal targetsum leaf node child
relative rank integer array score size n^10 score score ith athlete competition score guaranteed unique athlete placed based score 1st place athlete highest score 2nd place athlete 2nd highest score placement athlete determines rank 1st place athlete rank gold medal 2nd place athlete rank silver medal 3rd place athlete rank bronze medal 4th place nth place athlete rank placement number e xth place athlete rank x array answer size n^10 answer rank ith athlete
fancy sequence write api generates fancy sequence using^10 append addall multall operation implement fancy class fancy initializes object empty sequence void append val appends integer val end sequence void addall inc increment existing value sequence integer inc void multall multiplies existing value sequence integer int getindex idx get current value index idx 0^10 indexed sequence modulo 109 7^10 index greater equal length sequence 1^10
minimum bit flip convert number bit flip number x choosing bit binary representation x flipping either 0^10 1^10 1^10 0^10 example x 7^10 binary representation 111 may choose bit including leading zero shown flip flip first bit right get 110 flip second bit right get 101 flip fifth bit right leading zero get 10111 etc two integer start goal minimum number bit flip convert start goal
maximum white tile covered carpet 2d integer array tile tile li ri represents every tile j range li j ri colored white also integer carpetlen length single carpet placed anywhere maximum number white tile covered carpet
single threaded cpu n^10 task labeled 0^10 n^10 1^10 represented 2d integer array task task enqueuetimei processingtimei mean ith task available process enqueuetimei take processingtimei finish processing single threaded cpu process one task time act following way cpu idle available task process cpu remains idle cpu idle available task cpu choose one shortest processing time multiple task shortest processing time choose task smallest index task started cpu process entire task without^10 stopping cpu finish task start new one instantly order cpu process task
best time buy sell stock iii array price price price stock ith day find maximum profit achieve may complete two transaction note may engage multiple transaction simultaneously e must sell stock buy
check string contains binary code size k^10 binary string integer k^10 true every binary code length k^10 substring otherwise false
bag token initial power power initial score 0^10 bag token token value ith token 0^10 indexed goal maximize total score potentially playing token one two way current power least token may play ith token face losing token power gaining 1^10 score current score least 1^10 may play ith token face gaining token power losing 1^10 score token may played order play token largest possible score achieve playing number token
ipo suppose leetcode start ipo soon order sell good price share venture capital leetcode would like work project increase capital ipo limited resource finish k^10 distinct project ipo help leetcode design best way maximize total capital finishing k^10 distinct project n^10 project ith project pure profit profit minimum capital capital needed start initially w capital finish project obtain pure profit profit added total capital pick list k^10 distinct project project maximize final capital final maximized capital answer guaranteed fit 32 bit signed integer
valid arrangement pair 0^10 indexed 2d integer array pair pair starti endi arrangement pair valid every index 1^10 pair length endi 1^10 starti valid arrangement pair note input generated exists valid arrangement pair
check string break another string two string s1 s2 size check permutation string s1 break permutation string s2 vice versa word s2 break s1 vice versa string x break string size n^10 x alphabetical order 0^10 n^10 1^10
customer never order sql schematable customer column name type id int name varchar id primary key column table row table indicates id name customer table order column name type id int customerid int id primary key column table customerid foreign key id customer table row table indicates id order id customer ordered write sql query report customer never order anything result table order query result format following example
longest happy string string called happy satisfies following condition contains letter b^10 c^10 contain aaa bbb ccc substring contains occurrence letter contains b^10 occurrence letter b^10 contains c^10 occurrence letter c^10 three integer b^10 c^10 longest possible happy string multiple longest happy string string empty string substring contiguous sequence character within string
maximum depth n^10 ary tree n^10 ary tree find maximum depth maximum depth number node along longest path root node farthest leaf node nary tree input serialization represented level order traversal group child separated null value see example
print foobar alternately suppose following code class foobar public void foo int 0^10 n^10 print foo public void bar int 0^10 n^10 print bar instance foobar passed two different thread thread call foo whilethread b^10 call bar modify program output foobar n^10 time
disconnect path binary matrix one flip 0^10 indexed x n^10 binary matrix grid move cell row col cell row 1^10 col row col 1^10 value 1^10 matrix disconnected path 0^10 0^10 1^10 n^10 1^10 flip value one possibly none cell cannot flip cell 0^10 0^10 1^10 n^10 1^10 true possible make matrix disconnect false otherwise note flipping cell change value 0^10 1^10 1^10 0^10
maximum bag full capacity rock n^10 bag numbered 0^10 n^10 1^10 two 0^10 indexed integer array capacity rock ith bag hold maximum capacity rock currently contains rock rock also integer additionalrocks number additional rock place bag maximum number bag could full capacity placing additional rock bag
valid square coordinate four point 2d space p1 p2 p3 p4 true four point construct square coordinate point pi represented xi yi input order valid square four equal side positive length four equal angle 90 degree angle
subtree another tree root two binary tree root subroot true subtree root structure node value subroot false otherwise subtree binary tree tree tree consists node tree node descendant tree tree could also considered subtree
design text editor design text editor cursor following add text cursor delete text cursor simulating backspace key move cursor either left right deleting text character left cursor deleted cursor also remain within actual text cannot moved beyond formally 0^10 cursor position currenttext length always hold implement texteditor class texteditor initializes object empty text void addtext string text appends text cursor cursor end right text int deletetext int k^10 deletes k^10 character left cursor return number character actually deleted string cursorleft int k^10 move cursor left k^10 time return last min 10^10 len character left cursor len number character left cursor string cursorright int k^10 move cursor right k^10 time return last min 10^10 len character left cursor len number character left cursor
reverse linked list ii head singly linked list two integer left right left right reverse node list position left position right reversed list
merge bsts create single bst n^10 bst binary search tree root node n^10 separate bsts stored array tree 0^10 indexed bst tree 3^10 node two root value one operation select two distinct index j value stored one leaf tree equal root value tree j replace leaf node tree tree j remove tree j tree root resulting bst possible form valid bst performing n^10 1^10 operation null impossible create valid bst bst binary search tree binary tree node satisfies following property every node node left subtree value strictly le node value every node node right subtree value strictly greater node value leaf node child
count number consistent string string allowed^10 consisting distinct character array string word string consistent character string appear string allowed^10 number consistent string array word
custom sort string two string order character order unique sorted custom order previously permute character match order order sorted specifically character x occurs character order x occur permuted string permutation satisfies property
make arithmetic progression sequence sequence number called arithmetic progression difference two consecutive element array number arr true array rearranged form arithmetic progression otherwise false
ambiguous coordinate 2^10 dimensional coordinate like 1^10 3^10 2^10 0^10 5^10 removed comma decimal point space ended string example 1^10 3^10 becomes 13 2^10 0^10 5^10 becomes 205 list string representing possibility original coordinate could original representation never extraneous zero never started number like 00 0^10 0^10 0^10 00 1^10 0^10 001 00 01^10 number represented fewer digit also decimal point within number never occurs without^10 least one digit occurring never started number like 1^10 final answer list returned order coordinate final answer exactly one space occurring comma
second largest digit string alphanumeric string second largest numerical digit appears 1^10 exist alphanumeric string string consisting lowercase english letter digit
rabbit forest forest unknown number rabbit asked n^10 rabbit many rabbit color collected answer integer array answer answer answer ith rabbit array answer minimum number rabbit could forest
long pressed name friend typing name keyboard sometimes typing character c^10 key might get long pressed character typed 1^10 time examine typed character keyboard true possible friend name character possibly none long pressed
tree root two binary tree p q write function check two binary tree considered structurally identical node value
largest combination bitwise greater zero bitwise array nums bitwise integer nums example nums 1^10 5^10 3^10 bitwise equal 1^10 5^10 3^10 1^10 also nums 7^10 bitwise 7^10 array positive integer candidate evaluate bitwise every combination number candidate number candidate may used combination size largest combination candidate bitwise greater 0^10
tenth line text file file txt print 10th line file
minimum sum squared difference two positive 0^10 indexed integer array nums1 nums2 length n^10 sum squared difference array nums1 nums2 defined sum nums1 nums2 2^10 0^10 n^10 also two positive integer k1 k2 modify element nums1 1^10 1^10 k1 time similarly modify element nums2 1^10 1^10 k2 time minimum sum squared difference modifying array nums1 k1 time modifying array nums2 k2 time note allowed^10 modify array element become negative integer
maximum number way partition array 0^10 indexed integer array nums length n^10 number way partition nums number pivot index satisfy condition 1^10 pivot nnums 0^10 nums 1^10 nums pivot 1^10 nums pivot nums pivot 1^10 nums n^10 1^10 also integer k^10 choose change value one element nums k^10 leave array unchanged maximum possible number way partition nums satisfy condition changing one element
construct target array multiple sum array target n^10 integer starting array arr consisting n^10 1^10 may perform following procedure let x sum element currently array choose index 0^10 n^10 set value arr index x may repeat procedure many time needed true possible construct target array arr otherwise false
shortest path grid obstacle elimination x n^10 integer matrix grid cell either 0^10 empty 1^10 obstacle move left right empty cell one step minimum number step walk upper left corner 0^10 0^10 lower right corner 1^10 n^10 1^10 eliminate k^10 obstacle possible find walk 1^10
latest time replacing hidden digit string time form hh mm digit string hidden represented valid time inclusively 00 00 23 59 latest valid time get time replacing hidden digit
k^10 th lexicographical string happy string length n^10 happy string string consists letter set b^10 c^10 1^10 value 1^10 length 1^10 string 1^10 indexed example string abc ac b^10 abcbabcbcb happy string string aa baa ababbc happy string two integer n^10 k^10 consider list happy string length n^10 sorted lexicographical order kth^10 string list empty string le k^10 happy string length n^10
count square submatrices one n^10 matrix one zero many square submatrices one
minimum space wasted packaging n^10 package trying place box one package box supplier produce box different size infinite supply package placed box size package le equal size box package size integer array package package size ith package supplier 2d integer array box box j array box size jth supplier produce want choose single supplier use box total wasted space minimized package box define space wasted size box size package total wasted space sum space wasted box example fit package size 2^10 3^10 5^10 supplier offer box size 4 8 fit package size 2^10 size 3^10 two box size 4 package size 5^10 box size 8 would result waste 4 2^10 4 3^10 8 5^10 6 minimum total wasted space choosing box supplier optimally 1^10 impossible fit package inside box answer may large modulo 109 7^10
two sum ii input array sorted 1^10 indexed array integer number already sorted non decreasing order find two number add specific target number let two number number index1 number index2 1^10 index1 index2 number length index two number index1 index2 added one integer array index1 index2 length 2^10 test generated exactly one solution may use element twice solution must use constant extra space
max area island x n^10 binary matrix grid island group 1^10 representing land connected 4 directionally horizontal vertical may assume four edge grid surrounded water area island number cell value 1^10 island maximum area island grid island 0^10
minimum flip make b^10 equal c^10 3^10 positive number b^10 c^10 minimum flip required bit b^10 make b^10 c^10 bitwise operation flip operation consists change single bit 1^10 0^10 change bit 0^10 1^10 binary representation
parse lisp expression string expression representing lisp like expression integer value syntax expression follows expression either integer let expression add expression mult expression assigned variable expression always evaluate single integer integer could positive negative let expression take form let v1 e1 v2 e2 vn en expr let always string let one pair alternating variable expression meaning first variable v1 assigned value expression e1 second variable v2 assigned value expression e2 sequentially value let expression value expression expr add expression take form add e1 e2 add always string add always two expression e1 e2 result addition evaluation e1 evaluation e2 mult expression take form mult e1 e2 mult always string mult always two expression e1 e2 result multiplication evaluation e1 evaluation e2 question use smaller subset variable name variable start lowercase letter zero lowercase letter digit additionally convenience name add let mult protected never used variable name finally concept scope expression variable name evaluated within context evaluation innermost scope term parenthesis checked first value variable outer scope checked sequentially guaranteed every expression legal please see example detail scope
contains duplicate integer array nums true value appears least twice array false every element distinct
number way wear different hat n^10 people 40 type hat labeled 1^10 40 2d integer array hat hat list hat preferred ith person number way n^10 people wear different hat answer may large modulo 109 7^10
split string max number unique substring string maximum number unique substring string split split string list non empty substring concatenation substring form original string however must split substring unique substring contiguous sequence character within string
smallest string numeric value numeric value lowercase character defined position 1^10 indexed alphabet numeric value 1^10 numeric value b^10 2^10 numeric value c^10 3^10 numeric value string consisting lowercase character defined sum character numeric value example numeric value string abe equal 1^10 2^10 5^10 8 two integer n^10 k^10 lexicographically smallest string length equal n^10 numeric value equal k^10 note string x lexicographically smaller string x come dictionary order either x prefix first position x x come alphabetic order
find minimum rotated sorted array ii suppose array length n^10 sorted ascending order rotated 1^10 n^10 time example array nums 0^10 1^10 4 4 5^10 6 7^10 might become 4 5^10 6 7^10 0^10 1^10 4 rotated 4 time 0^10 1^10 4 4 5^10 6 7^10 rotated 7^10 time notice rotating array 0^10 1^10 2^10 n^10 1^10 1^10 time result array n^10 1^10 0^10 1^10 2^10 n^10 2^10 sorted rotated array nums may contain duplicate minimum element array must decrease overall operation step much possible
count way build room ant colony ant tasked adding n^10 new room numbered 0^10 n^10 1^10 colony expansion plan 0^10 indexed integer array length n^10 prevroom prevroom indicates must build room prevroom building room two room must connected directly room 0^10 already built prevroom 0^10 1^10 expansion plan room built every room reachable room 0^10 build one room time travel freely room already built connected choose build room long previous room already built number different order build room answer may large modulo 109 7^10
create maximum number two integer array nums1 nums2 length n^10 respectively nums1 nums2 represent digit two number also integer k^10 create maximum number length k^10 n^10 digit two number relative order digit array must preserved array k^10 digit representing answer
apply discount every n^10 order supermarket frequented many customer product sold supermarket represented two parallel integer array product price ith product id product price price customer paying bill represented two parallel integer array product amount jth product purchased id product j amount j much product bought subtotal calculated sum amount j price jth product supermarket decided sale every nth customer paying grocery percentage discount discount amount discount discount percent subtotal formally subtotal bill would actually pay bill 100 discount 100 implement cashier class cashier int n^10 int discount int product int price initializes object n^10 discount product price double getbill int product int amount return final total bill discount applied answer within 10^10 5^10 actual value accepted
linked list binary tree binary tree root linked list head first node true element linked list starting head correspond downward path connected binary tree otherwise false context downward path mean path start node go downwards
push domino n^10 domino line place domino vertically upright beginning simultaneously push domino either left right second domino falling left push adjacent domino left similarly domino falling right push adjacent domino standing right vertical domino domino falling side stay still due balance force purpose question consider falling domino expends additional force falling already fallen domino string domino representing initial state domino l ith domino pushed left domino ith domino pushed right anddominoes ith domino pushed string representing final state
count number possible root node alice undirected tree n^10 node labeled 0^10 n^10 1^10 tree represented 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree alice want bob find root tree allows bob make several guess tree one guess following chooses two distinct integer u v exists edge u v tree tell alice u parent v tree bob guess represented 2d integer array guess guess j uj vj indicates bob guessed uj parent vj alice lazy reply bob guess say least k^10 guess true 2d integer array edge guess integer k^10 number possible node root alice tree tree 0^10
maximum difference node ancestor root binary tree find maximum value v exist different node b^10 v val b^10 val ancestor b^10 node ancestor b^10 either child equal b^10 child ancestor b^10
add two number ii two non empty linked list representing two non negative integer significant digit come first node contains single digit add two number sum linked list may assume two number contain leading zero except number 0^10
jump game iii array non negative integer arr initially positioned start index array index jump arr arr check reach index value 0^10 notice jump outside array time
sum game alice bob take turn playing game alice starting first string num even length consisting digit character turn player following still least one num choose index num replace num digit 0^10 9 game end character num bob win sum digit first half num must equal sum digit second half alice win sum must equal example game ended num 243801 bob win 2^10 4 3^10 8 0^10 1^10 game ended num 243803 alice win 2^10 4 3^10 8 0^10 3^10 assuming alice bob play optimally true alice win false bob win
sum k^10 mirror number k^10 mirror number positive integer without^10 leading zero read forward backward base 10^10 base k^10 example 9 2^10 mirror number representation 9 base 10^10 base 2^10 9 1001 respectively read forward backward contrary 4 2^10 mirror number representation 4 base 2^10 100 read forward backward base k^10 number n^10 sum n^10 smallest k^10 mirror number
sort array increasing frequency array integer nums sort array increasing order based frequency value multiple value frequency sort decreasing order sorted array
strange printer strange printer following two special property printer print sequence character time turn printer print new character starting ending place cover original existing character string minimum number turn printer needed print
create target array order two array integer nums index task create target array following rule initially target array empty left right read nums index insert index index value nums target array repeat previous step element read nums index target array guaranteed insertion operation valid
k^10 similar string string s1 s2 k^10 similar non negative integer k^10 swap position two letter s1 exactly k^10 time resulting string equal s2 two anagram s1 s2 smallest k^10 s1 s2 k^10 similar
next permutation permutation array integer arrangement member sequence linear order example arr 1^10 2^10 3^10 following permutation arr 1^10 2^10 3^10 1^10 3^10 2^10 2^10 1^10 3^10 2^10 3^10 1^10 3^10 1^10 2^10 3^10 2^10 1^10 next permutation array integer next lexicographically greater permutation integer formally permutation array sorted one container according lexicographical order next permutation array permutation follows sorted container arrangement possible array must rearranged lowest possible order e sorted ascending order example next permutation arr 1^10 2^10 3^10 1^10 3^10 2^10 similarly next permutation arr 2^10 3^10 1^10 3^10 1^10 2^10 next permutation arr 3^10 2^10 1^10 1^10 2^10 3^10 3^10 2^10 1^10 lexicographical larger rearrangement array integer nums find next permutation nums replacement must place use constant extra memory
class 5^10 student sql schematable course column name type student varchar class varchar student class primary key column table row table indicates name student class enrolled write sql query report class least five student result table order query result format following example
count pair similar string 0^10 indexed string array word two string similar consist character example abca cba similar consist character b^10 c^10 however abacba bcfd similar consist character number pair j 0^10 j word length 1^10 two string word word j similar
minimum cut divide circle valid cut circle cut represented straight line touch two point edge circle pass center os cut represented straight line touch one point edge circle center valid invalid cut shown figure integer n^10 minimum number cut needed divide circle n^10 equal slice
convert temperature non negative floating point number rounded two decimal place celsius denotes temperature celsius convert celsius kelvin fahrenheit array an^10 kelvin fahrenheit array an^10 answer within 10^10 5^10 actual answer accepted note kelvin celsius 273 15fahrenheit celsius 1^10 80 32 00
serialize deserialize binary tree serialization process converting data structure object sequence bit stored file memory buffer transmitted across network connection link reconstructed later another computer environment design algorithm serialize deserialize binary tree restriction serialization deserialization algorithm work need ensure binary tree serialized string string deserialized original tree structure clarification input output format leetcode serializes binary tree necessarily need follow format please creative come different approach
two sum iv input bst root binary search tree integer k^10 true exist two element bst sum equal k^10 false otherwise
swapping node linked list head linked list integer k^10 head linked list swapping value kth^10 node beginning kth^10 node end list 1^10 indexed
shopping offer leetcode store n^10 item sell item price however special offer special offer consists one different kind item sale price integer array price price price ith item integer array need need number piece ith item want buy also array special special size n^10 1^10 special j number piece jth item ith offer special n^10 e last integer array price ith offer lowest price pay exactly certain item could make optimal use special offer allowed^10 buy item want even would lower overall price could use special offer many time want
average salary excluding minimum maximum salary array unique integer salary salary salary ith employee average salary employee excluding minimum maximum salary answer within 10^10 5^10 actual answer accepted
spiral matrix x n^10 matrix element matrix spiral order
house robber professional robber planning rob house along street house certain amount money stashed constraint stopping robbing adjacent house security system connected automatically contact police two adjacent house broken night integer array nums representing amount money house maximum amount money rob tonight without^10 alerting police
count palindromic subsequence string digit number palindromic subsequence length 5^10 answer may large modulo 109 7^10 note string palindromic read forward backward subsequence string derived another string deleting character without^10 changing order remaining character
super pow task calculate ab mod 1337 positive integer b^10 extremely large positive integer form array
shortest unsorted continuous subarray integer array nums need find one continuous subarray sort subarray non decreasing order whole array sorted non decreasing order shortest subarray output length
array partition integer array nums 2n integer group integer n^10 pair a1 b1 a2 b2 bn sum min ai bi maximized maximized sum
unique email address every valid email consists local name domain name separated sign besides lowercase letter email may contain one example alice leetcode com alice local name leetcode com domain name add period character local name part email address mail sent forwarded address without^10 dot local name note rule apply domain name example alice z leetcode com alicez leetcode com forward email address add plus local name everything first plus sign ignored allows certain email filtered note rule apply domain name example name email com forwarded email com possible use rule time array string email send one email email number different address actually receive mail
house robber iv several consecutive house along street money inside also robber want steal money home refuse steal adjacent home capability robber maximum amount money steal one house house robbed integer array nums representing much money stashed house formally ith house left nums dollar also integer k^10 representing minimum number house robber steal always possible steal least k^10 house minimum capability robber possible way steal least k^10 house
decrypt string alphabet integer mapping string formed digit want map english lowercase character follows character represented 1^10 9 respectively character j z represented 10^10 26 respectively string formed mapping test case generated unique mapping always exist
linked list cycle head head linked list determine linked list cycle cycle linked list node list reached continuously following next pointer internally po used denote index node tail next pointer connected note po passed parameter true cycle linked list otherwise false
skyline problem city skyline outer contour silhouette formed building city viewed distance location height building skyline formed building collectively geometric information building array building building lefti righti heighti lefti x coordinate left edge ith building righti x coordinate right edge ith building heighti height ith building may assume building perfect rectangle grounded absolutely flat surface height 0^10 skyline represented list key point sorted x coordinate form x1 y1 x2 y2 key point left endpoint horizontal segment skyline except last point list always coordinate 0^10 used mark skyline termination rightmost building end ground leftmost rightmost building part skyline contour note must consecutive horizontal line equal height output skyline instance 2^10 3^10 4 5^10 7^10 5^10 11 5^10 12 7^10 acceptable three line height 5^10 merged one final output 2^10 3^10 4 5^10 12 7^10
moving stone consecutive three stone different position x axis three integer b^10 c^10 position stone one move pick stone endpoint e either lowest highest position stone move unoccupied position endpoint formally let say stone currently position x z x z pick stone either position x position z move stone integer position k^10 x k^10 z k^10 game end cannot make move e stone three consecutive position integer array answer length 2^10 answer 0^10 minimum number move play andanswer 1^10 maximum number move play
shortest distance character string character c^10 occurs array integer answer answer length length answer distance index closest occurrence character c^10 distance two index j ab j ab absolute value function
range frequency query design data structure find frequency value subarray frequency value subarray number occurrence value subarray implement rangefreqquery class rangefreqquery int arr construct instance class 0^10 indexed integer array arr int query int left int right int value return frequency value subarray arr left right subarray contiguous sequence element within array arr left right denotes subarray contains element nums index left right inclusive
advantage shuffle two integer array nums1 nums2 length advantage nums1 respect nums2 number index nums1 nums2 permutation nums1 maximizes advantage respect nums2
maximum number move grid 0^10 indexed x n^10 matrix grid consisting positive integer start cell first column matrix traverse grid following way cell row col move cell row 1^10 col 1^10 row col 1^10 row 1^10 col 1^10 value cell move strictly bigger value current cell maximum number move perform
car fleet ii n^10 car traveling different speed direction along one lane road array car length n^10 car positioni speedi represents positioni distance ith car beginning road meter guaranteed positioni positioni 1^10 speedi initial speed ith car meter per^10 second simplicity car considered point moving along number line two car collide occupy position car collides another car unite form single car fleet car formed fleet position speed initial speed slowest car fleet array answer answer time second ith car collides next car 1^10 car collide next car answer within 10^10 5^10 actual answer accepted
maximum strictly increasing cell matrix 1^10 indexed x n^10 integer matrix mat select cell matrix starting cell starting cell move cell row column value destination cell strictly greater value current cell repeat process many time possible moving cell cell longer make move task find maximum number cell visit matrix starting cell integer denoting maximum number cell visited
add array form integer array form integer num array representing digit left right order example num 1321 array form 1^10 3^10 2^10 1^10 num array form integer integer k^10 array form integer num k^10
maximum candy get box n^10 box labeled 0^10 n^10 1^10 four array status candy key containedboxes status 1^10 ith box open 0^10 ith box closed candy number candy ith box key list label box open opening ith box containedboxes list box found inside ith box integer array initialboxes contains label box initially take candy open box use key open new box also use box find maximum number candy get following rule
uncommon word two sentence sentence string single space separated word word consists lowercase letter word uncommon appears exactly one sentence appear sentence two sentence s1 s2 list uncommon word may answer order
intersection multiple array 2d integer array nums nums non empty array distinct positive integer list integer present array nums sorted ascending order
binary tree right side view root binary tree imagine standing right side value node see ordered top bottom
find target index sorting array 0^10 indexed integer array nums target element target target index index nums target list target index nums sorting nums non decreasing order target index empty list returned list must sorted increasing order
count unreachable pair node undirected graph integer n^10 undirected graph n^10 node numbered 0^10 n^10 1^10 2d integer array edge edge ai bi denotes exists undirected edge connecting node ai bi number pair different node unreachable
nth highest salary sql schematable employee column name type id int salary int id primary key column table row table contains information salary employee write sql query report nth highest salary employee table nth highest salary query report null query result format following example
maximum count positive integer negative integer array nums sorted non decreasing order maximum number positive integer number negative integer word number positive integer nums po number negative integer neg maximum po neg note 0^10 neither positive negative
number wonderful substring wonderful string string one letter appears odd number time example ccjjc abab wonderful ab string word consists first ten lowercase english letter j number wonderful non empty substring word substring appears multiple time word count occurrence separately substring contiguous sequence character string
count sorted vowel string integer n^10 number string length n^10 consist vowel e u lexicographically sorted string lexicographically sorted valid come 1^10 alphabet
smallest string swap string array pair index string pair pair b^10 indicates 2^10 index 0^10 indexed string swap character pair index pair number time lexicographically smallest string changed using^10 swap
longest palindromic subsequence string find longest palindromic subsequence length subsequence sequence derived another sequence deleting element without^10 changing order remaining element
maximum consecutive floor without^10 special floor alice manages company rented floor building office space alice decided floor special floor used relaxation two integer bottom top denote alice rented floor bottom top inclusive also integer array special special denotes special floor alice designated relaxation maximum number consecutive floor without^10 special floor
count distinct number board positive integer n^10 initially placed board every day 109 day perform following procedure number x present board find number 1^10 n^10 x 1^10 place number board number distinct integer present board 109 day elapsed note number placed board remain end stand modulo operation example 14 3^10 2^10
kth^10 smallest instruction bob standing cell 0^10 0^10 want reach destination row column travel right going help bob providing instruction reach destination instruction represented string character either h meaning move horizontally go right v meaning move vertically go multiple instruction lead bob destination example destination 2^10 3^10 hhhvv hvhvh valid instruction however bob picky bob lucky number k^10 want kth^10 lexicographically smallest instruction lead destination k^10 1^10 indexed integer array destination integer k^10 kth^10 lexicographically smallest instruction take bob destination
combination sum array distinct integer candidate target integer target list unique combination candidate chosen number sum target may combination order number may chosen candidate unlimited number time two combination unique thefrequencyof least one chosen number different test case generated number unique combination sum target le 150 combination input
jump game iv array integer arr initially positioned first index array one step jump index index 1^10 1^10 arr length 1^10 1^10 0^10 j arr arr j j minimum number step reach last index array notice jump outside array time
check binary string one segment one binary string without^10 leading zero true contains one contiguous segment one otherwise false
design skiplist design skiplist without^10 using^10 built library skiplist data structure take log n^10 time add erase search comparing treap red black tree function performance code length skiplist comparatively short idea behind skiplists simple linked list example skiplist containing 30^10 40 50 60^10 70 90 want add 80 45 skiplist work way artyom kalinin cc sa 3^10 0^10 via wikimedia commonsyou see many layer skiplist layer sorted linked list help top layer add erase search faster n^10 proven average time complexity operation log n^10 space complexity n^10 see skiplist http en wikipedia org wiki skip_listimplement skiplist class skiplist initializes object skiplist bool search int target return true integer target exists skiplist false otherwise void add int num insert value num skiplist bool erase int num remove value num skiplist return true num exist skiplist nothing false exist multiple num value removing one fine note duplicate may exist skiplist code need handle situation
maximum population year 2d integer array log log birthi deathi indicates birth death year ith person population year x number people alive year ith person counted year x population x inclusive range birthi deathi 1^10 note person counted year die earliest year maximum population
flatten binary tree linked list root binary tree flatten tree linked list linked list use treenode class right child pointer point next node list left child pointer always null linked list order pre order traversal binary tree
best time buy sell stock iv integer array price price price stock ith day integer k^10 find maximum profit achieve may complete k^10 transaction e may buy k^10 time sell k^10 time note may engage multiple transaction simultaneously e must sell stock buy
employee earning manager sql schematable employee column name type id int name varchar salary int managerid int id primary key column table row table indicates id employee name salary id manager write sql query find employee earn manager result table order query result format following example
card flipping game two 0^10 indexed integer array front back length n^10 ith card positive integer front printed front back printed back initially card placed table front number facing facing may flip number card possibly zero flipping card integer considered good facing card facing card minimum possible good integer flipping card good integer 0^10
count way make array product 2d integer array query query query ni ki find number different way place positive integer array size ni product integer ki number way may large answer ith query number way modulo 109 7^10 integer array answer answer length query length answer answer ith query
recover original array alice 0^10 indexed array arr consisting n^10 positive integer chose arbitrary positive integer k^10 created two new 0^10 indexed integer array lower higher following manner lower arr k^10 every index 0^10 nhigher arr k^10 every index 0^10 nunfortunately alice lost three array however remembers integer present array lower higher array integer belonged help alice recover original array array nums consisting 2n integer exactly n^10 integer present lower remaining higher original array arr case answer unique valid array note test case generated exists least one valid array arr
final price special discount shop integer array price price price ith item shop special discount item shop buy ith item receive discount equivalent price j j minimum index j price j price otherwise receive discount integer array answer answer final price pay ith item shop considering special discount
smallest value replacing sum prime factor positive integer n^10 continuously replace n^10 sum prime factor note prime factor divide n^10 multiple time included sum many time divide n^10 smallest value n^10 take
validate binary search tree root binary tree determine valid binary search tree bst valid bst defined follows leftsubtreeof node contains node key le node key right subtree node contains node key greater node key left right subtrees must also binary search tree
division highest score binary array 0^10 indexed binary array nums length n^10 nums divided index 0^10 n^10 two array possibly empty numsleft numsright numsleft element nums index 0^10 1^10 inclusive numsright element nums index n^10 1^10 inclusive 0^10 numsleft empty numsright element nums n^10 numsleft element nums numsright empty division score index sum number 0^10 numsleft number 1^10 numsright distinct index highest possible division score may answer order
find k^10 pair smallest sum two integer array nums1 nums2 sorted ascending order integer k^10 define pair u v consists one element first array one element second array k^10 pair u1 v1 u2 v2 uk vk smallest sum
flip column maximum number equal row x n^10 binary matrix matrix choose number column matrix flip every cell column e change value cell 0^10 1^10 vice versa maximum number row value equal number flip
number good subset integer array nums call subset nums good product represented product one distinct prime number example nums 1^10 2^10 3^10 4 2^10 3^10 1^10 2^10 3^10 1^10 3^10 good subset product 6 2^10 3^10 6 2^10 3^10 3^10 3^10 respectively 1^10 4 4 good subset product 4 2^10 2^10 4 2^10 2^10 respectively number different good subset nums modulo 109 7^10 subset nums array obtained deleting possibly none element nums two subset different chosen index delete different
find highest altitude biker going road trip road trip consists n^10 1^10 point different altitude biker start trip point 0^10 altitude equal 0^10 integer array gain length n^10 gain net gain altitude point 1^10 0^10 n^10 highest altitude point
find score array marking element array nums consisting positive integer starting score 0^10 apply following algorithm choose smallest integer array marked tie choose one smallest index add value chosen integer score mark chosen element two adjacent element exist repeat array element marked score get applying algorithm
number longest increasing subsequence integer array nums number longest increasing subsequence notice sequence strictly increasing
largest submatrix rearrangement binary matrix matrix size x n^10 allowed^10 rearrange column matrix order area largest submatrix within matrix every element submatrix 1^10 reordering column optimally
delete node linked list singly linked list head want delete node node node deleted node access first node head value linked list unique guaranteed node node last node linked list delete node note deleting node mean removing memory mean value node exist linked list number node linked list decrease one value node order value node order custom testing input provide entire linked list head node node node last node list actual node list build linked list pas node function output entire list calling function
maximum sum hourglass x n^10 integer matrix grid define hourglass part matrix following form maximum sum element hourglass note hourglass cannot rotated must entirely contained within matrix
pseudo palindromic path binary tree binary tree node value digit 1^10 9 path binary tree said pseudo palindromic least one permutation node value path palindrome number pseudo palindromic path going root node leaf node
k^10 divisible element subarrays integer array nums two integer k^10 p number distinct subarrays k^10 element divisible p two array nums1 nums2 said distinct different length orthere exists least one index nums1 nums2 subarray defined non empty contiguous sequence element array
maximum sum two non overlapping subarrays integer array nums two integer firstlen secondlen maximum sum element two non overlapping subarrays length firstlen secondlen array length firstlen could occur array length secondlen non overlapping subarray contiguous part array
minimize difference target chosen element x n^10 integer matrix mat integer target choose one integer row matrix absolute difference target sum chosen element minimized minimum absolute difference absolute difference two number b^10 absolute value b^10
number segment string string number segment string segment defined contiguous sequence non space character
previous permutation one swap array positive integer arr necessarily distinct thelexicographicallylargest permutation smaller arr made exactly one swap cannot done array note swap exchange position two number arr arr j
find winner circular game n^10 friend playing game friend sitting circle numbered 1^10 n^10 clockwise order formally moving clockwise ith friend brings 1^10 th friend 1^10 n^10 moving clockwise nth friend brings 1st friend rule game follows start 1st friend count next k^10 friend clockwise direction including friend started counting wrap around circle may count friend last friend counted leaf circle loses game still one friend circle go back step 2^10 starting friend immediately clockwise friend lost repeat else last friend circle win game number friend n^10 integer k^10 winner game
capacity ship package within day conveyor belt package must shipped one port another within day day ith package conveyor belt weight weight day load ship package conveyor belt order weight may load weight maximum weight capacity ship least weight capacity ship result package conveyor belt shipped within day day
replace employee id unique identifier sql schematable employee column name type id int name varchar id primary key table row table contains id name employee company table employeeuni column name type id int unique_id int id unique_id primary key table row table contains id corresponding unique id employee company write sql query show unique id user user unique id replace show null result table order query result format following example
rearrange word sentence sentence text sentence string space separated word following format first letter upper case word text separated single space task rearrange word text word rearranged increasing order length two word length arrange original order new text following format shown
number unequal triplet array 0^10 indexed array positive integer nums find number triplet j k^10 following condition 0^10 j k^10 nums lengthnums nums j nums k^10 pairwise distinct word nums nums j nums nums k^10 nums j nums k^10 number triplet condition
counting word prefix array string word string pref number string word contain pref prefix prefix string leading contiguous substring
minimum time remove car containing illegal good 0^10 indexed binary string represents sequence train car 0^10 denotes ith car contain illegal good 1^10 denotes ith car contain illegal good train conductor would like get rid car containing illegal good following three operation number time remove train car left end e remove 0^10 take 1^10 unit time remove train car right end e remove length 1^10 take 1^10 unit time remove train car anywhere sequence take 2^10 unit time minimum time remove car containing illegal good note empty sequence car considered car containing illegal good
two sum array integer nums integer target index two number add target may assume input would exactly one solution may use element twice answer order
count integer interval empty set interval implement data structure add interval set interval count number integer present least one interval implement countintervals class countintervals initializes object empty set interval void add int left int right add interval left right set interval int count return number integer present least one interval note interval left right denotes integer x left x right
minimum limit ball bag integer array nums ith bag contains nums ball also integer maxoperations perform following operation maxoperations time take bag ball divide two new bag positive number ball example bag 5^10 ball become two new bag 1^10 4 ball two new bag 2^10 3^10 ball penalty maximum number ball bag want minimize penalty operation minimum possible penalty performing operation
find valid matrix row column sum two array rowsum colsum non negative integer rowsum sum element ith row colsum j sum element jth column 2d matrix word know element matrix know sum row column find matrix non negative integer size rowsum length x colsum length satisfies rowsum colsum requirement 2d array representing matrix fulfills requirement guaranteed least one matrix fulfills requirement exists
divide node maximum number group positive integer n^10 representing number node undirected graph node labeled 1^10 n^10 also 2d integer array edge edge ai bi indicates bidirectional edge node ai bi notice graph may disconnected divide node graph group 1^10 indexed node graph belongs exactly one group every pair node graph connected edge ai bi ai belongs group index x bi belongs group index x 1^10 maximum number group e maximum divide node 1^10 impossible group node condition
market analysis sql schematable user column name type user_id int join_date date favorite_brand varchar user_id primary key table table info user online shopping website user sell buy item table order column name type order_id int order_date date item_id int buyer_id int seller_id int order_id primary key table item_id foreign key item table buyer_id seller_id foreign key user table table item column name type item_id int item_brand varchar item_id primary key table write sql query find user join date number order made buyer 2019 result table order query result format following example
count odd number interval range two non negative integer low high count odd number low high inclusive
minimum adjacent swap reach kth^10 smallest number string num representing large integer integer k^10 call integer wonderful permutation digit num greater value num many wonderful integer however care smallest valued one example num 5489355142 1st smallest wonderful integer 5489355214 2nd smallest wonderful integer 5489355241 3rd smallest wonderful integer 5489355412 4th smallest wonderful integer 5489355421 minimum number adjacent digit swap need applied num reach kth^10 smallest wonderful integer test generated way kth^10 smallest wonderful integer exists
target sum integer array nums integer target want build expression nums adding one symbol integer nums concatenate integer example nums 2^10 1^10 add 2^10 1^10 concatenate build expression 2^10 1^10 number different expression build evaluates target
employee whose manager left company sql schematable employee column name type employee_id int name varchar manager_id int salary int employee_id primary key table table contains information employee salary id manager employee manager manager_id null write sql query report id employee whose salary strictly le 30000 whose manager left company manager leaf company information deleted employee table report still manager_id set manager left result table ordered employee_id query result format following example
maximize number subsequence string 0^10 indexed string text another 0^10 indexed string pattern length 2^10 consist lowercase english letter add either pattern 0^10 pattern 1^10 anywhere text exactly note character added even beginning end text maximum number time pattern occur subsequence modified text subsequence string derived another string deleting character without^10 changing order remaining character
divisor game alice bob take turn playing game alice starting first initially number n^10 chalkboard player turn player make move consisting choosing x 0^10 x n^10 n^10 x 0^10 replacing number n^10 chalkboard n^10 x also player cannot make move lose game true alice win game assuming player play optimally
longest chunked palindrome decomposition string text split k^10 substring subtext1 subtext2 subtextk subtexti non empty string concatenation substring equal text e subtext1 subtext2 subtextk text subtexti subtextk 1^10 valid value e 1^10 k^10 largest possible value k^10
trim binary search tree root binary search tree lowest highest boundary low high trim tree element lie low high trimming tree change relative structure element remain tree e node descendant remain descendant proven unique answer root trimmed binary search tree note root may change depending bound
kid greatest number candy n^10 kid candy integer array candy candy represents number candy ith kid integer extracandies denoting number extra candy boolean array result length n^10 result true giving ith kid extracandies greatest number candy among kid false otherwise note multiple kid greatest number candy
find punishment number integer positive integer n^10 punishment number n^10 punishment number n^10 defined sum square integer 1^10 nthe decimal representation partitioned contiguous substring sum integer value substring equal
132^10 pattern array n^10 integer nums 132^10 pattern subsequence three integer nums nums j nums k^10 j k^10 nums nums k^10 nums j true 132^10 pattern nums otherwise false
count hidden sequence 0^10 indexed array n^10 integer difference describes difference pair consecutive integer hidden sequence length n^10 1^10 formally call hidden sequence hidden difference hidden 1^10 hidden two integer lower upper describe inclusive range value lower upper hidden sequence contain example difference 1^10 3^10 4 lower 1^10 upper 6 hidden sequence sequence length 4 whose element 1^10 6 inclusive 3^10 4 1^10 5^10 4 5^10 2^10 6 possible hidden sequence 5^10 6 3^10 7^10 possible contains element greater 6 1^10 2^10 3^10 4 possible difference correct number possible hidden sequence possible sequence 0^10
tweet count per^10 frequency social medium company trying monitor activity site analyzing number tweet occur select period time period partitioned smaller time chunk based certain frequency every minute hour day example period 10^10 10000 second would partitioned following time chunk frequency every minute 60^10 second chunk 10^10 69^10 70 129 130 189 9970 10000 every hour 3600 second chunk 10^10 3609 3610 7209 7210 10000 every day 86400 second chunk 10^10 10000 notice last chunk may shorter specified frequency chunk size always end end time period 10000 example design implement api help company analysis implement tweetcounts class tweetcounts initializes tweetcounts object void recordtweet string tweetname int time store tweetname recorded time second list integer gettweetcountsperfrequency string freq string tweetname int starttime int endtime return list integer representing number tweet tweetname time chunk period time starttime endtime second frequency freq freq one minute hour day representing frequency every minute hour day respectively
find player zero one loss integer array match match winneri loseri indicates player winneri defeated player loseri match list answer size 2^10 answer 0^10 list player lost match answer 1^10 list player lost exactly one match value two list returned increasing order note consider player played least one match testcases generated two match outcome
goat latin string sentence consist word separated space word consists lowercase uppercase letter would like convert sentence goat latin made language similar pig latin rule goat latin follows word begin vowel e u append end word example word apple becomes applema word begin consonant e vowel remove first letter append end add example word goat becomes oatgma add one letter end word per^10 word index sentence starting 1^10 example first word get added end second word get aa added end final sentence representing conversion sentence goat latin
score parenthesis balanced parenthesis string score string score balanced parenthesis string based following rule score 1^10 ab score b^10 b^10 balanced parenthesis string score 2^10 balanced parenthesis string
reverse subarray maximize array value integer array nums value array defined sum nums nums 1^10 0^10 nums length 1^10 allowed^10 select subarray array reverse perform operation find maximum possible value final array
non decreasing subsequence integer array nums different possible non decreasing subsequence array least two element may answer order
coordinate maximum network quality array network tower tower tower xi yi qi denotes ith network tower location xi yi quality factor qi coordinate integral coordinate x plane distance two coordinate euclidean distance also integer radius tower reachable distance le equal radius outside distance signal becomes garbled tower reachable signal quality ith tower coordinate x calculated formula ⌊ qi 1^10 ⌋ distance tower coordinate network quality coordinate sum signal quality reachable tower array cx cy representing integral coordinate cx cy network quality maximum multiple coordinate network quality lexicographically minimum non negative coordinate note coordinate x1 y1 lexicographically smaller x2 y2 either x1 x2 orx1 x2 y1 y2 ⌊ val ⌋ greatest integer le equal val floor function
flip string monotone increasing binary string monotone increasing consists number 0^10 possibly none followed number 1^10 also possibly none binary string flip changing 0^10 1^10 1^10 0^10 minimum number flip make monotone increasing
monthly transaction sql schematable transaction column name type id int country varchar state enum amount int trans_date date id primary key table table information incoming transaction state column enum type approved declined write sql query find month country number transaction total amount number approved transaction total amount result table order query result format following example
defuse bomb bomb defuse time running informer provide circular array code length n^10 key k^10 decrypt code must replace every number number replaced simultaneously k^10 0^10 replace ith number sum next k^10 number k^10 0^10 replace ith number sum previous k^10 number k^10 0^10 replace ith number 0^10 code circular next element code n^10 1^10 code 0^10 previous element code 0^10 code n^10 1^10 circular array code integer key k^10 decrypted code defuse bomb
number way split string binary string split 3^10 non empty string s1 s2 s3 s1 s2 s3 number way split number one s1 s2 s3 answer may large modulo 109 7^10
degree array non empty array non negative integer nums degree array defined maximum frequency one element task find smallest possible length contiguous subarray nums degree nums
lucky number matrix x n^10 matrix distinct number lucky number matrix order lucky number element matrix minimum element row maximum column
percentage user attended contest sql schematable user column name type user_id int user_name varchar user_id primary key table row table contains name id user table register column name type contest_id int user_id int contest_id user_id primary key table row table contains id user contest registered write sql query find percentage user registered contest rounded two decimal result table ordered percentage descending order case tie order contest_id ascending order query result format following example
image overlap two image img1 img2 represented binary square matrix size n^10 x n^10 binary matrix 0^10 1^10 value translate one image however choose sliding 1^10 bit left right number unit place top image calculate overlap counting number position 1^10 image note also translation include kind rotation 1^10 bit translated outside matrix border erased largest possible overlap
minimum operation make array equal array arr length n^10 arr 2^10 1^10 valid value e 0^10 n^10 one operation select two index x 0^10 x n^10 subtract 1^10 arr x add 1^10 arr e perform arr x 1^10 arr 1^10 goal make element array equal guaranteed element array made equal using^10 operation integer n^10 length array minimum number operation needed make element arr equal
minimum amount time fill cup water dispenser dispense cold warm hot water every second either fill 2^10 cup different type water 1^10 cup type water 0^10 indexed integer array amount length 3^10 amount 0^10 amount 1^10 amount 2^10 denote number cold warm hot water cup need fill respectively minimum number second needed fill cup
movie rating sql schematable movie column name type movie_id int title varchar movie_id primary key table title name movie table user column name type user_id int name varchar user_id primary key table table movierating column name type movie_id int user_id int rating int created_at date movie_id user_id primary key table table contains rating movie user review created_at user review date write sql query find name user rated greatest number movie case tie lexicographically smaller user name find movie name highest average rating february 2020^10 case tie lexicographically smaller movie name query result format following example
count integer even digit sum positive integer num number positive integer le equal num whose digit sum even digit sum positive integer sum digit
average level binary tree root binary tree average value node level form array answer within 10^10 5^10 actual answer accepted
sort people array string name array height consists distinct positive integer array length n^10 index name height denote name height ith person name sorted descending order people height
find n^10 unique integer sum zero integer n^10 array containing n^10 unique integer add 0^10
minimum time difference list 24^10 hour clock time point hh mm format minimum minute difference two time point list
shortest path alternating color integer n^10 number node directed graph node labeled 0^10 n^10 1^10 edge red blue graph could self edge parallel edge two array rededges blueedges rededges ai bi indicates directed red edge node ai node bi graph andblueedges j uj vj indicates directed blue edge node uj node vj graph array answer length n^10 answer x length shortest path node 0^10 node x edge color alternate along path 1^10 path exist
count collision monkey polygon regular convex polygon n^10 vertex vertex labeled 0^10 n^10 1^10 clockwise direction vertex exactly one monkey following figure show convex polygon 6 vertex monkey move simultaneously neighboring vertex neighboring vertex vertex vertex 1^10 n^10 clockwise direction orthe vertex 1^10 n^10 n^10 counter clockwise direction collision happens least two monkey reside vertex movement intersect edge number way monkey move least one collision happens answer may large modulo 109 7^10 note monkey move
3sum integer array nums triplet nums nums j nums k^10 j k^10 j k^10 nums nums j nums k^10 0^10 notice solution set must contain duplicate triplet
combination sum ii collection candidate number candidate target number target find unique combination candidate candidate number sum target number candidate may used combination note solution set must contain duplicate combination
rank transform matrix x n^10 matrix new matrix answer answer row col rank matrix row col rank integer represents large element compared element calculated using^10 following rule rank integer starting 1^10 two element p q row column p q rank p rank q p q rank p rank q p q rank p rank q rank small possible test case generated answer unique rule
sum unique element integer array nums unique element array element appear exactly array sum unique element nums
maximum number non overlapping subarrays sum equal target array nums integer target maximum number non empty non overlapping subarrays sum value subarray equal target
maximum binary string change binary string binary consisting 0^10 1^10 apply following operation number time operation 1^10 number contains substring 00 replace 10^10 example 00010 10010 operation 2^10 number contains substring 10^10 replace 01^10 example 00010 00001 maximum binary string obtain number operation binary string x greater binary string x decimal representation greater decimal representation
shortest path visiting node undirected connected graph n^10 node labeled 0^10 n^10 1^10 array graph graph list node connected node edge length shortest path visit every node may start stop node may revisit node multiple time may reuse edge
bank account summary ii sql schematable user column name type account int name varchar account primary key table row table contains account number user bank two user name table table transaction column name type trans_id int account int amount int transacted_on date trans_id primary key table row table contains change made account amount positive user received money negative transferred money account start balance 0^10 write sql query report name balance user balance higher 10000 balance account equal sum amount transaction involving account result table order query result format following example
number way form target string dictionary list string length word string target task form target using^10 word following rule target formed left right form ith character 0^10 indexed target choose kth^10 character jth string word target word j k^10 use kth^10 character jth string word longer use xth character string word x k^10 word character left index k^10 become unusuable every string repeat process form string target notice use multiple character string word provided condition met number way form target word answer may large modulo 109 7^10
key room n^10 room labeled 0^10 n^10 1^10 room locked except room 0^10 goal visit room however cannot enter locked room without^10 key visit room may find set distinct key key number denoting room unlocks take unlock room array room room set key obtain visited room true visit room false otherwise
merge linked list two linked list list1 list2 size n^10 respectively remove list1 node ath node bth node put list2 place blue edge node following figure indicate result build result list head
find possible recipe supply information n^10 different recipe string array recipe 2d string array ingredient ith recipe name recipe create needed ingredient ingredient ingredient recipe may need created recipe e ingredient may contain string recipe also string array supply containing ingredient initially infinite supply list recipe create may answer order note two recipe may contain ingredient
freedom trail video game fallout 4 quest road freedom requires player reach metal dial called freedom trail ring use dial spell specific keyword open door string ring represents code engraved outer ring another string key represents keyword need spelled minimum number step spell character keyword initially first character ring aligned 12 00 direction spell character key one one rotating ring clockwise anticlockwise make character string key aligned 12 00 direction pressing center button stage rotating ring spell key character key rotate ring clockwise anticlockwise one place count one step final purpose rotation align one ring character 12 00 direction character must equal key character key aligned 12 00 direction press center button spell also count one step pressing could begin spell next character key next stage otherwise finished spelling
parallel course ii integer n^10 indicates n^10 course labeled 1^10 n^10 also array relation relation prevcoursei nextcoursei representing prerequisite relationship course prevcoursei course nextcoursei course prevcoursei taken course nextcoursei also integer k^10 one semester take k^10 course long taken prerequisite previous semester course taking minimum number semester needed take course testcases generated possible take every course
maximum frequency stack design stack like data structure push element stack pop frequent element stack implement freqstack class freqstack construct empty frequency stack void push int val push integer val onto top stack int pop remove return frequent element stack tie frequent element element closest stack top removed returned
break palindrome palindromic string lowercase english letter palindrome replace exactly one character lowercase english letter resulting string palindrome lexicographically smallest one possible resulting string way replace character make palindrome empty string string lexicographically smaller string b^10 length first position b^10 differ character strictly smaller corresponding character b^10 example abcc lexicographically smaller abcd first position differ fourth character c^10 smaller
create binary tree description 2d integer array description description parenti childi islefti indicates parenti parent childi binary tree unique value furthermore islefti 1^10 childi left child parenti islefti 0^10 childi right child parenti construct binary tree described description root test case generated binary tree valid
possible bipartition want split group n^10 people labeled 1^10 n^10 two group size person may dislike people go group integer n^10 array dislike dislike ai bi indicates person labeled ai like person labeled bi true possible split everyone two group way
shuffle array array nums consisting 2n element form x1 x2 xn y1 y2 yn array form x1 y1 x2 y2 xn yn
build array stack operation integer array target integer n^10 empty stack two following operation push push integer top stack pop remove integer top stack also stream integer range 1^10 n^10 use two stack operation make number stack bottom top equal target follow following rule stream integer empty pick next integer stream push top stack stack empty pop integer top stack moment element stack bottom top equal target read new integer stream operation stack stack operation needed build target following mentioned rule multiple valid answer
verifying alien dictionary alien language surprisingly also use english lowercase letter possibly different order order alphabet permutation lowercase letter sequence word written alien language order alphabet true word sorted lexicographically alien language
game life according wikipedia article game life also known simply life cellular automaton devised british mathematician john horton conway 1970 board made x n^10 grid cell cell initial state live represented 1^10 dead represented 0^10 cell interacts eight neighbor horizontal vertical diagonal using^10 following four rule taken wikipedia article live cell fewer two live neighbor dy caused population live cell two three live neighbor life next generation live cell three live neighbor dy population dead cell exactly three live neighbor becomes live cell reproduction next state created applying rule simultaneously every cell current state birth death occur simultaneously current state x n^10 grid board next state
fair distribution cooky integer array cooky cooky denotes number cooky ith bag also integer k^10 denotes number child distribute bag cooky cooky bag must go child cannot split unfairness distribution defined maximum total cooky obtained single child distribution minimum unfairness distribution
number digit one integer n^10 count total number digit 1^10 appearing non negative integer le equal n^10
loud rich group n^10 people labeled 0^10 n^10 1^10 person different amount money different level quietness array richer richer ai bi indicates ai money bi integer array quiet quiet quietness ith person data richer logically correct e data lead situation x richer richer x time integer array answer answer x least quiet person person smallest value quiet among people definitely equal money person x
k^10 concatenation maximum sum integer array arr integer k^10 modify array repeating k^10 time example arr 1^10 2^10 k^10 3^10 modified array 1^10 2^10 1^10 2^10 1^10 2^10 maximum sub array sum modified array note length sub array 0^10 sum case 0^10 answer large answer modulo 109 7^10
maximize minimum powered city 0^10 indexed integer array station length n^10 station represents number power station ith city power station provide power every city fixed range word range denoted power station city provide power city j j 0^10 j n^10 1^10 note x denotes absolute value example 7^10 5^10 2^10 3^10 10^10 7^10 power city total number power station provided power government sanctioned building k^10 power station built city range pre existing one two integer k^10 maximum possible minimum power city additional power station built optimally note build k^10 power station multiple city
validate ip address string queryip ipv4 ip valid ipv4 address ipv6 ip valid ipv6 address neither ip correct ip type valid ipv4 address ip form x1 x2 x3 x4 0^10 xi 255 xi cannot contain leading zero example 192 168 1^10 1^10 192 168 1^10 0^10 valid ipv4 address 192 168 01^10 1^10 192 168 1^10 00 192 168 1^10 1^10 invalid ipv4 address valid ipv6 address ip form x1 x2 x3 x4 x5 x6 x7 x8 1^10 xi length 4xi hexadecimal string may contain digit lowercase english letter f upper case english letter f leading zero allowed^10 xi example 2001 0db8 85a3 0000 0000 8a2e 0370 7334 2001 db8 85a3 0^10 0^10 8a2e 0370 7334 valid ipv6 address 2001 0db8 85a3 8a2e 037j 7334 02001 0db8 85a3 0000 0000 8a2e 0370 7334 invalid ipv6 address
shortest completing word string licenseplate array string word find shortest completing word word completing word word contains letter licenseplate ignore number space licenseplate treat letter case insensitive letter appears licenseplate must appear word number time example licenseplate abc 12c contains letter b^10 ignoring case c^10 twice possible completing word abccdef caaacab cbca shortest completing word word guaranteed answer exists multiple shortest completing word first one occurs word
queen attack king 0^10 indexed 8 x 8 chessboard multiple black queen ad one white king 2d integer array queen queen xqueeni yqueeni represents position ith black queen chessboard also integer array king length 2^10 king xking yking represents position white king coordinate black queen directly attack king may answer order
distribute repeating integer array n^10 integer nums 50 unique value array also array customer order quantity quantity quantity amount integer ith customer ordered determine possible distribute nums ith customer get exactly quantity integer integer ith customer get equal andevery customer satisfied true possible distribute nums according condition
divide string group size k^10 string partitioned group size k^10 using^10 following procedure first group consists first k^10 character string second group consists next k^10 character string character part exactly one group last group string k^10 character remaining character fill used complete group note partition done removing fill character last group exists concatenating group order resultant string string size group k^10 character fill string array denoting composition every group divided using^10 procedure
minimum amount time collect garbage 0^10 indexed array string garbage garbage represents assortment garbage ith house garbage consists character p g representing one unit metal paper glass garbage respectively picking one unit type garbage take 1^10 minute also 0^10 indexed integer array travel travel number minute needed go house house 1^10 three garbage truck city responsible picking one type garbage garbage truck start house 0^10 must visit house order however need visit every house one garbage truck may used moment one truck driving picking garbage two truck cannot anything minimum number minute needed pick garbage
boat save people array people people weight ith person infinite number boat boat carry maximum weight limit boat carry two people time provided sum weight people limit minimum number boat carry every person
minimum number operation sort binary tree level root binary tree unique value one operation choose two node level swap value minimum number operation needed make value level sorted strictly increasing order level node number edge along path root node
maximum number word type malfunctioning keyboard letter key work key keyboard work properly string text word separated single space leading trailing space string brokenletters distinct letter key broken number word text fully type using^10 keyboard
adding space string 0^10 indexed string 0^10 indexed integer array space describes index original string space added space inserted character index example enjoyyourcoffee space 5^10 9 place space c^10 index 5^10 9 respectively thus obtain enjoy coffee modified string space added
maximum product word length string array word maximum value length word length word j two word share common letter two word exist 0^10
count triplet form two array equal xor array integer arr want select three index j k^10 0^10 j k^10 arr length let define b^10 follows arr arr 1^10 arr j 1^10 b^10 arr j arr j 1^10 arr k^10 note denotes bitwise xor operation number triplet j k^10 b^10
couple holding hand n^10 couple sitting 2n seat arranged row want hold hand people seat represented integer array row row id person sitting ith seat couple numbered order first couple 0^10 1^10 second couple 2^10 3^10 last couple 2n 2^10 2n 1^10 minimum number swap every couple sitting side side swap consists choosing two people stand switch seat
maximum product splitted binary tree root binary tree split binary tree two subtrees removing one edge product sum subtrees maximized maximum product sum two subtrees answer may large modulo 109 7^10 note need maximize answer taking mod taking
single number ii integer array nums every element appears three time except one appears exactly find single element must implement solution linear runtime complexity use constant extra space
minimum absolute difference query minimum absolute difference array defined minimum value j 0^10 j length j element minimum absolute difference 1^10 example minimum absolute difference array 5^10 2^10 3^10 7^10 2^10 2^10 3^10 1^10 note 0^10 j must different integer array nums array query query li ri query compute minimum absolute difference subarray nums li ri containing element nums 0^10 based index li ri inclusive array an^10 an^10 answer ith query subarray contiguous sequence element array value x defined x x 0^10 x x 0^10
reaching point four integer sx sy tx ty true possible convert point sx sy point tx ty operation false otherwise allowed^10 operation point x convert either x x x
odd even jump integer array arr starting index make series jump 1st 3rd 5th jump series called odd numbered jump 2nd 4th 6th jump series called even numbered jump note jump numbered index may jump forward index index j j following way odd numbered jump e jump 1^10 3^10 5^10 jump index j arr arr j arr j smallest possible value multiple index j jump smallest index j even numbered jump e jump 2^10 4 6 jump index j arr arr j arr j largest possible value multiple index j jump smallest index j may case index legal jump starting index good starting index reach end array index arr length 1^10 jumping number time possibly 0^10 number good starting index
maximal square x n^10 binary matrix filled 0^10 1^10 find largest square containing 1^10 area
dungeon game demon captured princess imprisoned bottom right corner dungeon dungeon consists x n^10 room laid 2d grid valiant knight initially positioned top left room must fight way dungeon rescue princess knight initial health point represented positive integer point health point drop 0^10 dy immediately room guarded demon represented negative integer knight loses health upon entering room room either empty represented 0^10 contain magic orb increase knight health represented positive integer reach princess quickly possible knight decides move rightward downward step knight minimum initial health rescue princess note room contain threat power ups even first room knight enters bottom right room princess imprisoned
three divisor integer n^10 true n^10 exactly three positive divisor otherwise false integer divisor n^10 exists integer k^10 n^10 k^10
maximum score good subarray array integer nums 0^10 indexed integer k^10 score subarray j defined min nums nums 1^10 nums j j 1^10 good subarray subarray k^10 j maximum possible score good subarray
map highest peak integer matrix iswater size x n^10 represents map land water cell iswater j 0^10 cell j land cell iswater j 1^10 cell j water cell must assign cell height way follows rule height cell must non negative cell water cell height must 0^10 two adjacent cell must absolute height difference 1^10 cell adjacent another cell former directly north east south west latter e side touching find assignment height maximum height matrix maximized integer matrix height size x n^10 height j cell j height multiple solution
minimum cost connect two group point two group point first group size1 point second group size2 point size1 size2 cost connection two point size1 x size2 matrix cost j cost connecting point first group point j second group group connected point group connected one point opposite group word point first group must connected least one point second group point second group must connected least one point first group minimum cost take connect two group
optimal partition string string partition string one substring character substring unique letter appears single substring minimum number substring partition note character belong exactly one substring partition
number way square number equal product two number two array integer nums1 nums2 number triplet formed type 1^10 type 2^10 following rule type 1^10 triplet j k^10 nums1 2^10 nums2 j nums2 k^10 0^10 nums1 length 0^10 j k^10 nums2 length type 2^10 triplet j k^10 nums2 2^10 nums1 j nums1 k^10 0^10 nums2 length 0^10 j k^10 nums1 length
largest magic square k^10 x k^10 magic square k^10 x k^10 grid filled integer every row sum every column sum diagonal sum equal integer magic square distinct every 1^10 x 1^10 grid trivially magic square x n^10 integer grid size e side length k^10 largest magic square found within grid
new 21^10 game alice play following game loosely based card game 21^10 alice start 0^10 point draw number le k^10 point draw gain integer number point randomly range 1^10 maxpts maxpts integer draw independent outcome equal probability alice stop drawing number get k^10 point probability alice n^10 fewer point answer within 10^10 5^10 actual answer considered accepted
group string 0^10 indexed array string word string consists lowercase english letter letter occurs string word two string s1 s2 said connected set letter s2 obtained set letter s1 one following operation adding exactly one letter set letter s1 deleting exactly one letter set letter s1 replacing exactly one letter set letter s1 letter including array word divided one non intersecting group string belongs group one following true connected least one string group string present group note string word grouped manner string belonging group cannot connected string present group proved arrangement always unique array an^10 size 2^10 an^10 0^10 maximum number group word divided andans 1^10 size largest group
finding pair certain sum two integer array nums1 nums2 tasked implement data structure support query two type add positive integer element index array nums2 count number pair j nums1 nums2 j equal value 0^10 nums1 length 0^10 j nums2 length implement findsumpairs class findsumpairs int nums1 int nums2 initializes findsumpairs object two integer array nums1 nums2 void add int index int val add val nums2 index e apply nums2 index val int count int tot return number pair j nums1 nums2 j tot
water jug problem two jug capacity jug1capacity jug2capacity liter infinite amount water supply available determine whether possible measure exactly targetcapacity liter using^10 two jug targetcapacity liter water measurable must targetcapacity liter water contained within one bucket end operation allowed^10 fill jug water empty jug pour water one jug another till jug completely full first jug empty
sort student kth^10 score class student n^10 exam 0^10 indexed x n^10 integer matrix score row represents one student score j denotes score ith student got jth exam matrix score contains distinct integer also integer k^10 sort student e row matrix score kth^10 0^10 indexed exam highest lowest matrix sorting
sum distance tree undirected connected tree n^10 node labeled 0^10 n^10 1^10 n^10 1^10 edge integer n^10 array edge edge ai bi indicates edge node ai bi tree array answer length n^10 answer sum distance ith node tree node
minimum path sum x n^10 grid filled non negative number find path top left bottom right minimizes sum number along path note move either right point time
cyclically rotating grid x n^10 integer matrix grid n^10 even integer integer k^10 matrix composed several layer shown image color layer cyclic rotation matrix done cyclically rotating layer matrix cyclically rotate layer element layer take place adjacent element counter clockwise direction example rotation shown matrix applying k^10 cyclic rotation
water bottle numbottles water bottle initially full water exchange numexchange empty water bottle market one full water bottle operation drinking full water bottle turn empty bottle two integer numbottles numexchange maximum number water bottle drink
count number homogenous substring string number homogenous substring answer may large modulo 109 7^10 string homogenous character string substring contiguous sequence character within string
reshape matrix matlab handy function called reshape reshape x n^10 matrix new one different size x c^10 keeping original data x n^10 matrix mat two integer c^10 representing number row number column wanted reshaped matrix reshaped matrix filled element original matrix row traversing order reshape operation parameter possible legal output new reshaped matrix otherwise output original matrix
fruit basket visiting farm single row fruit tree arranged left right tree represented integer array fruit fruit type fruit ith tree produce want collect much fruit possible however owner strict rule must follow two basket basket hold single type fruit limit amount fruit basket hold starting tree choice must pick exactly one fruit every tree including start tree moving right picked fruit must fit one basket reach tree fruit cannot fit basket must stop integer array fruit maximum number fruit pick
smallest subtree deepest node root binary tree depth node shortest distance root smallest subtree contains deepest node original tree node called deepest largest depth possible among node entire tree subtree node tree consisting node plus set descendant node
count number maximum bitwise subset integer array nums find maximum possible bitwise subset nums number different non empty subset maximum bitwise array subset array b^10 obtained b^10 deleting possibly zero element b^10 two subset considered different index element chosen different bitwise array equal 0^10 1^10 length 1^10 0^10 indexed
word within two edits dictionary two string array query dictionary word array comprise lowercase english letter length one edit take word query change letter letter find word query maximum two edits equal word dictionary list word query match word dictionary maximum two edits word order appear query
delete node forest root binary tree node tree distinct value deleting node value to_delete left forest disjoint union tree root tree remaining forest may result order
fraction addition subtraction string expression representing expression fraction addition subtraction calculation result string format final result irreducible fraction final result integer change format fraction denominator 1^10 case 2^10 converted 2^10 1^10
determine color chessboard square coordinate string represents coordinate square chessboard chessboard reference true square white false square black coordinate always represent valid chessboard square coordinate always letter first number second
magic square grid 3^10 x 3^10 magic square 3^10 x 3^10 grid filled distinct number 1^10 9 row column diagonal sum row x col grid integer many 3^10 x 3^10 magic square subgrids subgrid contiguous
painting grid three different color two integer n^10 consider x n^10 grid cell initially white paint cell red green blue cell must painted number way color grid two adjacent cell color answer large modulo 109 7^10
decode way message containing letter z encoded number using^10 following mapping 1^10 b^10 2^10 z 26 decode encoded message digit must grouped mapped back letter using^10 reverse mapping may multiple way example 11106 mapped aajf grouping 1^10 1^10 10^10 6 kjf grouping 11 10^10 6 note grouping 1^10 11 06 invalid 06 cannot mapped f 6 different 06 string containing digit number way decode test case generated answer fit 32 bit integer
delete greatest value row x n^10 matrix grid consisting positive integer perform following operation grid becomes empty delete element greatest value row multiple element exist delete add maximum deleted element answer note number column decrease one operation answer performing operation described
smallest sufficient team project list required skill req_skills list people ith person people contains list skill person consider sufficient team set people every required skill req_skills least one person team skill represent team index person example team 0^10 1^10 3^10 represents people skill people 0^10 people 1^10 people 3^10 sufficient team smallest possible size represented index person may answer order guaranteed answer exists
alert using^10 key card three time one hour period leetcode company worker use key card unlock office door time worker us key card security system save worker name time used system emits alert worker us key card three time one hour period list string keyname keytime keyname keytime corresponds person name time key card used single day access time 24^10 hour time format hh mm 23 51 09 49 list unique worker name received alert frequent keycard use sort name ascending order alphabetically notice 10^10 00 11 00 considered within one hour period 22 51 23 52 considered within one hour period
max dot product two subsequence two array nums1 nums2 maximum dot product non empty subsequence nums1 nums2 length subsequence array new array formed original array deleting none character without^10 disturbing relative position remaining character ie 2^10 3^10 5^10 subsequence 1^10 2^10 3^10 4 5^10 1^10 5^10 3^10
lru cache design data structure follows constraint least recently used lru cache implement lrucache class lrucache int capacity initialize lru cache positive size capacity int get int key value key key exists otherwise 1^10 void put int key int value update value key key exists otherwise add key value pair cache number key exceeds capacity operation evict least recently used key function get put must run 1^10 average time complexity
earliest latest round player compete tournament n^10 player participating player standing single row numbered 1^10 n^10 based initial standing position player 1^10 first player row player 2^10 second player row etc tournament consists multiple round starting round number 1^10 round ith player front row competes ith player end row winner advance next round number player odd current round player middle automatically advance next round example row consists player 1^10 2^10 4 6 7player 1^10 competes player 7^10 player 2^10 competes player 6 player 4 automatically advance next round round winner lined back row based original ordering assigned initially ascending order player numbered firstplayer secondplayer best tournament win player compete two player compete either might win thus may choose outcome round integer n^10 firstplayer secondplayer integer array containing two value earliest possible round number latest possible round number two player compete respectively
number good way split string string split called good split two non empty string sleft sright concatenation equal e sleft sright number distinct letter sleft sright number good split make
find winner array game integer array arr distinct integer integer k^10 game played first two element array e arr 0^10 arr 1^10 round game compare arr 0^10 arr 1^10 larger integer win remains position 0^10 smaller integer move end array game end integer win k^10 consecutive round integer win game guaranteed winner game
insert interval array non overlapping interval interval interval starti endi represent start end ith interval interval sorted ascending order starti also interval newinterval start end represents start end another interval insert newinterval interval interval still sorted ascending order starti interval still overlapping interval merge overlapping interval necessary interval insertion
asteroid collision array asteroid integer representing asteroid row asteroid absolute value represents size sign represents direction positive meaning right negative meaning left asteroid move speed find state asteroid collision two asteroid smaller one explode size explode two asteroid moving direction never
find two non overlapping sub array target sum array integer arr integer target find two non overlapping sub array arr sum equal target multiple answer find answer sum length two sub array minimum minimum sum length two required sub array 1^10 cannot find two sub array
set intersection size least two 2d integer array interval interval starti endi represents integer starti endi inclusively containing set array nums interval interval least two integer nums example interval 1^10 3^10 3^10 7^10 8 9 1^10 2^10 4 7^10 8 9 2^10 3^10 4 8 9 containing set minimum possible size containing set
reformat phone number phone number string number number consists digit space dash would like reformat phone number certain manner firstly remove space dash group digit left right block length 3^10 4 fewer digit final digit grouped follows 2^10 digit single block length 2^10 3^10 digit single block length 3^10 4 digit two block length 2^10 block joined dash notice reformatting process never produce block length 1^10 produce two block length 2^10 phone number formatting
maximum profit operating centennial wheel operator centennial wheel four gondola gondola room four people ability rotate gondola counterclockwise cost runningcost dollar array customer length n^10 customer number new customer arriving ith rotation 0^10 indexed mean must rotate wheel time customer customer arrive cannot make customer wait room gondola customer pay boardingcost dollar board gondola closest ground exit gondola reach ground stop wheel time including serving customer decide stop serving customer subsequent rotation free order get customer safely note currently four customer waiting wheel four board gondola rest wait next rotation minimum number rotation need perform maximize profit scenario profit positive 1^10
maximum swap integer num swap two digit get maximum valued number maximum valued number get
guess number higher lower ii playing guessing game game work follows pick number 1^10 n^10 guess number guess right number win game guess wrong number tell whether number picked higher lower continue guessing every time guess wrong number x pay x dollar run money lose game particular n^10 minimum amount money need guarantee win regardless number pick
remove duplicate sorted array ii integer array nums sorted non decreasing order remove duplicate place unique element appears twice relative order element kept impossible change length array language must instead result placed first part array nums formally k^10 element removing duplicate first k^10 element nums hold final result matter leave beyond first k^10 element k^10 placing final result first k^10 slot nums allocate extra space another array must modifying input array place 1^10 extra memory custom judge judge test solution following code int nums input arrayint expectednums expected answer correct lengthint k^10 removeduplicates nums call implementationassert k^10 expectednums length int 0^10 k^10 assert nums expectednums assertion pas solution accepted
delete node bst root node reference bst key delete node key bst root node reference possibly updated bst basically deletion divided two stage search node remove node found delete node
number submatrices sum target matrix target number non empty submatrices sum target submatrix x1 y1 x2 y2 set cell matrix x x1 x x2 y1 y2 two submatrices x1 y1 x2 y2 x1 y1 x2 y2 different coordinate different example x1 x1
construct rectangle web developer need know design web page size specific rectangular web page ’ area job design rectangular web page whose length l width w satisfy following requirement area rectangular web page designed must equal target area width w larger length l mean l w difference length l width w small possible array l w l w length width web page designed sequence
largest merge two string two string word1 word2 want construct string merge following way either word1 word2 non empty choose one following option word1 non empty append first character word1 merge delete word1 example word1 abc merge dv choosing operation word1 bc merge dva word2 non empty append first character word2 merge delete word2 example word2 abc merge choosing operation word2 bc merge lexicographically largest merge construct string lexicographically larger string b^10 length first position b^10 differ character strictly larger corresponding character b^10 example abcd lexicographically larger abcc first position differ fourth character greater c^10
best time buy sell stock ii integer array price price price stock ith day day may decide buy sell stock hold one share stock time however buy immediately sell day find maximum profit achieve
number 1^10 bit write function take binary representation unsigned integer return number 1^10 bit also known hamming weight note note language java unsigned integer type case input signed integer type affect implementation integer internal binary representation whether signed unsigned
array doubled pair integer array even length arr true possible reorder arr arr 2^10 1^10 2^10 arr 2^10 every 0^10 len arr 2^10 false otherwise
minimum weighted subgraph required path integer n^10 denoting number node weighted directed graph node numbered 0^10 n^10 1^10 also 2d integer array edge edge fromi toi weighti denotes exists directed edge fromi toi weight weighti lastly three distinct integer src1 src2 dest denoting three distinct node graph minimum weight subgraph graph possible reach dest src1 src2 via set edge subgraph case subgraph exist 1^10 subgraph graph whose vertex edge subset original graph weight subgraph sum weight constituent edge
find good index 0^10 indexed integer array nums size n^10 positive integer k^10 call index range k^10 n^10 k^10 good following condition satisfied k^10 element index non increasing order k^10 element index non decreasing order array good index sorted increasing order
minimum distance bst node root binary search tree bst minimum difference value two different node tree
decode xored array hidden integer array arr consists n^10 non negative integer encoded another integer array encoded length n^10 1^10 encoded arr xor arr 1^10 example arr 1^10 0^10 2^10 1^10 encoded 1^10 2^10 3^10 encoded array also integer first first element arr e arr 0^10 original array arr proved answer exists unique
closest room hotel n^10 room room represented 2d integer array room room roomidi sizei denotes room room number roomidi size equal sizei roomidi guaranteed unique also k^10 query 2d array query query j preferredj minsizej answer jth query room number id room room size least minsizej andabs id preferredj minimized ab x absolute value x tie absolute difference use room smallest id room answer 1^10 array answer length k^10 answer j contains answer jth query
number even odd bit positive integer n^10 let even denote number even index binary representation n^10 0^10 indexed value 1^10 let odd denote number odd index binary representation n^10 0^10 indexed value 1^10 integer array answer answer even odd
minimum domino rotation equal row row domino top bottom represent top bottom half ith domino domino tile two number 1^10 6 one half tile may rotate ith domino top bottom swap value minimum number rotation value top value bottom cannot done 1^10
course schedule ii total numcourses course take labeled 0^10 numcourses 1^10 array prerequisite prerequisite ai bi indicates must take course bi first want take course ai example pair 0^10 1^10 indicates take course 0^10 first take course 1^10 ordering course take finish course many valid answer impossible finish course empty array
parallel course iii integer n^10 indicates n^10 course labeled 1^10 n^10 also 2d integer array relation relation j prevcoursej nextcoursej denotes course prevcoursej completed course nextcoursej prerequisite relationship furthermore 0^10 indexed integer array time time denotes many month take complete 1^10 th course must find minimum number month needed complete course following rule may start taking course time prerequisite met number course taken time minimum number month needed complete course note test case generated possible complete every course e graph directed acyclic graph
print word vertically string word vertically order appear word returned list string complete space necessary trailing space allowed^10 word would put one column one column one word
maximum point obtain card several card arranged row card associated number point point integer array cardpoints one step take one card beginning end row take exactly k^10 card score sum point card taken integer array cardpoints integer k^10 maximum score obtain
permutation string two string s1 s2 true s2 contains permutation s1 false otherwise word true one s1 permutation substring s2
valid perfect square positive integer num true num perfect square false otherwise perfect square integer square integer word product integer must use built library function sqrt
slowest key newly designed keypad tested tester pressed sequence n^10 key one time string keyspressed length n^10 keyspressed ith key pressed testing sequence sorted list releasetimes releasetimes time ith key released array 0^10 indexed 0th key pressed time 0^10 every subsequent key pressed exact time previous key released tester want know key keypress longest duration ith keypress duration releasetimes releasetimes 1^10 0th keypress duration releasetimes 0^10 note key could pressed multiple time test multiple press key may duration key keypress longest duration multiple keypresses lexicographically largest key keypresses
minimum element add form sum integer array nums two integer limit goal array nums interesting property ab nums limit minimum number element need add make sum array equal goal array must maintain property ab nums limit note ab x equal x x 0^10 x otherwise
lfu cache design implement data structure least frequently used lfu cache implement lfucache class lfucache int capacity initializes object capacity data structure int get int key get value key key exists cache otherwise return 1^10 void put int key int value update value key present insert key already present cache reach capacity invalidate remove least frequently used key inserting new item problem tie e two key frequency least recently used key would invalidated determine least frequently used key use counter maintained key cache key smallest use counter least frequently used key key first inserted cache use counter set 1^10 due put operation use counter key cache incremented either get put operation called function get put must run 1^10 average time complexity
divide two integer two integer dividend divisor divide two integer without^10 using^10 multiplication division mod operator integer division truncate toward zero mean losing fractional part example 8 345 would truncated 8 2^10 7335 would truncated 2^10 quotient dividing dividend divisor note assume dealing environment could store integer within 32 bit signed integer range − 231 231 − 1^10 problem quotient strictly greater 231 1^10 231 1^10 quotient strictly le 231 231
determine two event conflict two array string represent two inclusive event happened day event1 event2 event1 starttime1 endtime1 andevent2 starttime2 endtime2 event time valid 24^10 hour format form hh mm conflict happens two event non empty intersection e moment common event true conflict two event otherwise false
daily temperature array integer temperature represents daily temperature array answer answer number day wait ith day get warmer temperature future day possible keep answer 0^10 instead
find palindrome fixed length integer array query positive integer intlength array answer answer either query th smallest positive palindrome length intlength 1^10 palindrome exists palindrome number read backwards forward palindrome cannot leading zero
valid mountain array array integer arr true valid mountain array recall arr mountain array arr length 3there exists 0^10 arr length 1^10 arr 0^10 arr 1^10 arr 1^10 arr arr arr 1^10 arr arr length 1^10
multiply string two non negative integer num1 num2 represented string product num1 num2 also represented string note must use built biginteger library convert input integer directly
poor pig bucket bucket liquid exactly one bucket poisonous figure one poisonous feed number poor pig liquid see whether die unfortunately minutestotest minute determine bucket poisonous feed pig according step choose live pig feed pig choose bucket feed pig consume chosen bucket simultaneously take time pig feed number bucket bucket fed number pig wait minutestodie minute may feed pig time minutestodie minute passed pig fed poisonous bucket die others survive repeat process run time bucket minutestodie minutestotest minimum number pig needed figure bucket poisonous within allotted time
find shortest superstring array string word smallest string contains string word substring multiple valid string smallest length may assume string word substring another string word
valid permutation di sequence string length n^10 either mean decreasing mean increasing permutation perm n^10 1^10 integer integer range 0^10 n^10 called valid permutation valid perm perm 1^10 andif perm perm 1^10 number valid permutation perm answer may large modulo 109 7^10
shortest common supersequence two string str1 str2 shortest string str1 str2 subsequence multiple valid string string subsequence string deleting number character possibly 0^10 result string
array element equal average neighbor 0^10 indexed array nums distinct integer want rearrange element array every element rearranged array equal average neighbor formally rearranged array property every range 1^10 nums length 1^10 nums 1^10 nums 1^10 2^10 equal nums rearrangement nums meet requirement
number consecutive difference two integer n^10 k^10 array integer length n^10 difference every two consecutive digit k^10 may answer order note integer leading zero integer 02 043 allowed^10
find kth^10 bit nth binary string two positive integer n^10 k^10 binary string sn formed follows s1 0^10 si si 1^10 1^10 reverse invert si 1^10 1where denotes concatenation operation reverse x return reversed string x invert x inverts bit x 0^10 change 1^10 1^10 change 0^10 example first four string sequence s1 0^10 s2 011 s3 0111001 s4 011100110110001 kth^10 bit sn guaranteed k^10 valid n^10
top k^10 frequent word array string word integer k^10 k^10 frequent string answer sorted frequency highest lowest sort word frequency lexicographical order
contiguous array binary array nums maximum length contiguous subarray equal number 0^10 1^10
buddy string two string goal true swap two letter result equal goal otherwise false swapping letter defined taking two index j 0^10 indexed j swapping character j example swapping index 0^10 2^10 abcd result cbad
predict winner integer array nums two player playing game array player 1^10 player 2^10 player 1^10 player 2^10 take turn player 1^10 starting first player start game score 0^10 turn player take one number either end array e nums 0^10 nums nums length 1^10 reduces size array 1^10 player add chosen number score game end element array true player 1^10 win game score player equal player 1^10 still winner also true may assume player playing optimally
check whether two string almost equivalent two string word1 word2 considered almost equivalent difference frequency letter z word1 word2 3^10 two string word1 word2 length n^10 true word1 word2 almost equivalent false otherwise frequency letter x number time occurs string
additive number additive number string whose digit form additive sequence valid additive sequence contain least three number except first two number subsequent number sequence must sum preceding two string containing digit true additive number false otherwise note number additive sequence cannot leading zero sequence 1^10 2^10 03 1^10 02 3^10 invalid
projection area 3d shape n^10 x n^10 grid place 1^10 x 1^10 x 1^10 cube axis aligned x z ax value v grid j represents tower v cube placed top cell j view projection cube onto xy yz zx plane projection like shadow map 3^10 dimensional figure 2^10 dimensional plane viewing shadow looking cube top front side total area three projection
max consecutive one binary array nums maximum number consecutive 1^10 array
total hamming distance hamming distance two integer number position corresponding bit different integer array nums sum hamming distance pair integer nums
remove trailing zero string positive integer num represented string integer num without^10 trailing zero string
adding two negabinary number two number arr1 arr2 base 2^10 result adding together number array format array 0^10 1^10 significant bit least significant bit example arr 1^10 1^10 0^10 1^10 represents number 2^10 3^10 2^10 2^10 2^10 0^10 3^10 number arr array format also guaranteed leading zero either arr 0^10 arr 0^10 1^10 result adding arr1 arr2 format array 0^10 1^10 leading zero
minimum operation make array k^10 increasing 0^10 indexed array arr consisting n^10 positive integer positive integer k^10 array arr called k^10 increasing arr k^10 arr hold every index k^10 n^10 1^10 example arr 4 1^10 5^10 2^10 6 2^10 k^10 increasing k^10 2^10 arr 0^10 arr 2^10 4 5^10 arr 1^10 arr 3^10 1^10 2^10 arr 2^10 arr 4 5^10 6 arr 3^10 arr 5^10 2^10 2^10 however arr k^10 increasing k^10 1^10 arr 0^10 arr 1^10 k^10 3^10 arr 0^10 arr 3^10 one operation choose index change arr positive integer minimum number operation required make array k^10 increasing k^10
k^10 th symbol grammar build table n^10 row 1^10 indexed start writing 0^10 1st row every subsequent row look previous row replace occurrence 0^10 01^10 occurrence 1^10 10^10 example n^10 3^10 1st row 0^10 2nd row 01^10 3rd row 0110 two integer n^10 k^10 kth^10 1^10 indexed symbol nth row table n^10 row
human traffic stadium sql schematable stadium column name type id int visit_date date people int visit_date primary key table row table contains visit date visit id stadium number people visit two row visit_date id increase date increase write sql query display record three row consecutive id number people greater equal 100 result table ordered visit_date ascending order query result format following example
unique path iii x n^10 integer array grid grid j could 1^10 representing starting square exactly one starting square 2^10 representing ending square exactly one ending square 0^10 representing empty square walk 1^10 representing obstacle cannot walk number 4 directional walk starting square ending square walk every non obstacle square exactly
reverse letter string reverse string according following rule character english letter remain position english letter lowercase uppercase reversed reversing
stone game viii alice bob take turn playing game alice starting first n^10 stone arranged row player turn number stone one following choose integer x 1^10 remove leftmost x stone row add sum removed stone value player score place new stone whose value equal sum left side row game stop one stone left row score difference alice bob alice score bob score alice goal maximize score difference bob goal minimize score difference integer array stone length n^10 stone represents value ith stone left score difference alice bob play optimally
sum subset xor total xor total array defined bitwise xor element 0^10 array empty example xor total array 2^10 5^10 6 2^10 xor 5^10 xor 6 1^10 array nums sum xor total every subset nums note subset element counted multiple time array subset array b^10 obtained b^10 deleting possibly zero element b^10
subsequence minimum score two string allowed^10 remove number character string score string 0^10 character removed string otherwise let left minimum index among removed character let right maximum index among removed character score string right left 1^10 minimum possible score make subsequence subsequence string new string formed original string deleting none character without^10 disturbing relative position remaining character e ace subsequence abcde aec
three equal part array arr consists zero one divide array three non empty part part represent binary value possible j 1^10 j arr 0^10 arr 1^10 arr first part arr 1^10 arr 2^10 arr j 1^10 second part andarr j arr j 1^10 arr arr length 1^10 third part three part equal binary value possible 1^10 1^10 note entire part used considering binary value represents example 1^10 1^10 0^10 represents 6 decimal 3^10 also leading zero allowed^10 0^10 1^10 1^10 1^10 1^10 represent value
maximum total beauty garden alice caretaker n^10 garden want plant flower maximize total beauty garden 0^10 indexed integer array flower size n^10 flower number flower already planted ith garden flower already planted cannot removed another integer newflowers maximum number flower alice additionally plant also integer target full partial garden considered complete least target flower total beauty garden determined sum following number complete garden multiplied full minimum number flower incomplete garden multiplied partial incomplete garden value 0^10 maximum total beauty alice obtain planting newflowers flower
mouse cheese two mouse n^10 different type cheese type cheese eaten exactly one mouse point cheese index 0^10 indexed reward1 first mouse eats reward2 second mouse eats positive integer array reward1 positive integer array reward2 non negative integer k^10 maximum point mouse achieve first mouse eats exactly k^10 type cheese
n^10 queen ii n^10 queen puzzle problem placing n^10 queen n^10 x n^10 chessboard two queen attack integer n^10 number distinct solution n^10 queen puzzle
number good path tree e connected undirected graph cycle consisting n^10 node numbered 0^10 n^10 1^10 exactly n^10 1^10 edge 0^10 indexed integer array vals length n^10 vals denotes value ith node also 2d integer array edge edge ai bi denotes exists undirected edge connecting node ai bi good path simple path satisfies following condition starting node ending node value node starting node ending node value le equal starting node e starting node value maximum value along path number distinct good path note path reverse counted path example 0^10 1^10 considered 1^10 0^10 single node also considered valid path
find center star graph undirected star graph consisting n^10 node labeled 1^10 n^10 star graph graph one center node exactly n^10 1^10 edge connect center node every node 2d integer array edge edge ui vi indicates edge node ui vi center star graph
minimum cost tree leaf value array arr positive integer consider binary tree node either 0^10 2^10 child value arr correspond value leaf order traversal tree value non leaf node equal product largest leaf value left right subtree respectively among possible binary tree considered smallest possible sum value non leaf node guaranteed sum fit 32 bit integer node leaf zero child
nth magical number positive integer magical divisible either b^10 three integer n^10 b^10 nth magical number answer may large modulo 109 7^10
insert binary search tree root node binary search tree bst value insert tree root node bst insertion guaranteed new value exist original bst notice may exist multiple valid way insertion long tree remains bst insertion
subset ii integer array nums may contain duplicate possiblesubsets power set solution set must contain duplicate subset solution order
sort even odd index independently 0^10 indexed integer array nums rearrange value nums according following rule sort value odd index nums non increasing order example nums 4 1^10 2^10 3^10 step becomes 4 3^10 2^10 1^10 value odd index 1^10 3^10 sorted non increasing order sort value even index nums non decreasing order example nums 4 1^10 2^10 3^10 step becomes 2^10 1^10 4 3^10 value even index 0^10 2^10 sorted non decreasing order array formed rearranging value nums
replace word english concept called root followed word form another longer word let call word successor example root followed successor word form new word another dictionary consisting many root sentence consisting word separated space replace successor sentence root forming successor replaced one root replace root shortest length sentence replacement
shortest subarray sum least k^10 integer array nums integer k^10 length shortest non empty subarray nums sum least k^10 subarray 1^10 subarray contiguous part array
maximum earnings taxi n^10 point road driving taxi n^10 point road labeled 1^10 n^10 direction going want drive point 1^10 point n^10 make money picking passenger cannot change direction taxi passenger represented 0^10 indexed 2d integer array ride ride starti endi tipi denotes ith passenger requesting ride point starti point endi willing give tipi dollar tip passenger pick earn endi starti tipi dollar may drive one passenger time n^10 ride maximum number dollar earn picking passenger optimally note may drop passenger pick different passenger point
find largest value tree row root binary tree array largest value row tree 0^10 indexed
find customer referee sql schematable customer column name type id int name varchar referee_id int id primary key column table row table indicates id customer name id customer referred write sql query report name customer referred customer id 2^10 result table order query result format following example
check straight line array coordinate coordinate x x represents coordinate point check point make straight line xy plane
similar string group two string x considered similar either identical make equivalent swapping two letter distinct position within string x example tar rat similar swapping position 0^10 2^10 rat art similar star similar tar rat art together form two connected group similarity tar rat art star notice tar art group even though similar formally group word group similar least one word group list strs string every string strs anagram every string strs many group
letter tile possibility n^10 tile tile one letter tile printed number possible non empty sequence letter make using^10 letter printed tile
rotting orange x n^10 grid cell one three value 0^10 representing empty cell 1^10 representing fresh orange or2 representing rotten orange every minute fresh orange 4 directionally adjacent rotten orange becomes rotten minimum number minute must elapse cell fresh orange impossible 1^10
remove comment c^10 program remove comment program source array string source source ith line source code represents result splitting original source code string newline character n^10 c^10 two type comment line comment block comment string denotes line comment represents rest character right line ignored string denotes block comment represents character next non overlapping occurrence ignored occurrence happen reading order line line left right clear string yet end block comment ending would overlapping beginning first effective comment take precedence others example string occurs block comment ignored similarly string occurs line block comment also ignored certain line code empty removing comment must output line string answer list non empty control character single quote double quote character example source string comment test case also nothing else defines macro interfere comment guaranteed every open block comment eventually closed outside line block comment always start new comment finally implicit newline character deleted block comment please see example detail removing comment source code source code format
minimum change make alternating binary string string consisting character 0^10 1^10 one operation change 0^10 1^10 vice versa string called alternating two adjacent character equal example string 010 alternating string 0100 minimum number operation needed make alternating
incremental memory leak two integer memory1 memory2 representing available memory bit two memory stick currently faulty program running consumes increasing amount memory every second ith second starting 1^10 bit memory allocated stick available memory first memory stick available memory neither stick least bit available memory program crash array containing crashtime memory1crash memory2crash crashtime time second program crashed memory1crash memory2crash available bit memory first second stick respectively
largest time digit array arr 4 digit find latest 24^10 hour time made using^10 digit exactly 24^10 hour time formatted hh mm hh 00 23 mm 00 59 earliest 24^10 hour time 00 00 latest 23 59 latest 24^10 hour time hh mm format valid time made empty string
number different integer string string word consists digit lowercase english letter replace every non digit character space example a123bc34d8ef34 become 123 34 8 34 notice left integer separated least one space 123 34 8 34 number different integer performing replacement operation word two integer considered different decimal representation without^10 leading zero different
maximum trailing zero cornered path 2d integer array grid size x n^10 cell contains positive integer cornered path defined set adjacent cell one turn specifically path exclusively move either horizontally vertically turn one without^10 returning previously visited cell turn path move exclusively alternate direction move vertically moved horizontally vice versa also without^10 returning previously visited cell product path defined product value path maximum number trailing zero product cornered path found grid note horizontal movement mean moving either left right direction vertical movement mean moving either direction
non overlapping interval array interval interval interval starti endi minimum number interval need remove make rest interval non overlapping
find array concatenation value 0^10 indexed integer array nums concatenation two number number formed concatenating numeral example concatenation 15 49 1549 concatenation value nums initially equal 0^10 perform operation nums becomes empty exists one number nums pick first element last element nums respectively add value concatenation concatenation value nums delete first last element nums one element exists add value concatenation value nums delete concatenation value nums
find distinct difference array 0^10 indexed array nums length n^10 distinct difference array nums array diff length n^10 diff equal number distinct element suffix nums 1^10 n^10 1^10 subtracted number distinct element prefix nums 0^10 distinct difference array nums note nums j denotes subarray nums starting index ending index j inclusive particularly j nums j denotes empty subarray
maximum total importance road integer n^10 denoting number city country city numbered 0^10 n^10 1^10 also 2d integer array road road ai bi denotes exists bidirectional road connecting city ai bi need assign city integer value 1^10 n^10 value used importance road defined sum value two city connects maximum total importance road possible assigning value optimally
range sum query mutable integer array nums handle multiple query following type update value element nums calculate sum element nums index left right inclusive left right implement numarray class numarray int nums initializes object integer array nums void update int index int val update value nums index val int sumrange int left int right return sum element nums index left right inclusive e nums left nums left 1^10 nums right
decrease element make array zigzag array nums integer move consists choosing element decreasing 1^10 array zigzag array either every even indexed element greater adjacent element ie 0^10 1^10 2^10 3^10 4 every odd indexed element greater adjacent element ie 0^10 1^10 2^10 3^10 4 minimum number move transform array nums zigzag array
recover binary search tree root binary search tree bst value exactly two node tree swapped mistake recover tree without^10 changing structure
primary department employee sql schematable employee column name type employee_id int department_id int primary_flag varchar employee_id department_id primary key table employee_id id employee department_id id department employee belongs primary_flag enum type n^10 flag department primary department employee flag n^10 department primary employee belong multiple department employee join department need decide department primary department note employee belongs one department primary column n^10 write sql query report employee primary department employee belong one department report department result table order query result format following example
convert integer sum two zero integer zero integer positive integer contain 0^10 decimal representation integer n^10 list two integer b^10 b^10 zero integer b^10 nthe test case generated least one valid solution many valid solution
construct quad tree n^10 n^10 matrix grid 0^10 1^10 want represent grid quad tree root quad tree representing grid quad tree tree data structure internal node exactly four child besides node two attribute val true node represents grid 1^10 false node represents grid 0^10 notice assign val true false isleaf false accepted answer isleaf true node leaf node tree false node four child class node public boolean val public boolean isleaf public node topleft public node topright public node bottomleft public node bottomright construct quad tree two dimensional area using^10 following step current grid value e 1^10 0^10 set isleaf true set val value grid set four child null stop current grid different value set isleaf false set val value divide current grid four sub grid shown photo recurse child proper sub grid want know quad tree refer wiki quad tree format need read section solving problem want understand output format output represents serialized format quad tree using^10 level order traversal null signifies path terminator node exists similar serialization binary tree difference node represented list isleaf val value isleaf val true represent 1^10 list isleaf val value isleaf val false represent 0^10
count prefix string string array word string word comprise lowercase english letter number string word prefix prefix string substring occurs beginning string substring contiguous sequence character within string
max chunk make sorted integer array arr length n^10 represents permutation integer range 0^10 n^10 1^10 split arr number chunk e partition individually sort chunk concatenating result equal sorted array largest number chunk make sort array
lower case string string replacing every uppercase letter lowercase letter
self crossing array integer distance start point 0^10 0^10 x plane move distance 0^10 meter north distance 1^10 meter west distance 2^10 meter south distance 3^10 meter east word move direction change counter clockwise true path cross false
kth^10 ancestor tree node tree n^10 node numbered 0^10 n^10 1^10 form parent array parent parent parent ith node root tree node 0^10 find kth^10 ancestor node kth^10 ancestor tree node kth^10 node path node root node implement treeancestor class treeancestor int n^10 int parent initializes object number node tree parent array int getkthancestor int node int k^10 kth^10 ancestor node node ancestor 1^10
check array formation concatenation array distinct integer arr array integer array piece integer piece distinct goal form arr concatenating array piece order however allowed^10 reorder integer array piece true possible form array arr piece otherwise false
maximum number pair array 0^10 indexed integer array nums one operation may following choose two integer nums equal remove integer nums forming pair operation done nums many time possible 0^10 indexed integer array answer size 2^10 answer 0^10 number pair formed answer 1^10 number leftover integer nums operation many time possible
increasing decreasing string string reorder string using^10 following algorithm pick smallest character append result pick smallest character greater last appended character result append repeat step 2^10 cannot pick character pick largest character append result pick largest character smaller last appended character result append repeat step 5^10 cannot pick character repeat step 1^10 6 pick character step smallest largest character appears choose occurrence append result result string sorting algorithm
minimum number vertex reach node directed acyclic graph n^10 vertex numbered 0^10 n^10 1^10 array edge edge fromi toi represents directed edge node fromi node toi find smallest set vertex node graph reachable guaranteed unique solution exists notice vertex order
transform chessboard n^10 x n^10 binary grid board move swap two row two column minimum number move transform board chessboard board task impossible 1^10 chessboard board board 0^10 1^10 4 directionally adjacent
distinct subsequence ii string number distinct non empty subsequence answer may large modulo 109 7^10 subsequence string new string formed original string deleting none character without^10 disturbing relative position remaining character e ace subsequence abcde aec
display table food order restaurant array order represents order customer done restaurant specifically order customernamei tablenumberi fooditemi customernamei name customer tablenumberi table customer sit fooditemi item customer order restaurant “ display table ” “ display table ” table whose row entry denote many food item table ordered first column table number remaining column correspond food item alphabetical order first row header whose first column “ table ” followed name food item note customer name part table additionally row sorted numerically increasing order
equal row column pair 0^10 indexed n^10 x n^10 integer matrix grid number pair ri cj row ri column cj equal row column pair considered equal contain element order e equal array
corporate flight booking n^10 flight labeled 1^10 n^10 array flight booking booking booking firsti lasti seatsi represents booking flight firsti lasti inclusive seatsi seat reserved flight range array answer length n^10 answer total number seat reserved flight
combination two integer n^10 k^10 possible combination k^10 number chosen range 1^10 n^10 may answer order
wildcard matching input string pattern p implement wildcard pattern matching support match single character match sequence character including empty sequence matching cover entire input string partial
minimum operation make array element equal array nums consisting positive integer also integer array query size ith query want make element nums equal query perform following operation array number time increase decrease element array 1^10 array answer size answer minimum number operation make element nums equal query note query array reset original state
rearrange character make target string two 0^10 indexed string target take letter rearrange form new string maximum number copy target formed taking letter rearranging
maximum number non overlapping substring string lowercase letter need find maximum number non empty substring following condition substring overlap two substring j x either j x true substring contains certain character c^10 must also contain occurrence c^10 find maximum number substring condition multiple solution number substring one minimum total length shown exists unique solution minimum total length notice substring order
goal parser interpretation goal parser interpret string command command consists alphabet g al order goal parser interpret g string g string al string al interpreted string concatenated original order string command goal parser interpretation command
valid phone number text file file txt contains list phone number one per^10 line write one liner bash script print valid phone number may assume valid phone number must appear one following two format xxx xxx xxxx xxx xxx xxxx x mean digit may also assume line text file must contain leading trailing white space
sum score built string building string length n^10 one character time prepending new character front string string labeled 1^10 n^10 string length labeled si example abaca s1 s2 ca s3 aca etc score si length longest common prefix si sn note sn final string sum score every si
word break string dictionary string worddict true segmented space separated sequence one dictionary word note word dictionary may reused multiple time segmentation
longest nice subarray array nums consisting positive integer call subarray nums nice bitwise every pair element different position subarray equal 0^10 length longest nice subarray subarray contiguous part array note subarrays length 1^10 always considered nice
minimum penalty shop customer visit log shop represented 0^10 indexed string customer consisting character n^10 ith character mean customer come ith hourwhereas n^10 indicates customer come ith hour shop close jth hour 0^10 j n^10 penalty calculated follows every hour shop open customer come penalty increase 1^10 every hour shop closed customer come penalty increase 1^10 earliest hour shop must closed incur minimum penalty note shop close jth hour mean shop closed hour j
least number unique integer k^10 removal array integer arr integer k^10 find least number unique integer removing exactly k^10 element
longest substring least k^10 repeating character string integer k^10 length longest substring frequency character substring greater equal k^10
count pair node undirected graph defined integer n^10 number node 2d integer array edge edge graph edge ui vi indicates undirected edge ui vi also integer array query let incident b^10 defined number edge connected either node b^10 answer jth query number pair node b^10 satisfy following condition bincident b^10 query j array answer answer length query length answer j answer jth query note multiple edge two node
tiling rectangle fewest square rectangle size n^10 x minimum number integer sided square tile rectangle
n^10 ary tree level order traversal n^10 ary tree level order traversal node value nary tree input serialization represented level order traversal group child separated null value see example
find element contaminated binary tree binary tree following rule root val 0if treenode val x treenode left null treenode left val 2^10 x 1if treenode val x treenode right null treenode right val 2^10 x 2now binary tree contaminated mean treenode val changed 1^10 implement findelements class findelements treenode root initializes object contaminated binary tree recovers bool find int target return true target value exists recovered binary tree
boring movie sql schematable cinema column name type id int movie varchar description varchar rating float id primary key table row contains information name movie genre rating rating 2^10 decimal place float range 0^10 10^10 write sql query report movie odd numbered id description boring result table ordered rating descending order query result format following example
search 2d matrix x n^10 integer matrix matrix following two property row sorted non decreasing order first integer row greater last integer previous row integer target true target matrix false otherwise must write solution log n^10 time complexity
2^10 key keyboard one character screen notepad perform one two operation notepad step copy copy character present screen partial copy allowed^10 paste paste character copied last time integer n^10 minimum number operation get character exactly n^10 time screen
design bitset bitset data structure compactly store bit implement bitset class bitset int size initializes bitset size bit 0^10 void fix int idx update value bit index idx 1^10 value already 1^10 change occurs void unfix int idx update value bit index idx 0^10 value already 0^10 change occurs void flip flip value bit bitset word bit value 0^10 value 1^10 vice versa boolean check value bit bitset 1^10 return true satisfies condition false otherwise boolean one check least one bit bitset value 1^10 return true satisfies condition false otherwise int count return total number bit bitset value 1^10 string tostring return current composition bitset note resultant string character ith index coincide value ith bit bitset
kth^10 missing positive number array arr positive integer sorted strictly increasing order integer k^10 kth^10 positive integer missing array
perfect number perfect number positive integer equal sum positive divisor excluding number divisor integer x integer divide x evenly integer n^10 true n^10 perfect number otherwise false
stone removed row column 2d plane place n^10 stone integer coordinate point coordinate point may one stone stone removed share either row column another stone removed array stone length n^10 stone xi yi represents location ith stone largest possible number stone removed
lowest common ancestor binary tree binary tree find lowest common ancestor lca two node tree according definition lca wikipedia “ lowest common ancestor defined two node p q lowest node p q descendant allow node descendant ”
maximum number eaten apple special kind apple tree grows apple every day n^10 day ith day tree grows apple apple rot day day day day apple rotten cannot eaten day apple tree grow apple denoted apple 0^10 day 0^10 decided eat one apple day keep doctor away note keep eating first n^10 day two integer array day apple length n^10 maximum number apple eat
find xor sum pair bitwise xor sum list bitwise xor element list contains one element xor sum equal element example xor sum 1^10 2^10 3^10 4 equal 1^10 xor 2^10 xor 3^10 xor 4 4 xor sum 3^10 equal 3^10 two 0^10 indexed array arr1 arr2 consist non negative integer consider list containing result arr1 arr2 j bitwise every j pair 0^10 arr1 length 0^10 j arr2 length xor sum aforementioned list
longest word dictionary array string word representing english dictionary longest word word built one character time word word one possible answer longest word smallest lexicographical order answer empty string note word built left right additional character added end previous word
longest cycle graph directed graph n^10 node numbered 0^10 n^10 1^10 node one outgoing edge graph represented 0^10 indexed array edge size n^10 indicating directed edge node node edge outgoing edge node edge 1^10 length longest cycle graph cycle exists 1^10 cycle path start end node
reverse substring pair parenthesis string consists lower case english letter bracket reverse string pair matching parenthesis starting innermost one result contain bracket
third maximum number integer array nums third distinct maximum number array third maximum exist maximum number
number way split array 0^10 indexed integer array nums length n^10 nums contains valid split index following true sum first 1^10 element greater equal sum last n^10 1^10 element least one element right 0^10 n^10 1^10 number valid split nums
check array pair divisible k^10 array integer arr even length n^10 integer k^10 want divide array exactly n^10 2^10 pair sum pair divisible k^10 true find way false otherwise
excel sheet column title integer columnnumber corresponding column title appears excel sheet example 1b 2c 3^10 z 26aa 27ab 28
subarray product le k^10 array integer nums integer k^10 number contiguous subarrays product element subarray strictly le k^10
create component value undirected tree n^10 node labeled 0^10 n^10 1^10 0^10 indexed integer array nums length n^10 nums represents value ith node also 2d integer array edge length n^10 1^10 edge ai bi indicates edge node ai bi tree allowed^10 delete edge splitting tree multiple connected component let value component sum nums node component maximum number edge delete every connected component tree value
one zero array binary string strs two integer n^10 size largest subset strs 0^10 n^10 1^10 subset set x subset set element x also element
maximum sum circular subarray circular integer array nums length n^10 maximum possible sum non empty subarray nums circular array mean end array connects beginning array formally next element nums nums 1^10 n^10 previous element nums nums 1^10 n^10 n^10 subarray may include element fixed buffer nums formally subarray nums nums 1^10 nums j exist k1 k2 j k1 n^10 k2 n^10
count nice pair array array nums consists non negative integer let u define rev x reverse non negative integer x example rev 123 321 rev 120 21^10 pair index j nice satisfies following condition 0^10 j nums lengthnums rev nums j nums j rev nums number nice pair index number large modulo 109 7^10
number substring containing three character string consisting character b^10 c^10 number substring containing least one occurrence character b^10 c^10
manager least 5^10 direct report sql schematable employee column name type id int name varchar department varchar managerid int id primary key column table row table indicates name employee department id manager managerid null employee manager employee manager themself write sql query report manager least five direct report result table order query result format following example
minimum string length removing substring string consisting uppercase english letter apply operation string one operation remove occurrence one substring ab cd minimum possible length resulting string obtain note string concatenates removing substring could produce new ab cd substring
jump game vii 0^10 indexed binary string two integer minjump maxjump beginning standing index 0^10 equal 0^10 move index index j following condition fulfilled minjump j min maxjump length 1^10 ands j 0^10 true reach index length 1^10 false otherwise
count equal divisible pair array 0^10 indexed integer array nums length n^10 integer k^10 number pair j 0^10 j n^10 nums nums j j divisible k^10
minimum interval include query 2d integer array interval interval lefti righti describes ith interval starting lefti ending righti inclusive size interval defined number integer contains formally righti lefti 1^10 also integer array query answer jth query size smallest interval lefti query j righti interval exists answer 1^10 array containing answer query
maximum erasure value array positive integer nums want erase subarray containing unique element score get erasing subarray equal sum element maximum score get erasing exactly one subarray array b^10 called subarray form contiguous subsequence equal l l 1^10 l
3sum multiplicity integer array arr integer target number tuples j k^10 j k^10 arr arr j arr k^10 target answer large modulo 109 7^10
cheapest flight within k^10 stop n^10 city connected number flight array flight flight fromi toi pricei indicates flight city fromi city toi cost pricei also three integer src dst k^10 cheapest price src dst k^10 stop route 1^10
sum node even valued grandparent root binary tree sum value node even valued grandparent node even valued grandparent 0^10 grandparent node parent parent exists
sum multiple positive integer n^10 find sum integer range 1^10 n^10 inclusive divisible 3^10 5^10 7^10 integer denoting sum number range satisfying constraint
longest continuous subarray absolute diff le equal limit array integer nums integer limit size longest non empty subarray absolute difference two element subarray le equal limit
power hero 0^10 indexed integer array nums representing strength hero power group hero defined follows let i0 i1 ik index hero group power group max nums i0 nums i1 nums ik 2^10 min nums i0 nums i1 nums ik sum power non empty group hero possible sum could large modulo 109 7^10
sum mutated array closest target integer array arr target value target integer value change integer larger value array equal value sum array get close possible absolute difference target case tie minimum integer notice answer neccesarilly number arr
flip equivalent binary tree binary tree define flip operation follows choose node swap left right child subtrees binary tree x flip equivalent binary tree make x equal number flip operation root two binary tree root1 root2 true two tree flip equivalent false otherwise
minimize maximum difference pair 0^10 indexed integer array nums integer p find p pair index nums maximum difference amongst pair minimized also ensure index appears amongst p pair note pair element index j difference pair nums nums j x represents absolute value x minimum maximum difference among p pair define maximum empty set zero
longest repeating character replacement string integer k^10 choose character string change uppercase english character perform operation k^10 time length longest substring containing letter get performing operation
remove outermost parenthesis valid parenthesis string either empty b^10 b^10 valid parenthesis string represents string concatenation example valid parenthesis string valid parenthesis string primitive nonempty exist way split b^10 b^10 nonempty valid parenthesis string valid parenthesis string consider primitive decomposition p1 p2 pk pi primitive valid parenthesis string removing outermost parenthesis every primitive string primitive decomposition
sliding window median median middle value ordered integer list size list even middle value median mean two middle value example arr 2^10 3^10 4 median 3^10 example arr 1^10 2^10 3^10 4 median 2^10 3^10 2^10 2^10 5^10 integer array nums integer k^10 sliding window size k^10 moving left array right see k^10 number window time sliding window move right one position median array window original array answer within 10^10 5^10 actual value accepted
fix name table sql schematable user column name type user_id int name varchar user_id primary key table table contains id name user name consists lowercase uppercase character write sql query fix name first character uppercase rest lowercase result table ordered user_id query result format following example
sort list head linked list list sorting ascending order
calendar ii implementing program use calendar add new event adding event cause triple booking triple booking happens three event non empty intersection e moment common three event event represented pair integer start end represents booking half open interval start end range real number x start x end implement mycalendartwo class mycalendartwo initializes calendar object boolean book int start int end return true event added calendar successfully without^10 causing triple booking otherwise false add event calendar
second minimum node binary tree non empty special binary tree consisting node non negative value node tree exactly two zero sub node node two sub node node value smaller value among two sub node formally property root val min root left val root right val always hold binary tree need output second minimum value set made node value whole tree second minimum value exists output 1^10 instead
calculate special bonus sql schematable employee column name type employee_id int name varchar salary int employee_id primary key table row table indicates employee id employee name salary write sql query calculate bonus employee bonus employee 100 salary id employee odd number employee name start character bonus employee 0^10 otherwise result table ordered employee_id query result format following example
make cost path equal binary tree integer n^10 representing number node perfect binary tree consisting node numbered 1^10 n^10 root tree node 1^10 node tree two child left child node 2^10 right child 2^10 1^10 node tree also cost represented 0^10 indexed integer array cost size n^10 cost cost node 1^10 allowed^10 increment cost node 1^10 number time minimum number increment need make cost path root leaf node equal note perfect binary tree tree node except leaf node exactly 2^10 child cost path sum cost node path
simplify path string path absolute path starting slash file directory unix style file system convert simplified canonical path unix style file system period refers current directory double period refers directory level multiple consecutive slash e treated single slash problem format period treated file directory name canonical path following format path start single slash two directory separated single slash path end trailing path contains directory path root directory target file directory e period double period simplified canonical path
intersection two array two integer array nums1 nums2 array intersection element result must unique may result order
count vowel substring string substring contiguous non empty sequence character within string vowel substring substring consists vowel e u five vowel present string word number vowel substring word
minimum operation make uni value grid 2d integer grid size x n^10 integer x one operation add x subtract x element grid uni value grid grid element equal minimum number operation make grid uni value possible 1^10
open lock lock front 4 circular wheel wheel 10^10 slot 0^10 1^10 2^10 3^10 4 5^10 6 7^10 8 9 wheel rotate freely wrap around example turn 9 0^10 0^10 9 move consists turning one wheel one slot lock initially start 0000 string representing state 4 wheel list deadends dead end meaning lock display code wheel lock stop turning unable open target representing value wheel unlock lock minimum total number turn required open lock 1^10 impossible
shortest palindrome string convert apalindromeby adding character front shortest palindrome find performing transformation
number people aware secret day 1^10 one person discovers secret integer delay mean person share secret new person every day starting delay day discovering secret also integer forget mean person forget secret forget day discovering person cannot share secret day forgot day afterwards integer n^10 number people know secret end day n^10 answer may large modulo 109 7^10
minimum number visited cell grid 0^10 indexed x n^10 integer matrix grid initial position top left cell 0^10 0^10 starting cell j move one following cell cell k^10 j k^10 grid j j rightward movement orcells k^10 j k^10 grid j downward movement minimum number cell need visit reach bottom right cell 1^10 n^10 1^10 valid path 1^10
odd string difference array equal length string word assume length string n^10 string word converted difference integer array difference length n^10 1^10 difference j word j 1^10 word j 0^10 j n^10 2^10 note difference two letter difference position alphabet e position 0^10 b^10 1^10 z 25 example string acb difference integer array 2^10 0^10 1^10 2^10 2^10 1^10 string word difference integer array except one find string string word different difference integer array
largest sum average integer array nums integer k^10 partition array k^10 non empty adjacent subarrays score partition sum average subarray note partition must use every integer nums score necessarily integer maximum score achieve possible partition answer within 10^10 6 actual answer accepted
best sightseeing pair integer array value value represents value ith sightseeing spot two sightseeing spot j distance j score pair j sightseeing spot value value j j sum value sightseeing spot minus distance maximum score pair sightseeing spot
find three consecutive integer sum number integer num three consecutive integer sorted array sum num num cannot expressed sum three consecutive integer empty array
pair song total duration divisible 60^10 list song ith song duration time second number pair song total duration second divisible 60^10 formally want number index j j time time j 60^10 0^10
find greatest common divisor array integer array nums greatest common divisor smallest number largest number nums greatest common divisor two number largest positive integer evenly divide number
shuffle array integer array nums design algorithm randomly shuffle array permutation array equally likely result shuffling implement solution class solution int nums initializes object integer array nums int reset reset array original configuration return int shuffle return random shuffling array
fizz buzz integer n^10 string array answer 1^10 indexed answer fizzbuzz divisible 3^10 5^10 answer fizz divisible 3^10 answer buzz divisible 5^10 answer string none condition true
maximum binary tree ii maximum tree tree every node value greater value subtree root maximum binary tree integer val previous problem tree constructed list root construct recursively following construct routine empty null otherwise let largest element create root node value left child root construct 0^10 1^10 1^10 right child root construct 1^10 2^10 length 1^10 root note directly root node root construct suppose b^10 copy value val appended guaranteed b^10 unique value construct b^10
throne inheritance kingdom consists king child grandchild every someone family dy child born kingdom defined order inheritance consists king first member let define recursive function successor x curorder person x inheritance order far return next person x order inheritance successor x curorder x child x child curorder x king nullelse successor x parent curorder else x oldest child curorderfor example assume kingdom consists king child alice bob alice older bob finally alice son jack beginning curorder king calling successor king curorder alice append curorder get king alice calling successor alice curorder jack append curorder get king alice jack calling successor jack curorder bob append curorder get king alice jack bob calling successor bob curorder null thus order inheritance king alice jack bob using^10 function always obtain unique order inheritance implement throneinheritance class throneinheritance string kingname initializes object throneinheritance class name king part constructor void birth string parentname string childname indicates parentname gave birth childname void death string name indicates death name death person affect successor function current inheritance order treat marking person dead string getinheritanceorder return list representing current order inheritance excluding dead people
find kth^10 largest xor coordinate value 2d matrix size x n^10 consisting non negative integer also integer k^10 value coordinate b^10 matrix xor matrix j 0^10 0^10 j b^10 n^10 0^10 indexed find kth^10 largest value 1^10 indexed coordinate matrix
design linked list design implementation linked list choose use singly doubly linked list node singly linked list two attribute val next val value current node next pointer reference next node want use doubly linked list need one attribute prev indicate previous node linked list assume node linked list 0^10 indexed implement mylinkedlist class mylinkedlist initializes mylinkedlist object int get int index get value indexth node linked list index invalid 1^10 void addathead int val add node value val first element linked list insertion new node first node linked list void addattail int val append node value val last element linked list void addatindex int index int val add node value val indexth node linked list index equal length linked list node appended end linked list index greater length node inserted void deleteatindex int index delete indexth node linked list index valid
design ordered stream stream n^10 idkey value pair arriving arbitrary order idkey integer 1^10 n^10 value string two pair id design stream return value increasing order id returning chunk list value insertion concatenation chunk result list sorted value implement orderedstream class orderedstream int n^10 construct stream take n^10 value string insert int idkey string value insert pair idkey value stream return largest possible chunk currently inserted value appear next order
minimum number flip convert binary matrix zero matrix x n^10 binary matrix mat one step choose one cell flip four neighbor exist flip changing 1^10 0^10 0^10 1^10 pair cell called neighbor share one edge minimum number step required convert mat zero matrix 1^10 cannot binary matrix matrix cell equal 0^10 1^10 zero matrix matrix cell equal 0^10
minimum number flip make binary string alternating binary string allowed^10 perform two type operation string sequence type 1^10 remove character start string append end string type 2^10 pick character flip value e value 0^10 becomes 1^10 vice versa minimum number type 2^10 operation need perform becomes alternating string called alternating two adjacent character equal example string 010 1010 alternating string 0100
minimum time repair car integer array rank representing rank mechanic ranksi rank ith mechanic mechanic rank repair n^10 car n2 minute also integer car representing total number car waiting garage repaired minimum time taken repair car note mechanic repair car simultaneously
subarray element greater varying threshold integer array nums integer threshold find subarray nums length k^10 every element subarray greater threshold k^10 size subarray subarray 1^10 subarray contiguous non empty sequence element within array
destination city array path path cityai citybi mean exists direct path going cityai citybi destination city city without^10 path outgoing another city guaranteed graph path form line without^10 loop therefore exactly one destination city
build matrix condition positive integer k^10 also 2d integer array rowconditions size n^10 rowconditions abovei belowi anda 2d integer array colconditions size colconditions lefti righti two array contain integer 1^10 k^10 build k^10 x k^10 matrix contains number 1^10 k^10 exactly remaining cell value 0^10 matrix also satisfy following condition number abovei appear row strictly row number belowi appears 0^10 n^10 1^10 number lefti appear column strictly left column number righti appears 0^10 1^10 matrix satisfies condition answer exists empty matrix
find city smallest number neighbor threshold distance n^10 city numbered 0^10 n^10 1^10 array edge edge fromi toi weighti represents bidirectional weighted edge city fromi toi integer distancethreshold city smallest number city reachable path whose distance distancethreshold multiple city city greatest number notice distance path connecting city j equal sum edge weight along path
product sale analysis iii sql schematable sale column name type sale_id int product_id int year int quantity int price int sale_id year primary key table product_id foreign key product table row table show sale product product_id certain year note price per^10 unit table product column name type product_id int product_name varchar product_id primary key table row table indicates product name product write sql query selects product id year quantity price first year every product sold resulting table order query result format following example
minimum number k^10 consecutive bit flip binary array nums integer k^10 k^10 bit flip choosing subarray length k^10 nums simultaneously changing every 0^10 subarray 1^10 every 1^10 subarray 0^10 minimum number k^10 bit flip required 0^10 array possible 1^10 subarray contiguous part array
ugly number iii ugly number positive integer divisible b^10 c^10 four integer n^10 b^10 c^10 nth ugly number
maximum twin sum linked list linked list size n^10 n^10 even ith node 0^10 indexed linked list known twin n^10 1^10 th node 0^10 n^10 2^10 1^10 example n^10 4 node 0^10 twin node 3^10 node 1^10 twin node 2^10 node twin n^10 4 twin sum defined sum node twin head linked list even length maximum twin sum linked list
convert 1d^10 array 2d array 0^10 indexed 1^10 dimensional 1d^10 integer array original two integer n^10 tasked creating 2^10 dimensional 2d array row n^10 column using^10 element original element index 0^10 n^10 1^10 inclusive original form first row constructed 2d array element index n^10 2^10 n^10 1^10 inclusive form second row constructed 2d array x n^10 2d array constructed according procedure empty 2d array impossible
binary watch binary watch 4 led top represent hour 0^10 11 6 led bottom represent minute 0^10 59 led represents zero one least significant bit right example binary watch read 4 51 integer turnedon represents number led currently ignoring pm possible time watch could represent may answer order hour must contain leading zero example 01^10 00 valid 1^10 00 minute must consist two digit may contain leading zero example 10^10 2^10 valid 10^10 02
check two string array equivalent two string array word1 word2 true two array represent string false otherwise string represented array array element concatenated order form string
maximum non negative product matrix x n^10 matrix grid initially located top left corner 0^10 0^10 step move right matrix among possible path starting top left corner 0^10 0^10 ending bottom right corner 1^10 n^10 1^10 find path maximum non negative product product path product integer grid cell visited along path maximum non negative product modulo 109 7^10 maximum product negative 1^10 notice modulo performed getting maximum product
longest zigzag path binary tree root binary tree zigzag path binary tree defined follow choose node binary tree direction right left current direction right move right child current node otherwise move left child change direction right left left right repeat second third step move tree zigzag length defined number node visited 1^10 single node length 0^10 longest zigzag path contained tree
maximum score spliced array two 0^10 indexed integer array nums1 nums2 length n^10 choose two integer left right 0^10 left right n^10 swap subarray nums1 left right subarray nums2 left right example nums1 1^10 2^10 3^10 4 5^10 nums2 11 12 13 14 15 choose left 1^10 right 2^10 nums1 becomes 1^10 12 13 4 5^10 nums2 becomes 11 2^10 3^10 14 15 may choose apply mentioned operation anything score array maximum sum nums1 sum nums2 sum arr sum element array arr maximum possible score subarray contiguous sequence element within array arr left right denotes subarray contains element nums index left right inclusive
longest increasing subsequence ii integer array nums integer k^10 find longest subsequence nums meet following requirement subsequence strictly increasing andthe difference adjacent element subsequence k^10 length longest subsequence meet requirement subsequence array derived another array deleting element without^10 changing order remaining element
minimum move make array complementary integer array nums even length n^10 integer limit one move replace integer nums another integer 1^10 limit inclusive array nums complementary index 0^10 indexed nums nums n^10 1^10 equal number example array 1^10 2^10 3^10 4 complementary index nums nums n^10 1^10 5^10 minimum number move required make nums complementary
query kth^10 smallest trimmed number 0^10 indexed array string nums string equal length consists digit also 0^10 indexed 2d integer array query query ki trimi query need trim number nums rightmost trimi digit determine index kith smallest trimmed number nums two trimmed number equal number lower index considered smaller reset number nums original length array answer length query answer answer ith query note trim rightmost x digit mean keep removing leftmost digit x digit remain string nums may contain leading zero
consecutive number sum integer n^10 number way write n^10 sum consecutive positive integer
video stitching series video clip sporting event lasted time second video clip overlapping varying length video clip described array clip clip starti endi indicates ith clip started starti ended endi cut clip segment freely example clip 0^10 7^10 cut segment 0^10 1^10 1^10 3^10 3^10 7^10 minimum number clip needed cut clip segment cover entire sporting event 0^10 time task impossible 1^10
max chunk make sorted ii integer array arr split arr number chunk e partition individually sort chunk concatenating result equal sorted array largest number chunk make sort array
knight dialer chess knight unique movement may move two square vertically one square horizontally two square horizontally one square vertically forming shape l possible movement chess knight shown diagaram chess knight move indicated chess diagram chess knight phone pad shown knight stand numeric cell e blue cell integer n^10 many distinct phone number length n^10 dial allowed^10 place knight numeric cell initially perform n^10 1^10 jump dial number length n^10 jump valid knight jump answer may large answer modulo 109 7^10
gray code n^10 bit gray code sequence sequence 2n integer every integer inclusive range 0^10 2n 1^10 first integer 0^10 integer appears sequence binary representation every pair adjacent integer differs exactly one bit andthe binary representation first last integer differs exactly one bit integer n^10 valid n^10 bit gray code sequence
palindrome number integer x true x apalindrome false otherwise
h index ii array integer citation citation number citation researcher received ith paper citation sorted ascending order researcher h index according definition h index wikipedia h index defined maximum value h researcher published least h paper cited least h time must write algorithm run logarithmic time
filling bookcase shelf array book book thicknessi heighti indicates thickness height ith book also integer shelfwidth want place book order onto bookcase shelf total width shelfwidth choose book place shelf sum thickness le equal shelfwidth build another level shelf bookcase total height bookcase increased maximum height book put repeat process book place note step process order book place order sequence book example ordered list 5^10 book might place first second book onto first shelf third book second shelf fourth fifth book last shelf minimum possible height total bookshelf placing shelf manner
node distance k^10 binary tree root binary tree value target node target integer k^10 array value node distance k^10 target node answer order
subdomain visit count website domain discus leetcode com consists various subdomains top level com next level leetcode com lowest level discus leetcode com visit domain like discus leetcode com also visit parent domain leetcode com com implicitly count paired domain domain one two format rep d1 d2 d3 rep d1 d2 rep number visit domain d1 d2 d3 domain example 9001 discus leetcode com count paired domain indicates discus leetcode com visited 9001 time array count paired domain cpdomains array count paired domain subdomain input may answer order
path crossing string path path n^10 e w representing moving one unit north south east west respectively start origin 0^10 0^10 2d plane walk path specified path true path cross point time location previously visited false otherwise
online stock span design algorithm collect daily price quote stock return span stock price current day span stock price one day maximum number consecutive day starting day going backward stock price le equal price day example price stock last four day 7^10 2^10 1^10 2^10 price stock today 2^10 span today 4 starting today price stock le equal 2^10 4 consecutive day also price stock last four day 7^10 34 1^10 2^10 price stock today 8 span today 3^10 starting today price stock le equal 8 3^10 consecutive day implement stockspanner class stockspanner initializes object class int next int price return span stock price today price price
split minimum sum positive integer num split two non negative integer num1 num2 concatenation num1 num2 permutation num word sum number occurrence digit num1 num2 equal number occurrence digit num num1 num2 contain leading zero minimum possible sum num1 num2 note guaranteed num contain leading zero order occurrence digit num1 num2 may differ order occurrence num
minimum cost set cooking time generic microwave support cooking time least 1^10 second 99 minute 99 second set cooking time push four digit microwave normalizes push four digit prepending zero interprets first two digit minute last two digit second add cooking time example push 9 5^10 4 three digit normalized 0954 interpreted 9 minute 54 second push 0^10 0^10 0^10 8 four digit interpreted 0^10 minute 8 second push 8 0^10 9 0^10 interpreted 80 minute 90 second push 8 1^10 3^10 0^10 interpreted 81 minute 30^10 second integer startat movecost pushcost targetseconds initially finger digit startat moving finger specific digit cost movecost unit fatigue pushing digit finger cost pushcost unit fatigue multiple way set microwave cook targetseconds second interested way minimum cost minimum cost set targetseconds second cooking time remember one minute consists 60^10 second
redundant connection problem tree undirected graph connected cycle graph started tree n^10 node labeled 1^10 n^10 one additional edge added added edge two different vertex chosen 1^10 n^10 edge already existed graph represented array edge length n^10 edge ai bi indicates edge node ai bi graph edge removed resulting graph tree n^10 node multiple answer answer occurs last input
duplicate zero fixed length integer array arr duplicate occurrence zero shifting remaining element right note element beyond length original array written modification input array place anything
transpose matrix 2d integer array matrix transpose matrix transpose matrix matrix flipped main diagonal switching matrix row column index
check number sum power three integer n^10 true possible represent n^10 sum distinct power three otherwise false integer power three exists integer x 3x
k^10 strongest value array array integer arr integer k^10 value arr said stronger value arr j arr arr j median array arr arr j arr said stronger arr j arr arr j list strongest k^10 value array answer arbitrary order median middle value ordered integer list formally length list n^10 median element position n^10 1^10 2^10 sorted list 0^10 indexed arr 6 3^10 7^10 2^10 11 n^10 5^10 median obtained sorting array arr 3^10 2^10 6 7^10 11 median arr 5^10 1^10 2^10 2^10 median 6 arr 7^10 22 17 3^10 n^10 4 median obtained sorting array arr 7^10 3^10 17 22 median arr 4 1^10 2^10 1^10 median 3^10
island perimeter row x col grid representing map grid j 1^10 represents land grid j 0^10 represents water grid cell connected horizontally vertically diagonally grid completely surrounded water exactly one island e one connected land cell island lake meaning water inside connected water around island one cell square side length 1^10 grid rectangular width height exceed 100 determine perimeter island
monotonic array array monotonic either monotone increasing monotone decreasing array nums monotone increasing j nums nums j array nums monotone decreasing j nums nums j integer array nums true array monotonic false otherwise
maximum xor operation 0^10 indexed integer array nums one operation select non negative integer x index update nums equal nums nums xor x note bitwise operation xor bitwise xor operation maximum possible bitwise xor element nums applying operation number time
four divisor integer array nums sum divisor integer array exactly four divisor integer array 0^10
beautiful item query 2d integer array item item pricei beautyi denotes price beauty item respectively also 0^10 indexed integer array query query j want determine maximum beauty item whose price le equal query j item exists answer query 0^10 array answer length query answer j answer jth query
restore array adjacent pair integer array nums consists n^10 unique element forgotten however remember every pair adjacent element nums 2d integer array adjacentpairs size n^10 1^10 adjacentpairs ui vi indicates element ui vi adjacent nums guaranteed every adjacent pair element nums nums 1^10 exist adjacentpairs either nums nums 1^10 nums 1^10 nums pair appear order original array nums multiple solution
binary tree camera root binary tree install camera tree node camera node monitor parent immediate child minimum number camera needed monitor node tree
count asterisk string every two consecutive vertical bar grouped pair word 1st 2nd make pair 3rd 4th make pair forth number excluding pair note belong exactly one pair
maximal rectangle row x col binary matrix filled 0^10 1^10 find largest rectangle containing 1^10 area
deepest leaf sum root binary tree sum value deepest leaf
best team conflict manager basketball team upcoming tournament want choose team highest overall score score team sum score player team however basketball team allowed^10 conflict conflict exists younger player strictly higher score older player conflict occur player age two list score age score age represents score age ith player respectively highest overall score possible basketball team
special binary string special binary string binary string following two property number 0^10 equal number 1^10 every prefix binary string least many 1^10 0^10 special binary string move consists choosing two consecutive non empty special substring swapping two string consecutive last character first string exactly one index first character second string lexicographically largest resulting string possible applying mentioned operation string
super palindrome let say positive integer super palindrome palindrome also square palindrome two positive integer left right represented string number super palindrome integer inclusive range left right
decompress run length encoded list list nums integer representing list compressed run length encoding consider adjacent pair element freq val nums 2^10 nums 2^10 1^10 0^10 pair freq element value val concatenated sublist concatenate sublists left right generate decompressed list decompressed list
maximum path quality graph undirected graph n^10 node numbered 0^10 n^10 1^10 inclusive 0^10 indexed integer array value value value ith node also 0^10 indexed 2d integer array edge edge j uj vj timej indicates undirected edge node uj vj take timej second travel two node finally integer maxtime valid path graph path start node 0^10 end node 0^10 take maxtime second complete may visit node multiple time quality valid path sum value unique node visited path node value added sum maximum quality valid path note four edge connected node
decode xored permutation integer array perm permutation first n^10 positive integer n^10 always odd encoded another integer array encoded length n^10 1^10 encoded perm xor perm 1^10 example perm 1^10 3^10 2^10 encoded 2^10 1^10 encoded array original array perm guaranteed answer exists unique
decoded string index encoded string decode string tape encoded string read one character time following step taken character read letter letter written onto tape character read digit entire current tape repeatedly written 1^10 time total integer k^10 kth^10 letter 1^10 indexed decoded string
top traveller sql schematable user column name type id int name varchar id primary key table name name user table ride column name type id int user_id int distance int id primary key table user_id id user traveled distance distance write sql query report distance traveled user result table ordered travelled_distance descending order two user traveled distance order name ascending order query result format following example
maximum 0^10 indexed integer array nums length n^10 integer k^10 operation choose element multiply 2^10 maximum possible value nums 0^10 nums 1^10 nums n^10 1^10 obtained applying operation nums k^10 time note b^10 denotes bitwise two integer b^10
find peak element ii peak element 2d grid element strictly greater adjacent neighbor left right top bottom 0^10 indexed x n^10 matrix mat two adjacent cell equal find peak element mat j length 2^10 array j may assume entire matrix surrounded outer perimeter value 1^10 cell must write algorithm run log n^10 n^10 log time
minimum move convert string string consisting n^10 character either x move defined selecting three consecutive character converting note move applied character stay minimum number move required character converted
find duplicate subtrees root binary tree duplicate subtrees kind duplicate subtrees need root node one two tree duplicate structure node value
factorial trailing zero integer n^10 number trailing zero n^10 note n^10 n^10 n^10 1^10 n^10 2^10 3^10 2^10 1^10
string compression ii run length encoding string compression method work replacing consecutive identical character repeated 2^10 time concatenation character number marking count character length run example compress string aabccc replace aa a2 replace ccc c3 thus compressed string becomes a2bc3 notice problem adding 1^10 single character string integer k^10 need delete k^10 character run length encoded version minimum length find minimum length run length encoded version deleting k^10 character
design authentication manager authentication system work authentication token session user receive new authentication token expire timetolive second currenttime token renewed expiry time extended expire timetolive second potentially different currenttime implement authenticationmanager class authenticationmanager int timetolive construct authenticationmanager set timetolive generate string tokenid int currenttime generates new token tokenid currenttime second renew string tokenid int currenttime renews unexpired token tokenid currenttime second unexpired token tokenid request ignored nothing happens countunexpiredtokens int currenttime return number unexpired token currenttime note token expires time another action happens time renew countunexpiredtokens expiration take place action
tag validator string representing code snippet implement tag validator parse code whether valid code snippet valid following rule hold code must wrapped valid closed tag otherwise code invalid closed tag necessarily valid exactly following format tag_name tag_content tag_name among tag_name start tag tag_name end tag tag_name start end tag closed tag valid tag_name tag_content valid valid tag_name contain upper case letter length range 1^10 9 otherwise tag_name invalid valid tag_content may contain valid closed tag cdata character see note1 except unmatched unmatched start end tag unmatched closed tag invalid tag_name otherwise tag_content invalid start tag unmatched end tag exists tag_name vice versa however also need consider issue unbalanced tag nested unmatched cannot find subsequent find subsequent character next parsed tag_name necessarily valid cdata following format cdata cdata_content range cdata_content defined character cdata first subsequent cdata_content may contain character function cdata forbid validator parse cdata_content even character parsed tag matter valid invalid treat regular character
unique path ii x n^10 integer array grid robot initially located top left corner e grid 0^10 0^10 robot try move bottom right corner e grid 1^10 n^10 1^10 robot move either right point time obstacle space marked 1^10 0^10 respectively grid path robot take cannot include square obstacle number possible unique path robot take reach bottom right corner testcases generated answer le equal 2^10 109
total cost hire k^10 worker 0^10 indexed integer array cost cost cost hiring ith worker also two integer k^10 candidate want hire exactly k^10 worker according following rule run k^10 session hire exactly one worker session hiring session choose worker lowest cost either first candidate worker last candidate worker break tie smallest index example cost 3^10 2^10 7^10 7^10 1^10 2^10 candidate 2^10 first hiring session choose 4th worker lowest cost 3^10 2^10 7^10 7^10 1^10 2^10 second hiring session choose 1st worker lowest cost 4th worker smallest index 3^10 2^10 7^10 7^10 2^10 please note indexing may changed process fewer candidate worker remaining choose worker lowest cost among break tie smallest index worker chosen total cost hire exactly k^10 worker
unique binary search tree ii integer n^10 structurally unique bst binary search tree exactly n^10 node unique value 1^10 n^10 answer order
calculate money leetcode bank hercy want save money first car put money leetcode bank every day start putting 1^10 monday first day every day tuesday sunday put 1^10 day every subsequent monday put 1^10 previous monday n^10 total amount money leetcode bank end nth day
lexicographically smallest equivalent string two string length s1 s2 string basestr say s1 s2 equivalent character example s1 abc s2 cde c^10 b^10 c^10 e equivalent character follow usual rule equivalence relation reflexivity symmetry b^10 implies b^10 transitivity b^10 b^10 c^10 implies c^10 example equivalency information s1 abc s2 cde acd aab equivalent string basestr eed aab lexicographically smallest equivalent string basestr lexicographically smallest equivalent string basestr using^10 equivalency information s1 s2
partition array maximum sum integer array arr partition array contiguous subarrays length k^10 partitioning subarray value changed become maximum value subarray largest sum array partitioning test case generated answer fit 32 bit integer
building box cubic storeroom width length height room equal n^10 unit asked place n^10 box room box cube unit side length however rule placing box place box anywhere floor box x placed top box side four vertical side box must either adjacent another box wall integer n^10 minimum possible number box touching floor
implement trie prefix tree trie pronounced try prefix tree tree data structure used efficiently store retrieve key dataset string various application data structure autocomplete spellchecker implement trie class trie initializes trie object void insert string word insert string word trie boolean search string word return true string word trie e inserted false otherwise boolean startswith string prefix return true previously inserted string word prefix prefix false otherwise
