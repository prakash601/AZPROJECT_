You are given a binary string
S of length
N. You want to obtain a palindrome from
S by applying the following operation at most
⌊
⌊
2
N
⌋ times:
Choose an index
i(1≤i≤∣S∣), delete the character
S
i
from
S and concatenate the remaining parts of the string. Here
∣S∣ denotes the current length of string
S.
For example, if
S= 11010, then applying the operation on index
i=2 makes
S= 1010.
Note that after each operation, the length of the string
S decreases by one.
Find any palindrome you can obtain after the operations. It can be proved that it is always possible to obtain a palindrome from
S under the given constraints.
Here,
⌊
⌊
2
N
⌋ denotes floor division of the integer
N by
2. For example,
⌊
⌊
2
5
⌋=2,
⌊
⌊
2
8
⌋=4. A binary string is a string that consists of only the characters 0 and 1.
Input Format
The first line of input contains an integer
T, denoting the number of test cases. The
T test cases then follow:
The first line of each test case contains an integer
N, denoting the length of the binary string
S.
The second line of each test case contains the binary string
S.
Output Format
For each test case, print on a separate line any palindromic string that can be obtained from
S by applying the given operation at most
⌊
⌊
2
N
⌋ times.
Constraints
1≤T≤1000
1≤N≤100
S contains only the characters 0 and 1.
Sample 1:
Input
Output
4
3
101
3
001
4
1011
6
010011
101
00
111
1001
Explanation:
Test case
1: The given string is already a palindrome.
Test case
2: Applying the operation on index
i=3 makes
S= 00 which is a palindrome.
Test case
3: Applying the operation on index
i=2 makes
S= 111 which is a palindrome.
Test case
4: Applying the operation on index
i=1 makes
S= 10011. Then applying the operation on index
i=5 makes
S= 1001 which is a palindrome.