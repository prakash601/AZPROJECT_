Chef calls a sequence of integers
A
1
,A
2
,…,A
N
good if it satisfies the following conditions:
A
i
⊕A
i+1
>0 for all valid
i
A
i−1
⊕A
i
⊕A
i+1
=A
i
for all valid
i
In particular, any sequence with length
1 is good and any sequence of length
2 which satisfies the first condition is good.
Here,
⊕ denotes the bitwise XOR operation.
Chef gives you a sequence
A
1
,A
2
,…,A
N
. You may perform the following operation on the sequence any number of times (possibly
0): choose
3 pairwise distinct valid indices
a,
b and
c and change
A
c
to
A
a
⊕A
b
. Note that this means the operation can only be performed if
N≥3.
Chef is asking you to make the sequence good using at most
3⋅N operations or report that it is impossible. Note that you do not have to minimise the number of performed operations.
Input
The first line of the input contains a single integer
T denoting the number of test cases. The description of
T test cases follows.
The first line of each test case contains a single integer
N.
The second line contains
N space-separated integers
A
1
,A
2
,…,A
N
.
Output
For each test case:
If it is impossible to change the given sequence into a good sequence using at most
3⋅N operations, print a single line containing the integer
−1.
Otherwise, first, print a line containing a single integer
M (
0≤M≤3⋅N) ― the number of operations you want to perform.
Then, print
M lines describing these operations in the order in which you want to perform them. For each
i (
1≤i≤M), the
i-th of these lines should contain three space-separated integers
a
i
,
b
i
and
c
i
(pairwise distinct;
1≤a
i
,b
i
,c
i
≤N) ― the indices on which the
i-th operation is performed.
If there are multiple solutions, you may find any one of them.
Constraints
1≤T≤10
3
1≤N≤10
4
0≤A
i
<2
30
for each valid
i
the sum of
N over all test cases does not exceed
2⋅10
4
Example Input
4
1
69
3
1 2 3
3
1 3 1
2
10 10
Example Output
0
-1
4
1 3 2
2 1 3
3 2 1
1 3 2
-1
Explanation
Example case 1: The sequence is already good, so performing
0 operations is a valid solution.
Example case 2: The sequence cannot be made good using at most
3⋅N operations.
Example case 3: We can make the sequence good by performing the
4 operations shown on the output, in this order. Note that the initial sequence is also good, so performing
0 operations is also a valid solution.
Example case 4: The sequence does not satisfy the first condition and since
N=2, we cannot perform any operations on it.