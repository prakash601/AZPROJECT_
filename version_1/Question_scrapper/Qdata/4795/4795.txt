You are given a matrix of integers
A with
N rows (numbered
1 through
N) and
M columns (numbered
1 through
M). Each element of this matrix is either
0 or
1.
A move consists of the following steps:
Choose two different rows
r
1
and
r
2
or two different columns
c
1
and
c
2
.
Apply the bitwise OR operation with the second row/column on the first row/column. Formally, if you chose two rows, this means you should change
A
r
1
,k
to
A
r
1
,k
∨A
r
2
,k
for each
1≤k≤M; if you chose two columns, then you should change
A
to
A
∨A
for each
1≤k≤N.
For each element of the matrix, compute the minimum number of moves required to make it equal to
1 or determine that it is impossible. Note that these answers are independent, i.e. we are starting with the initial matrix for each of them.
Input
The first line of the input contains a single integer
T denoting the number of test cases. The description of
T test cases follows.
The first line of each test case contains two space-separated integers
N and
M.
N lines follow. For each
i (
1≤i≤N), the
i-th of these lines contains
M integers
A
i,1
,A
i,2
,…,A
i,M
NOT separated by spaces.
Output
For each test case, print
N lines. For each valid
i, the
i-th of these lines should contain
M space-separated integers; for each valid
j, the
j-th of these integers should be the minimum number of moves required to make
A
i,j
equal to
1, or
−1 if it is impossible.
###Constraints
1≤T≤100
1≤N,M≤1,000
A
i,j
∈{0,1} for each valid
i,j
the sum of
N⋅M for all test cases does not exceed
1,000,000
Sample 1:
Input
Output
1
3 3
010
000
001
1 0 1
2 1 1
1 1 0