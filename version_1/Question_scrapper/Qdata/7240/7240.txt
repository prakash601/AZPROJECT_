Let
S be a set of
N boolean variables
X
1
,X
2
,…,X
N
and their negations
¬X
1
,¬X
2
,…,¬X
N
. You are given the initial values of all variables.
A 2-CNF boolean expression is defined as a conjunction of clauses, where each clause is a disjunction of two elements of the set
S. Ada constructed a 2-CNF boolean expression
B with
M clauses as follows:
First, Ada painted each of the variables
X
1
,X
2
,…,X
N
with one colour ― either red or black.
Then, she painted the negated variables ― for each valid
i, if
X
i
is painted red, then
¬X
is painted black, and vice versa (if
X
is black,
¬X
is painted red).
Finally, she wrote the boolean expression
B=(P
1
∨Q
1
)∧(P
2
∨Q
2
)∧…∧(P
M
∨Q
M
), in such a way that no clause contains two variables with the same colour and
P
i

=¬Q
i
for each clause.
Ada wants the expression to evaluate to "true". In order to achieve that, she may change the values of variables; for each valid
i, the cost of changing the value of
X
i
(from "true" to "false" or vice versa) is
C
i
. Find the minimum total cost needed to make the expression
B evaluate to "true" or determine that it is impossible.
Note that you are not given the colours of variables, but it is guaranteed that the expression
B is chosen in such a way that there is at least one valid way to assign colours and the minimum cost is the same for each valid assignment of colours.
Input
The first line of the input contains a single integer
T denoting the number of test cases. The description of
T test cases follows.
The first line of each test case contains two space-separated integers
N and
M.
The second line contains a binary string
S with length
N describing the initial values of the variables. For each valid
i, the
i-th character of
S is '1' if
X
i
is true or '0' if
X
i
is false.
The third line contains
N space-separated integers
C
1
,C
2
,…,C
N
.
M lines follow. For each valid
i, the
i-th of these lines contains two space-separated integers
P
i
and
Q
i
. For each valid
i, the variable
X
i
is represented by the integer
i and its negation is represented by
−i.
Output
For each test case, print a single line containing one integer ― the minimum cost needed to make the boolean expression evaluate to "true", or
−1 if it is impossible.
Constraints
1≤T≤10
5
1≤N≤256
1≤C
i
≤256 for each valid
i
1≤∣P
i
∣,∣Q
i
∣≤N for each valid
i
each character of
S is either '0' or '1'
the sum of
M over all test cases does not exceed
43,210
Subtasks
Subtask #1 (1 points):
N≤10
Subtask #2 (99 points): original constraints
Sample 1:
Input
Output
1
3 3
101
1 2 3
-1 -2
-1 -3
2 1
3
Explanation:
Example case 1: The expression
B is
(¬X
1
∨¬X
2
)∧(¬X
1
∨¬X
3
)∧(X
2
∨X
1
). Ada generated this expression by painting
X
2
and
X
3
in red and
X
1
in black.
One optimal way to make the expression true is changing the value of
X
3
.