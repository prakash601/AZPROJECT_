Chef has a tree with
N nodes (numbered
1 through
N). Each node has a value; let's denote the value of node
i by
v
i
. Chef likes to travel in this tree. For each pair of nodes
(u,v), he defines the score of the path from
u to
v in the following way:
Suppose that the simple path from node
u to node
v is a sequence of nodes
u=a
0
,a
1
,…,a
L
=v, where
L is the length of this path.
Let's denote the values of the nodes on this path by a sequence
A
0
,A
1
,…,A
L
, where for each valid
i,
A
i
=v
a
i
.
Next, let's denote the suffix sums of the sequence
A by
S
0
,S
1
,…,S
L
, i.e. for each valid
i,
S
=∑
L
A
.
The score
f(u,v) of the path from node
u to node
v is the sum of all these suffix sums, i.e.
f(u,v)=∑
i=0
L
S
i
.
Chef wants to choose some nodes
u and
v (
u

=v) and travel along the simple path from
u to
v. However, he can treat it as several consecutive paths, which affects the score of the resulting trip. Specifically, if the simple path from node
u to node
v is a sequence of nodes
u=a
0
,a
1
,…,a
L
=v, then Chef may choose any non-negative integer
m and any sequence
k
1
,k
2
,…,k
m
such that
1≤k
1
<k
2
<…k
m
<L; then, the score of the trip from
u to
v is
f(u,a
k
1
)+f(a
k
1
,a
k
2
)+…+f(a
k
m
,v). Specifically, if
m=0, the score of the trip is simply
f(u,v).
Find the maximum possible score of Chef's trip if the nodes
u and
v (such that
u

=v) and the sequence
k are chosen optimally.
Input
The first line of the input contains a single integer
T denoting the number of test cases. The description of
T test cases follows.
The first line of each test case contains a single integer
N.
The second line contains
N space-separated integers
v
1
,v
2
,…,v
N
.
N−1 lines follow. Each of these lines contains two space-separated integers
a and
b denoting that nodes
a and
b are connected by an edge.
Output
For each test case, print a single line containing one integer ― the maximum possible score.
Constraints
1≤T≤100
2≤N≤3⋅10
5
∣val
i
∣≤10
5
for each valid
i
1≤a,b≤N
the graph described on the input is a tree
the sum of
N over all test cases does not exceed
3⋅10
5
Subtasks
Subtask #1 (50 points): the sum of
N over all test cases does not exceed
10
3
Subtask #2 (50 points): original constraints
Example Input
1
3
-10 2 4
1 2
1 3
Example Ouput
-2
Explanation
Example case 1: We have
f(1,2)=−6,
f(2,1)=−18,
f(1,3)=−2,
f(3,1)=−16,
f(2,3)=−6 and
f(3,2)=−10. A trip from node
2 to node
3 can be split into the paths
2→1→3 with score
−20, and a trip from node
3 to node
2 can be split into the paths
3→1→2 with score
−22. Each trip can also be treated as one path. The maximum score is
−2 for the trip from node
1 to node
3.