This is the hard version of the problem. The only difference between the two versions is the constraint on
m
. You can make hacks only if both versions of the problem are solved.
You are given an array
a
of length
n
and two integers
m
and
k
. Each element in
a
satisfies
1≤ai≤m
.
In one operation, you choose two indices
i
and
j
such that
1≤i<j≤|a|
, then append
gcd(ai,aj)
to the back of the array and delete
ai
and
aj
from the array. Note that the length of the array decreases by one after this operation.
Find the maximum possible sum of the array after performing exactly
k
operations.
Input
The first line contains a single integer
t
(
1≤t≤105
) — the number of test cases. The description of test cases follows.
The first line of each test case contains three integers
n
,
m
and
k
(
2≤n≤106
;
1≤m≤9⋅1018
;
1≤k≤n−1
).
The second line of each test case contains
n
integers
a1,a2,…,an
(
1≤ai≤m
).
It is guaranteed that the sum of
n
over all test cases does not exceed
106
.
Output
For each test case, output the maximum possible sum of the array after performing
k
operations optimally.
Example
input
Copy
4
3 8 1
4 7 8
5 114514 2
7 2 4 1 6
3 1919810 2
2 3 3
3 9000000000000000000 1
9000000000000000000 9000000000000000000 9000000000000000000
output
Copy
11
14
1
18000000000000000000
Note
In the first test case, the best way is to choose
i=1
,
j=3
in the first operation. The final sequence is
[7,4]
.