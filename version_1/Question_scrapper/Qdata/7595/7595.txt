You are given a tree with
N vertices numbered
1,2,…,N. First, you sort the adjacency lists of all the vertices and run depth first search from node
1. This gives you an array of dfs start times. Note that the start times are uniquely determined, as the adjacency list of each vertex is sorted. The following code represents the dfs:
    // let st denote the start times
    // let adj[x] be the adjacency list (the list of neighbors) of x
    int timer = 1;
    void dfs(int s, int p){
        st[s] = timer;
        timer++;
        // iterate over the neighbors in increasing order
        sort(adj[s].begin(), adj[s].end());
        for(int v: adj[s]) {
            if(v != p){
                dfs(v, s);
            }
        }
    }
The timer is initialized with
1 in the beginning, and you call dfs
(1,0) to compute all the start times. Let
st
v
denote the start time of
v.
Now, you have to process
Q queries.
Each query contains an integer
k and a list of disjoint intervals
[L
1
,R
1
],[L
2
,R
2
],…,[L
k
,R
k
], where
1≤L
i
≤R
i
≤N for all valid
i and
R
i
<L
i+1
for all valid
i. Let
S be the set of vertices whose start time lies in one of the intervals
[L
i
,R
i
]. Then, the answer for a query is the number of connected components in the graph, whose set of vertices is
S, and the edges are the edges of the tree with both endpoints in
S.
You are also given an integer
b in the beginning of the input, which is
0 if you can process the queries offline and
1 if you must process them online (see input description for more clarity).
Input Format
The first line contains
N,
Q and
b, the number of vertices, the number of queries and an integer denoting whether you must process the queries online.
Each of the next
N−1 lines contains two integers,
a and
b denoting the endpoints of an edge.
The following lines contain the queries. Each query contains 2 lines:
The first line of each query contains
k, the number of intervals
The second line contains
2k space separated integers,
L
1
′
,R
1
′
,L
2
′
,R
2
′
,…,L
k
′
,R
k
′
.
Let
x be the answer to the previous query (and
0 if this is the first query). Then,
L
i
=L
i
′
⊕(x⋅b),R
i
=R
i
′
⊕(x⋅b) for all valid
i, where
⊕ denotes the bitwise xor operator.
Output Format
For each query, print one line containing the number of connected components in the graph described in the problem statement.
Constraints
1≤N,Q≤5⋅10
5
b∈{0,1}
1≤k≤5⋅10
5
The sum of
k over all queries doesn't exceed
5⋅10
5
1≤L
i
≤R
i
≤N for all valid
i
R
i
<L
i+1
for all valid
i.
Subtasks
Subtask 1 (10 points):
1≤N≤2000,
The sum of
k over all queries doesn't exceed
2000
b=0
Subtask 2 (25 points):
1≤N≤10
5
,
The sum of
k over all queries doesn't exceed
10
5
b=0
Subtask 3 (30 points):
b=0
Subtask 4 (35 points):
b=1
Sample 1:
Input
Output
6 2 0
1 3
1 2
2 4
2 5
3 6
2
1 3 5 6
1
4 5
1
2
Explanation:
The tree is the following (with start times written inside brackets):
.
In the first query, the valid start times are
{1,2,3,5,6} and hence the set
S is
{1,2,3,4,6}, and this set forms a single connected component.
In the second query, the valid start times are
{4,5} and hence the set
S is
{3,5}, and this set forms two connected components.
Sample 2:
Input
Output
6 2 1
1 3
1 2
2 4
2 5
3 6
2
1 3 5 6
1
5 4
1
2
Explanation:
This is the same as the previous sample but with
b=1. Note that, for the second testcase
L
1
′
=5,R
1
′
=4,x=1, and hence
L
1
=5⊕1=4,R
1
=4⊕1=5.