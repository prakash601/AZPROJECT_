Chef has an array A of size N. His friend Chuwi playing with this array in a next way: he chooses a continuous subarray A[L..R] and finds the maximum of (A[M] - A[L]) * (A[R] - A[M]) over all values of M where L ≤ M ≤ R. Chef wants to hopple Chuwi and changes elements of his array sometimes. Please help Chuwi to solve this easy problem.
Input
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two positive integers N denoting the number of elements in Chef's array and Q denoting the number of operations performed by Chef and Chuwi. The second line contains N space-separated integers A1, A2, ..., AN denoting the Chef's array. Next Q contains three integers - type = 1 L R denoting that Chuwi takes subarray A[L..R] and finds the maximum of his function. type = 2 X Y denoting that Chef changes element A[X] by Y.
  Output
For every Chuwi's performed operation output the maximal value in a single line.
  Constraints
1 ≤ T ≤ 1000
1 ≤ N, Q ≤ 105
1 ≤ Ai, Y ≤ 109
1 ≤ L ≤ R ≤ N
1 ≤ X ≤ N
1 ≤ type ≤ 2
Sum of N over all test cases ≤ 2*105
Sum of Q over all test cases ≤ 2*105
Subtasks
Subtask #1: (20 points) sum of N over all test cases ≤ 5*103 and sum of Q over all test cases ≤ 5*103 and TL = 1 sec
Subtask #2: (30 points) 1 ≤ Ai, Y ≤ 102
Subtask #3: (50 points) Original constraints
  Sample 1:
Input
Output
1
4 3
2 1 4 3
1 1 4
2 2 3
1 1 3
0
1
Explanation:
Example case 1. For Chuwi's subarray [2, 1, 4, 3] there are 4 possible values of (A[M] - A[L]) * (A[R] - A[M]) - {0, -2, -2, 0} correspondingly, maximal value will be 0. After the second operation array will be [2, 3, 4, 3]. And for Chuwi's subarray [2, 3, 4] possible 3 values - {0, 1, 0}, hence answer is 1.