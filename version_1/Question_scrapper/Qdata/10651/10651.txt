Donghyun's new social network service (SNS) contains
n
users numbered
1,2,…,n
. Internally, their network is a tree graph, so there are
n−1
direct connections between each user. Each user can reach every other users by using some sequence of direct connections. From now on, we will denote this primary network as
T1
.
To prevent a possible server breakdown, Donghyun created a backup network
T2
, which also connects the same
n
users via a tree graph. If a system breaks down, exactly one edge
e∈T1
becomes unusable. In this case, Donghyun will protect the edge
e
by picking another edge
f∈T2
, and add it to the existing network. This new edge should make the network be connected again.
Donghyun wants to assign a replacement edge
f∈T2
for as many edges
e∈T1
as possible. However, since the backup network
T2
is fragile,
f∈T2
can be assigned as the replacement edge for at most one edge in
T1
. With this restriction, Donghyun wants to protect as many edges in
T1
as possible.
Formally, let
E(T)
be an edge set of the tree
T
. We consider a bipartite graph with two parts
E(T1)
and
E(T2)
. For
e∈E(T1),f∈E(T2)
, there is an edge connecting
{e,f}
if and only if graph
T1−{e}+{f}
is a tree. You should find a maximum matching in this bipartite graph.
Input
The first line contains an integer
n
(
2≤n≤250000
), the number of users.
In the next
n−1
lines, two integers
ai
,
bi
(
1≤ai,bi≤n
) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in
T1
.
In the next
n−1
lines, two integers
ci
,
di
(
1≤ci,di≤n
) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in
T2
.
It is guaranteed that both edge sets form a tree of size
n
.
Output
In the first line, print the number
m
(
0≤m<n
), the maximum number of edges that can be protected.
In the next
m
lines, print four integers
ai,bi,ci,di
. Those four numbers denote that the edge
(ai,bi)
in
T1
is will be replaced with an edge
(ci,di)
in
T2
.
All printed edges should belong to their respective network, and they should link to distinct edges in their respective network. If one removes an edge
(ai,bi)
from
T1
and adds edge
(ci,di)
from
T2
, the network should remain connected. The order of printing the edges or the order of vertices in each edge does not matter.
If there are several solutions, you can print any.
Examples
input
Copy
4
1 2
2 3
4 3
1 3
2 4
1 4
output
Copy
3
3 2 4 2
2 1 1 3
4 3 1 4
input
Copy
5
1 2
2 4
3 4
4 5
1 2
1 3
1 4
1 5
output
Copy
4
2 1 1 2
3 4 1 3
4 2 1 4
5 4 1 5
input
Copy
9
7 9
2 8
2 1
7 5
4 7
2 4
9 6
3 9
1 8
4 8
2 9
9 5
7 6
1 3
4 6
5 3
output
Copy
8
4 2 9 2
9 7 6 7
5 7 5 9
6 9 4 6
8 2 8 4
3 9 3 5
2 1 1 8
7 4 1 3