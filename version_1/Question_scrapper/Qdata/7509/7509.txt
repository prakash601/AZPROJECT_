This problem is similar to the problem "STRFLIP". The only difference between them is the number of moves allowed — in this problem, up to
⌊N/2⌋+10 moves can be made. In Div. 1 and Div. 2 this problem is worth
60 points and "STRFLIP" is worth
40. In Div. 3 this problem is non-scorable and "STRFLIP" is worth
100 points.
You are given a binary string
A of length
N, which we treat as being
1-indexed.
In one move, you are allowed to
Pick a contiguous substring (i.e.
A[L:R] for some
1≤L≤R≤N) of
A that contains at least one '
0' and at least one '
1'
Flip all the characters of the chosen substring (i.e. change every
0 to
1 and every
to
)
You are also given a target string
B of the same length as
A.
Determine if it is possible to convert
A to
B by applying a sequence of moves as described above.
If it is possible to convert
A to
B, then find a sequence of no more than
⌊N/2⌋+10 moves that accomplishes this. It can be shown that whenever it is possible to convert
A to
B, then it is possible to do so using no more than
⌊N/2⌋+10 moves.
If there are multiple answers, you can print any of them.
Input Format
The first line of input contains a single integer
T, denoting the number of test cases. The description of
T test cases follows.
Each test case consists of three lines.
The first line of each test case contains a single integer
N, the size of the strings.
The second line of each test case contains
A, a binary string with
N characters.
The third line of each test case contains
B, a binary string with
N characters.
Output Format
For each test case, print the answer starting from a new line in the following format:
In the first line, print
−1 if it is impossible to convert
A to
B. Otherwise, print a single non-negative integer
K — the number of moves that your solution requires.
Use the next
K lines to describe your sequence of moves, in the same order they are to be performed.
The
i
th
of these
K lines should contain two integers
L
i
and
R
i
, denoting the starting and ending positions of the substring chosen in the
i
th
operation.
Note that the following conditions must be satisfied:
0≤K≤⌊N/2⌋+10
1≤L
i
≤R
i
≤N for each valid
i
Each substring
A[L
i
:R
i
] must contain at least one '
0' and one '
1'.
Constraints
1≤T≤2000
20≤N≤10
3
The sum of
N over all testcases does not exceed
5000
∣A∣=∣B∣=N
A and
B are binary strings, i.e, contain only
0 and
1.
At most
⌊N/2⌋+10 moves can be made for each testcase.
Sample 1:
Input
Output
3
5
10110
00100
5
00000
11111
2
00
00
2
1 4
2 3
-1
0
Explanation:
Note: The sample tests use strings of small lengths just to illustrate the problem, and will not be present in the actual tests. Every string in the actual test files will have a length of at least
20, as stated by the constraints.
Test Case
1: The given string is
A=10110. Apart from the single character substrings and the substring
A[3:4]=11, all other substrings are valid first moves.
The sample output performs moves as follows:
First, flip the substring
A[1:4]. Now,
A=01000.
Then, flip the substring
A[2:3]. Now,
A=00100, which is the target string.
Note that there are several other valid solutions, and any solution using no more than
⌊5/2⌋+10=12 moves will be accepted. For example, a sequence of
3 moves is shown below:
Flip
A[1:5], giving
A=01001
Flip
A[4:5], giving
A=01010
Flip
A[2:4], giving
A=00100
Test Case 2: The given string
A=00000 has no substring with both
0 and
1, consequently there are no moves possible. Therefore it is impossible to convert this string to
B=11111.
Test Case 3: The given string
A=00 is already equal to
B and so no moves are required.