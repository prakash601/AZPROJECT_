Chef has binary string
A of length
N. He constructs a new binary string
B by concatenating
M copies of
A together. For example, if
A="10010",
M=3, then
B="100101001010010".
Chef calls an index
i
(1≤i≤N⋅M) good if:
pref
i
=suf
i+1
.
Here,
pref
j
=B
1
+B
2
+…+B
j
and
suf
j
=B
j
+B
j+1
+…+B
N⋅M
(Note that
suf
N⋅M+1
=0 by definition)
Chef wants to find the number of good indices in
B. Can you help him do so?
Input Format
The first line contains a single integer
— the number of test cases. Then the test cases follow.
The first line of each test case contains two space-separated integers
N and
M — the length of the binary string
A and the number of times
A is concatenated to form $
The second line of each test case contains a binary string
A of length
N containing
0s and
1s only.
Output Format
For each test case, output the number of good indices in
B.
Constraints
1≤T≤10
5
1≤N,M≤10
5
A is a binary string, i.e, contains only the characters
0 and
1.
The sum of
N over all test cases does not exceed
2⋅10
5
.
The sum of
M over all test cases does not exceed
2⋅10
5
.
Sample 1:
Input
Output
3
2 2
00
2 4
11
3 3
101
4
1
2
Explanation:
Test case
1:
B="0000". In this string, all the indices are good.
Test case
2:
B="11111111". In this string, only
i=4 is good.
Test case
3:
B="101101101". In this string,
i=4 and
i=5 are good.