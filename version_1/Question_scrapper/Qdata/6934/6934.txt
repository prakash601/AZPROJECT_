Note: For the problem KPERM, we have observed that PYPY3 performs better than Python3.
You are given integers
N,
R and
K. Consider all permutations of the integers
1 through
N with exactly
R inversions. Find the
K-th lexicographically smallest among these permutations.
Notes:
The number of inversions in a permutation
P
1
,P
2
,…,P
N
is the number of pairs of integers
(i,j) such that
1≤i<j≤N and
P
i
>P
j
.
A permutation
A
1
,A
2
,…,A
N
is lexicographically smaller than a permutation
B
1
,B
2
,…,B
N
if there is an index
i (
1≤i≤N) such that
A
i
<B
i
and for each valid
j<i,
A
j
=B
j
.
Input
The first line of the input contains a single integer
T denoting the number of test cases. The description of
T test cases follows.
The first and only line of each test case contains three space-separated integers
N,
R and
K.
Output
For each test case:
If the lexicographically
K-th smallest permutation with
R inversions does not exist, print a single line containing the integer
−1.
Otherwise, print a single line containing
N space-separated integers ― the lexicographically
K-th smallest permutation with
R inversions.
Constraints
1≤T≤2,000
1≤N≤500
0≤R≤200,000
1≤K≤10
18
Sample 1:
Input
Output
1
3 1 2
2 1 3
Explanation:
Example case 1: There are two permutations with
1 inversion:
[1,3,2] and
[2,1,3]. The first permutation is lexicographically smaller than the second permutation.