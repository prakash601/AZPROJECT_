There are
n
cities and
m
bidirectional roads in the country. The roads in the country form an undirected weighted graph. The graph is not guaranteed to be connected. Each road has it's own parameter
w
. You can travel through the roads, but the government made a new law: you can only go through two roads at a time (go from city
a
to city
b
and then from city
b
to city
c
) and you will have to pay
(wab+wbc)2
money to go through those roads. Find out whether it is possible to travel from city
1
to every other city
t
and what's the minimum amount of money you need to get from
1
to
t
.
Input
First line contains two integers
n
,
m
(
2≤n≤105
,
1≤m≤min(
n⋅(n−1)
2
,2⋅105)
).
Next
m
lines each contain three integers
vi
,
ui
,
wi
(
1≤vi,ui≤n
,
1≤wi≤50
,
ui≠vi
). It's guaranteed that there are no multiple edges, i.e. for any edge
(ui,vi)
there are no other edges
(ui,vi)
or
(vi,ui)
.
Output
For every city
t
print one integer. If there is no correct path between
1
and
t
output
−1
. Otherwise print out the minimum amount of money needed to travel from
1
to
t
.
Examples
input
Copy
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
output
Copy
0 98 49 25 114 
input
Copy
3 2
1 2 1
2 3 2
output
Copy
0 -1 9 
Note
The graph in the first example looks like this.
In the second example the path from
1
to
3
goes through
2
, so the resulting payment is
(1+2)2=9
.