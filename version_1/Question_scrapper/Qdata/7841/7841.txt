Raj has a single physical network line that connects his office to the Internet. This line bandwidth is
𝑏
bytes per millisecond.
There are
𝑛
users who would like to use this network line to transmit some data. The
𝑖
-th of them will use the line from millisecond
𝑠
𝑖
to millisecond
𝑓
𝑖
inclusive. His initial data rate will be set to
𝑑
𝑖
. That means he will use data rate equal to
𝑑
𝑖
for millisecond
𝑠
𝑖
, and then it will change according to the procedure described below.
The flow control will happen as follows. Suppose there are
𝑚
users trying to transmit some data via the given network line during millisecond
𝑥
. Denote as
𝑡
𝑖
the data rate that the
𝑖
-th of these
𝑚
users has at the beginning of this millisecond. All
𝑡
𝑖
are non-negative integer values.
If
𝑚=0
, i. e. there are no users trying to transmit data during this millisecond, nothing happens.
If the sum of all
𝑡
𝑖
is less than or equal to
𝑏
, each active user successfully completes his transmission (the
𝑖
-th active user transmits
𝑡
𝑖
bytes). After that, the data rate of each active user grows by
1
, i. e. each
𝑡
𝑖
is increased by
1
.
If the sum of all
𝑡
𝑖
is greater than
𝑏
, the congestion occurs and no data transmissions succeed this millisecond at all. If that happens, each
𝑡
𝑖
decreases twice, i. e. each
𝑡
𝑖
is replaced with
⌊
𝑡
𝑖
2
⌋
.
Raj knows all the values
𝑛
,
𝑏
,
𝑠
𝑖
,
𝑓
𝑖
, and
𝑑
𝑖
, he wants to calculate the total number of bytes transmitted by all the users in the aggregate.
Input
The first line of the input contains two integers
𝑛
and
𝑏
(
1≤𝑛≤2⋅
10
5
,
1≤𝑏≤
10
9
), the number of users who will use the line and the line bandwidth, respectively.
Each of the following
𝑛
lines contains three integers
𝑠
𝑖
,
𝑓
𝑖
and
𝑑
𝑖
(
1≤
𝑠
𝑖
≤
𝑓
𝑖
≤
10
9
,
1≤
𝑑
𝑖
≤
10
9
), denoting that the
𝑖
-th user will try to transmit data during each millisecond between
𝑠
𝑖
and
𝑓
𝑖
inclusive, and the initial data rate of the
𝑖
-th user.
Output
Print one integer — the total number of bytes all users will successfully transmit.
Examples
input
Copy
1 3
1 5 2
output
Copy
10
input
Copy
1 10
7 11 1000
output
Copy
0
input
Copy
2 6
1 12 1
8 20 3
output
Copy
64
input
Copy
3 10
1 100 1
30 60 20
40 80 6
output
Copy
534
Note
Consider the first example.
Millisecond
1
: User
1
transmits
2
bytes.
Millisecond
2
: User
1
transmits
3
bytes.
Millisecond
3
: Congestion occurs, and no user transmits data.
Millisecond
4
: User
1
transmits
2
bytes.
Millisecond
5
: User
1
transmits
3
bytes.
In the second example, at each millisecond from the
7
-th to the
11
-th inclusive, congestion occurs, and the only user decreases their rate twice. However, they don't decrease the speed enough before disconnecting.
Consider the third example.
Millisecond
1
: User
1
transmits
1
bytes.
Millisecond
2
: User
1
transmits
2
bytes.
Millisecond
3
: User
1
transmits
3
bytes.
Millisecond
4
: User
1
transmits
4
bytes.
Millisecond
5
: User
1
transmits
5
bytes.
Millisecond
6
: User
1
transmits
6
bytes.
Millisecond
7
: Congestion occurs, and no user transmits data.
Millisecond
8
: User
1
transmits
3
bytes. User
2
transmits
3
bytes.
Millisecond
9
: Congestion occurs, and no user transmits data.
Millisecond
10
: User
1
transmits
2
bytes. User
2
transmits
2
bytes.
Millisecond
11
: User
1
transmits
3
bytes. User
2
transmits
3
bytes.
Millisecond
12
: Congestion occurs, and no user transmits data.
Millisecond
13
: User
2
transmits
2
bytes.
Millisecond
14
: User
2
transmits
3
bytes.
Millisecond
15
: User
2
transmits
4
bytes.
Millisecond
16
: User
2
transmits
5
bytes.
Millisecond
17
: User
2
transmits
6
bytes.
Millisecond
18
: Congestion occurs, and no user transmits data.
Millisecond
19
: User
2
transmits
3
bytes.
Millisecond
20
: User
2
transmits
4
bytes.