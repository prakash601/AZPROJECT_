You have a tree of
N vertices rooted at vertex
1, where
N is even. The
i-th vertex has a binary value
A
i
written on it (i.e, each
A
i
is either
0 or
1).
A tree is said to be balanced if and only if the number of zeros written on its vertices equals the number of ones written on its vertices.
You can select some disjoint subtrees and flip the values on them (i.e, make all 0's into 1's and all 1's into 0's). Formally, you can pick any subset (possibly empty) of vertices
{v
1
,v
2
,…,v
k
} such that
v
i
is not an ancestor of
v
j
for
i

=j, and flip the value of
A
x
for every vertex
x that is contained in the subtree of some
v
i
.
Find a way of performing this operation that makes the entire tree balanced. It can be proved that the solution always exists.
If there are multiple possible solutions, you may print any of them. In particular, you do not need to minimize the number of subtrees that are flipped.
Input Format
The first line of input contains a single integer
T, the number of test cases. The description of test cases follows.
The first line of each test case contains an integer
N — the size of the tree.
The second line contains
N space-separated integers
A
1
,A
2
,…,A
N
— the values on the vertices.
Then,
N−1 lines follow. The
i-th line contains two space-separated integers
u
i
and
v
i
— the vertices connected by the
i-th edge.
Output Format
For each test case, first print a single integer
m — the number of operations you performed.
Then, on the second line, print
m space-separated integers — the roots of the subtrees you decided to flip.
If there are multiple solutions, you can print any of them.
Constraints
1≤T≤3000
The sum of
N across all test cases doesn't exceed
3⋅10
5
N is even
0≤A
i
≤1
Subtasks
Subtask 1 (10 points):
The
i-th edge connects vertices
i and
i+1.
Subtask 2 (25 points):
Sum of
N across all test cases doesn't exceed
500.
Subtask 3 (30 points):
A
i
=1 for
1≤i≤N.
Subtask 4 (35 points):
No further constraints.
Sample 1:
Input
Output
2
4
0 1 0 0
1 2
1 3
3 4
4
1 1 1 1
1 2
1 3
1 4
1
4 
2
3 4
Explanation:
Test case
1: The values
A
1
,A
2
,A
3
,A
4
become
[0,1,0,1] after the flip. The tree is balanced since there are two 0's and two 1's.
Test case
2: The values
A
1
,A
2
,A
3
,A
4
become
[0,0,1,1] after the flips.