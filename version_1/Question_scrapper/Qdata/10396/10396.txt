You have an array
a
of length
n
. For every positive integer
x
you are going to perform the following operation during the
x
-th second:
Select some distinct indices
i1,i2,…,ik
which are between
1
and
n
inclusive, and add
2x−1
to each corresponding position of
a
. Formally,
aij:=aij+2x−1
for
j=1,2,…,k
. Note that you are allowed to not select any indices at all.
You have to make
a
nondecreasing as fast as possible. Find the smallest number
T
such that you can make the array nondecreasing after at most
T
seconds.
Array
a
is nondecreasing if and only if
a1≤a2≤…≤an
.
You have to answer
t
independent test cases.
Input
The first line contains a single integer
t
(
1≤t≤104
) — the number of test cases.
The first line of each test case contains single integer
n
(
1≤n≤105
) — the length of array
a
. It is guaranteed that the sum of values of
n
over all test cases in the input does not exceed
105
.
The second line of each test case contains
n
integers
a1,a2,…,an
(
−109≤ai≤109
).
Output
For each test case, print the minimum number of seconds in which you can make
a
nondecreasing.
Example
input
Copy
3
4
1 7 6 5
5
1 2 3 4 5
2
0 -4
output
Copy
2
0
3
Note
In the first test case, if you select indices
3,4
at the
1
-st second and
4
at the
2
-nd second, then
a
will become
[1,7,7,8]
. There are some other possible ways to make
a
nondecreasing in
2
seconds, but you can't do it faster.
In the second test case,
a
is already nondecreasing, so answer is
0
.
In the third test case, if you do nothing at first
2
seconds and select index
2
at the
3
-rd second,
a
will become
[0,0]
.