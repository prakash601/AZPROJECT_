You are given two arrays
A and
B of length
N. The array
B contains only zeros and ones.
You are given
Q queries, each of which consists of two integers
L and
R,
L≤R. Consider a partition of the interval
[L,R] into some
k≥1 subintervals
[l
1
,r
1
],[l
2
,r
2
],…,[l
k
,r
k
] satisfying the following conditions:
l
1
=L and
r
k
=R
l
i
≤r
i
for every
1≤i≤k
r
i
+1=l
i+1
for every
1≤i<k
B
i
+B
i
+⋯+B
i
=1 for every
1≤i≤k
Note that you are free to choose any
k≥1.
Define the sum of a subinterval
[l
i
,r
i
] to be
sum(l
i
,r
i
)=A
l
i
+A
l
i
+1
+⋯+A
r
i
. Given a partition of
[L,R] into subintervals, define its goodness to be the number of subintervals in the partition with non-negative sum. Find and print the maximum goodness over all partitions satisfying the given conditions.
Input Format
The first line contains an integer
T, denoting the number of test cases. The
T test cases then follow:
The first line of each test case contains two space-separated integers
N,Q.
The second line contains
N space-separated integers
A
1
,A
2
,…,A
N
.
The third line contains
N space-separated integers
B
1
,B
2
,…,B
N
.
Q lines follow, each containing two space-separated integers
L,R.
Output Format
For each query, output in a single line the maximum goodness of a partition of
[L,R]. If there is no possible partition, print
0.
Constraints
1≤T≤10
1≤N,Q≤5⋅10
5
∣A
i
∣≤10
9
0≤B
i
≤1
1≤L≤R≤N
Sum of
N over all test cases does not exceed
5⋅10
5
Sum of
Q over all test cases does not exceed
5⋅10
5
Subtasks
Subtask #1 (5 points)
1≤N≤1000
Q=1
Sum of
N over all test cases does not exceed
10
3
Subtask #2 (30 points)
1≤N≤5⋅10
5
Q=1
Sum of
N over all test cases does not exceed
5⋅10
5
Subtask #3 (65 points)
Original constraints
Sample 1:
Input
Output
1
5 1
1 1 1 1 2
1 1 0 1 1
2 5
3
Explanation:
Test Case
1: We can divide the subarray
[2,5] into
[2,3],[4,4],[5,5].