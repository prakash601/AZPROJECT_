You are given an array
A of size
N.
A subarray
[A
L
,A
(L+1)
,…,A
R
]
(L<R) is said to be good if:
A
L
∣
A
(L+1)
∣
…
∣
A
R
>
A
L
⊕
A
(L+1)
⊕
…
⊕
A
R

where
∣ and
⊕ denote the bitwise or and xor operations respectively.
Find the number of good subarrays in the array.
Note that a subarray is obtained by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the array.
Input Format
The first line of input will contain a single integer
, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains a single integer
N - the size of the array.
The next line contains
N space-separated integers
A
1
,A
2
,…,A
N
denoting the elements of the array.
Output Format
For each test case, print a single line containing one integer - the number of good subarrays.
Constraints
1≤T≤10
5
1≤N≤2⋅10
5
0≤A
i
<2
20
The sum of
N over all test cases won't exceed
2⋅10
5
.
Sample 1:
Input
Output
3
3
1 2 3
4
2 3 4 8
5
2 1 1 4 2
2
3
6
Explanation:
Test case
1: There are two good subarrays
A[1,3],
A[2,3]:
A[1,3]=[1,2,3]: Here
1∣2∣3=3 and
1⊕2⊕3=0
A[2,3]=[2,3]: Here
2∣3=3 and
2⊕3=1
Test case
2: There are three good subarrays
A[1,2],
A[1,3],
A[1,4].
Test case
3: There are six good subarrays
A[1,3],
A[1,4],
A[1,5],
A[2,3],
A[2,4],
A[2,5].