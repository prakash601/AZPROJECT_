Hossam makes a big party, and he will invite his friends to the party.
He has
𝑛
friends numbered from
1
to
𝑛
. They will be arranged in a queue as follows:
1,2,3,…,𝑛
.
Hossam has a list of
𝑚
pairs of his friends that don't know each other. Any pair not present in this list are friends.
A subsegment of the queue starting from the friend
𝑎
and ending at the friend
𝑏
is
[𝑎,𝑎+1,𝑎+2,…,𝑏]
. A subsegment of the queue is called good when all pairs of that segment are friends.
Hossam wants to know how many pairs
(𝑎,𝑏)
there are (
1≤𝑎≤𝑏≤𝑛
), such that the subsegment starting from the friend
𝑎
and ending at the friend
𝑏
is good.
Input
The input consists of multiple test cases. The first line contains a single integer
𝑡
(
1≤𝑡≤2⋅
10
4
), the number of test cases. Description of the test cases follows.
The first line of each test case contains two integer numbers
𝑛
and
𝑚
(
2≤𝑛≤
10
5
,
0≤𝑚≤
10
5
) representing the number of friends and the number of pairs, respectively.
The
𝑖
-th of the next
𝑚
lines contains two integers
𝑥
𝑖
and
𝑦
𝑖
(
1≤
𝑥
𝑖
,
𝑦
𝑖
≤𝑛
,
𝑥
𝑖
≠
𝑦
𝑖
) representing a pair of Hossam's friends that don't know each other.
Note that pairs can be repeated.
It is guaranteed that the sum of
𝑛
over all test cases does not exceed
10
5
, and the sum of
𝑚
over all test cases does not exceed
10
5
.
Output
For each test case print an integer — the number of good subsegments.
Example
input
Copy
2
3 2
1 3
2 3
4 2
1 2
2 3
output
Copy
4
5
Note
In the first example, the answer is
4
.
The good subsegments are:
[1]
[2]
[3]
[1, 2]
In the second example, the answer is
5
.
The good subsegments are:
[1]
[2]
[3]
[4]
[3, 4]