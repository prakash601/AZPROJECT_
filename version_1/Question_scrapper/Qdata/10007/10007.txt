We have a secret array. You don't know this array and you have to restore it. However, you know some facts about this array:
The array consists of
n
distinct positive (greater than
0
) integers.
The array contains two elements
x
and
y
(these elements are known for you) such that
x<y
.
If you sort the array in increasing order (such that
a1<a2<…<an
), differences between all adjacent (consecutive) elements are equal (i.e.
a2−a1=a3−a2=…=an−an−1)
.
It can be proven that such an array always exists under the constraints given below.
Among all possible arrays that satisfy the given conditions, we ask you to restore one which has the minimum possible maximum element. In other words, you have to minimize
max(a1,a2,…,an)
.
You have to answer
t
independent test cases.
Input
The first line of the input contains one integer
t
(
1≤t≤100
) — the number of test cases. Then
t
test cases follow.
The only line of the test case contains three integers
n
,
x
and
y
(
2≤n≤50
;
1≤x<y≤50
) — the length of the array and two elements that are present in the array, respectively.
Output
For each test case, print the answer:
n
integers
a1,a2,…,an
(
1≤ai≤109
), where
ai
is the
i
-th element of the required array. If there are several answers, you can print any (it also means that the order of elements doesn't matter).
It can be proven that such an array always exists under the given constraints.
Example
input
Copy
5
2 1 49
5 20 50
6 20 50
5 3 8
9 13 22
output
Copy
1 49 
20 40 30 50 10
26 32 20 38 44 50 
8 23 18 13 3 
1 10 13 4 19 22 25 16 7 