You are given a string
A of length
N, consisting of zeroes and ones. You want to partition it into blocks consisting of consecutive indices such that each block has an odd sum and has length at most
m. For each
m from
1 to
N, find the minimum number of blocks required, or report that it is impossible.
###Input
The first line contains an integer
T, the number of test cases. Each test case contains two lines:
The first line of each test case contains an integer
N.
The second line of each test case contains a string
A=a
a
…a
.
###Output For each test case, print
N space-separated integers. The
m-th of these integers should be the minimum number of blocks of length at most
m the array can be partitioned into, such that each block has an odd sum, or
−1 if it is impossible to do so.
###Constraints
1≤N≤10
6
The sum of
N over all test cases doesn't exceed
10
6
.
###Subtasks
Subtask 1 (9 Points): The sum of
N over all test cases doesn't exceed
200.
Subtask 2 (13 Points): The sum of
N over all test cases doesn't exceed
2500.
Subtask 3 (21 Points): The sum of
N over all test cases doesn't exceed
15000.
Subtask 4 (17 Points): The sum of
N over all test cases doesn't exceed
50000.
Subtask 5 (24 Points): The sum of
N over all test cases doesn't exceed
250000.
Subtask 6 (16 Points): No additional constraints.
Sample 1:
Input
Output
1
5
01101
-1 3 3 3 1
Explanation:
Clearly if
m=1, no such partitioning is possible, as the first block must consist of a single
0.
For
m=2,3,4, we can partition it as
01
10
1
. Note that
01
1
01
is also a valid partition.
If
m=5, the partition consisting of a single block
01101
is valid as the total sum (
3) is odd.