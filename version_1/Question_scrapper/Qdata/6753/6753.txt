An array
B of length
M is called good if, when it is sorted,
B
i
divides
B
i+1
for every
1≤i<M.
For example,
[1,2,1],
[66,6,3], and
[4,4] are good arrays, while
[1,2,3] and
[99,6,3] are not.
You're given an array
A containing
N integers. Answer
Q queries of the following form:
Given
L and
R, let
B be the subarray of
A from index
L to index
R, i.e,
B=[A
L
,A
L+1
,…,A
R
].
Find the number of good non-empty subarrays of
B.
More formally, find the number of pairs
(l,r) such that
L≤l≤r≤R and the array
[A
l
,A
l+1
,…,A
r
] is good.
Input Format
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains two space-separated integers
N and
Q — the size of the array and the number of queries.
The second line of each test case contains
N space-separated integers
A
1
,A
2
,…,A
N
.
The next
Q lines describe the queries. The
i-th of these
Q lines contains two space-separated integers
L
i
and
R
i
— the parameters of the
i-th query.
Output Format
For each test case, print
Q lines. The
i-th line should contain the answer to the
i-th query.
Constraints
1≤T≤10
5
1≤N≤2⋅10
5
1≤A
i
≤N
1≤Q≤2⋅10
5
1≤L
i
≤R
i
≤N
The sum of
N and
Q over all test cases won't exceed
2⋅10
5
.
Sample 1:
Input
Output
1
10 5
1 4 3 6 2 2 4 8 5 10
1 2
1 3
1 10
4 8
2 5
3
4
21
13
6
Explanation:
Query
1: We're looking at the subarray
[1,4]. All of its non-empty subarrays
[1],[4],[1,4] are good.
Query
2: We're looking at the subarray
[1,4,3]. Its good subarrays are
[1],[4],[1,4],[3].
Query
5: We're looking at the subarray
[4,3,6,2]. Its good subarrays are
[4],[3],[6],[2],[3,6],[6,2]; for a total of
6.