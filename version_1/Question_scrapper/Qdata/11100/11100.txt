You are given an array
a
consisting of
n
integers
a1,a2,…,an
. You want to split it into exactly
k
non-empty non-intersecting subsegments such that each subsegment has odd sum (i. e. for each subsegment, the sum of all elements that belong to this subsegment is odd). It is impossible to rearrange (shuffle) the elements of a given array. Each of the
n
elements of the array
a
must belong to exactly one of the
k
subsegments.
Let's see some examples of dividing the array of length
5
into
3
subsegments (not necessarily with odd sums):
[1,2,3,4,5]
is the initial array, then all possible ways to divide it into
3
non-empty non-intersecting subsegments are described below:
[1],[2],[3,4,5]
;
[1],[2,3],[4,5]
;
[1],[2,3,4],[5]
;
[1,2],[3],[4,5]
;
[1,2],[3,4],[5]
;
[1,2,3],[4],[5]
.
Of course, it can be impossible to divide the initial array into exactly
k
subsegments in such a way that each of them will have odd sum of elements. In this case print "NO". Otherwise, print "YES" and any possible division of the array. See the output format for the detailed explanation.
You have to answer
q
independent queries.
Input
The first line contains one integer
q
(
1≤q≤2⋅105
) — the number of queries. Then
q
queries follow.
The first line of the query contains two integers
n
and
k
(
1≤k≤n≤2⋅105
) — the number of elements in the array and the number of subsegments, respectively.
The second line of the query contains
n
integers
a1,a2,…,an
(
1≤ai≤109
), where
ai
is the
i
-th element of
a
.
It is guaranteed that the sum of
n
over all queries does not exceed
2⋅105
(
∑n≤2⋅105
).
Output
For each query, print the answer to it. If it is impossible to divide the initial array into exactly
k
subsegments in such a way that each of them will have odd sum of elements, print "NO" in the first line. Otherwise, print "YES" in the first line and any possible division of the array in the second line. The division can be represented as
k
integers
r1
,
r2
, ...,
rk
such that
1≤r1<r2<⋯<rk=n
, where
rj
is the right border of the
j
-th segment (the index of the last element that belongs to the
j
-th segment), so the array is divided into subsegments
[1;r1],[r1+1;r2],[r2+1,r3],…,[rk−1+1,n]
. Note that
rk
is always
n
but you should print it anyway.
Example
input
Copy
3
5 3
7 18 3 14 1
5 4
1 2 3 4 5
6 2
1 2 8 4 10 2
output
Copy
YES
1 3 5
NO
NO