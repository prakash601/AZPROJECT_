You are given an array
A of
N positive integers.
In one operation, you can do the following:
Choose an index
i
(1≤i≤N), and change the value of
A
i
to either
(A
i
)
2
or
⌊
A
i
⌋.
Find the minimum number of operations required, such that, for the final array
A:
A is sorted in non-decreasing order;
A
N
≤10
18
.
NOTE: The elements of the array might not fit in a 32-bit integer.
The first line of input will contain a single integer
T, denoting the number of test cases.
Each test case consists of two lines of input:
The first line of each test case contains
N - the size of the array.
The next line contains
N integers,
A
1
,A
2
,A
3
,…,A
N
- the elements of the array.
Output Format
For each test case, output on a new line, the minimum number of operations required.
Constraints
1≤T≤1000
1≤N≤10
5
1≤A
i
≤10
18
The sum of
N over all test cases won't exceed
10
5
.
Sample 1:
Input
Output
3
4
1 3 9 9
4
1 9 3 9
3
4 2 1
0
1
3
Explanation:
Test case
1: The array is already sorted, no operation is required.
Test case
2: Using one operation, we can change
A
2
to
⌊
A
2
⌋=3. The final array is
A=[1,3,3,9] which is sorted in non-decreasing order.
Test case
3: We make the following operations:
Change
A
2
to
⌊
A
2
⌋=1.
Change
A
1
to
⌊
A
1
⌋=2.
Change
A
1
to
⌊
A
1
⌋=1.
The final array is
A=[1,1,1] which is sorted in non-decreasing order.