You are given an array
A of length
N.
Let
F(L,R) be the array you get from
A after removing all occurrences of
A
L
,A
L+1
,…,A
R
. In other words, for each value in
A between the indices
L and
R, you delete every occurrence of that value, including occurrences outside the range
[L,R].
A pair
(L,R) is called good if
1≤L≤R≤N and
F(L,R) is sorted in non-decreasing order. In the case that
F(L,R) is the empty array, we say it is sorted.
Example: Suppose
A=[1,2,3,5,7,6,8,6,5,8]. Then
F(4,6) is the array we get after deleting all occurrences of the numbers
5,7,6. Thus,
F(4,6)=[1,2,3,8,8]. This array is sorted in non-decreasing order, so the pair
(4,6) is good.
###Input:
The first line of the input contains an integer
T, denoting the number of test cases.
The first line of each test case contains an integer
N, denoting the size of the array.
The second line of each test case contains
N space-separated integers, denoting the array
A.
###Output: For each test case, output the number of good subarrays in
A, in a separate line.
###Constraints
1≤T≤10
4
1≤N≤2×10
5
1≤A
i
≤10
9
Sum of
N over all test cases doesn't exceed
2×10
5
.
Sample 1:
Input
Output
3
3
9 8 7
5
5 3 1 5 2
7
1 5 2 5 3 5 6
3
7
24
Explanation:
In the first test case , the good subarrays are:
(1,2),(1,3),(2,3).
(1,2) is a good subarray because the remaining array
[7] is sorted (we removed
9,8).
(1,3) is a good subarray because the remaining array
[] is sorted (we removed
9,8,7)
(2,3) is a good subarray because the remaining array
[9] is sorted (we removed
8,7).
In the second test case, the good subarrays are
(1,2),(1,3),(1,4),(1,5),(2,4),(2,5),(3,5).
In the third test case, there are 24 possible good subarrays.
Note that
(2,2) is a good subarray because the remaining array
[1,2,3,6] is sorted (we removed
5,5).