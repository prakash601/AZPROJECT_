You are given a permutation
p
of integers from
1
to
n
, where
n
is an even number.
Your goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:
take two indices
i
and
j
such that
2⋅|i−j|≥n
and swap
pi
and
pj
.
There is no need to minimize the number of operations, however you should use no more than
5⋅n
operations. One can show that it is always possible to do that.
Input
The first line contains a single integer
n
(
2≤n≤3⋅105
,
n
is even) — the length of the permutation.
The second line contains
n
distinct integers
p1,p2,…,pn
(
1≤pi≤n
) — the given permutation.
Output
On the first line print
m
(
0≤m≤5⋅n
) — the number of swaps to perform.
Each of the following
m
lines should contain integers
ai,bi
(
1≤ai,bi≤n
,
|ai−bi|≥
n
2
) — the indices that should be swapped in the corresponding swap.
Note that there is no need to minimize the number of operations. We can show that an answer always exists.
Examples
input
Copy
2
2 1
output
Copy
1
1 2
input
Copy
4
3 4 1 2
output
Copy
4
1 4
1 4
1 3
2 4
input
Copy
6
2 5 3 1 4 6
output
Copy
3
1 5
2 5
1 4
Note
In the first example, when one swap elements on positions
1
and
2
, the array becomes sorted.
In the second example, pay attention that there is no need to minimize number of swaps.
In the third example, after swapping elements on positions
1
and
5
the array becomes:
[4,5,3,1,2,6]
. After swapping elements on positions
2
and
5
the array becomes
[4,2,3,1,5,6]
and finally after swapping elements on positions
1
and
4
the array becomes sorted:
[1,2,3,4,5,6]
.