You are given an undirected graph with
N nodes (numbered
1 through
N) and
M edges. Each node has a value; let's denote the value of node
i by
A
i
. Note that the graph is not necessarily simple.
A doubly increasing path is a directed path such that both the values of nodes and differences of values of nodes on this path are strictly increasing. Formally, it is a sequence of nodes
p
1
,p
2
,p
3
,…,p
k
for some integer (the length of this path)
k≥1 such that
0<A
p
2
−A
p
1
<A
p
3
−A
p
2
<…<A
p
k
−A
p
k−1
and for each valid
i, nodes
p
i
and
p
i−1
are connected by an edge.
You need to find the length of the longest doubly increasing path in the graph.
Input
The first line of the input contains a single integer
T denoting the number of test cases. The description of
T test cases follows.
The first line of each test case contains two space-separated integers
N and
M.
The second line contains
N space-separated integers
A
1
,A
2
,…,A
N
.
Each of the following
M lines contains two space-separated integers
u and
v denoting that nodes
u and
v are connected by an edge.
Output
For each test case, print a single line containing one integer — the maximum length of a doubly increasing path.
Constraints
1≤T≤10
1≤N≤10
5
1≤M≤10
5
1≤u,v≤N
∣A
i
∣≤10
15
for each valid
i
Sample 1:
Input
Output
2
5 4
1 2 3 4 5
2 4
1 5
1 3
3 5
5 4
1 2 3 4 5
3 5
1 2
4 5
5 2
2
3
Explanation:
Example case 1: Any path with length
2 from a smaller node to a larger one is doubly increasing. There is no doubly increasing path with length greater than
2.
Example case 2: The path
1→2→5 is doubly increasing.